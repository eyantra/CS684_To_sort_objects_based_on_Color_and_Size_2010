/**
 * Copyright (c) 2010, this is a property of ERTS Lab, IIT Bombay.
 * This project is developed as part of the Embedded Systems (Software) course CS 684, IIT Bombay
 *
 * PROJECT TITLE: To sort object based on color and size usinf Firebird V robot
 *
 * @section PROJECT SUMMARY
 * The robot covers the entire arena according to a predetermined algorithm.
 * It detects objects and captures its image after proper alignment.
 * In ignores objects that are not of the desired color.
 * For the desired color objects it sorts the objects according to size and places them in seperate bins.
 * This piece of code, is converted to a hex file of ATMEGA2560 standard
 * and burnt onto the FIREBIRD V Robot.
 *
 * @file cover_field.c
 * This file contains definition of all the functions required for
 * the movement of the robot to cover the field. This file is included in the main file.
 * 
 * @author Group4. Arpita Agrawal, Ruttika Maheshwari, Sukanya Basu
 *
 * @date LAST MODIFIED: Nov 8, 2010
 * @version 1.0
 *
 * @section LICENSE
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details at
 * http://www.gnu.org/copyleft/gpl.html
 *
 * @section COMPILATION
 * Compile using the AVR studio for ATMEGA2560 and F_CPU=11059200
 * Write the .hex file to the FIREBIRD V robot
 *
 */



#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

#include <math.h>

#define FCPU 11059200ul  // Frequency: defined here to make sure that program works properly


unsigned char ADC_Conversion(unsigned char);
unsigned char ADC_Value;
unsigned char sharp_left, sharp_center, sharp_right, sharp_center_left, sharp_center_right;
unsigned char distance, adc_reading;
unsigned int value_left, value_center, value_right;
float BATT_Voltage, BATT_V;
float white_1, white_2, white_3;
unsigned int shaftCountRight, shaftCountLeft;


#include <avr/delay.h>
#define FCPU 11059200ul
#define RS 0
#define RW 1
#define EN 2
#define lcd_port PORTC

#define sbit(reg,bit)	reg |= (1<<bit)
#define cbit(reg,bit)	reg &= ~(1<<bit)

void init_ports();
void lcd_reset_4bit();
void lcd_init();
void lcd_wr_command(unsigned char);
void lcd_wr_char(char);
void lcd_home();
void lcd_cursor(char, char);
void lcd_print(char, char, unsigned int, int);
void lcd_string(char*);

unsigned int temp;
unsigned int unit;
unsigned int tens;
unsigned int hundred;
unsigned int thousand;
unsigned int million;

int i;


/**
 * Function to Reset LCD
 */
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
	lcd_port = 0x30;				//Sending 3
	sbit(lcd_port,EN);				//Set Enable Pin
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
	lcd_port = 0x30;				//Sending 3
	sbit(lcd_port,EN);				//Set Enable Pin
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
	lcd_port = 0x30;				//Sending 3
	sbit(lcd_port,EN);				//Set Enable Pin
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
	sbit(lcd_port,EN);				//Set Enable Pin
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin

	
}

/**
 * Function to Initialize LCD
 */
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
	lcd_wr_command(0x01);
	lcd_wr_command(0x06);
	lcd_wr_command(0x0E);
	lcd_wr_command(0x80);
		
}

	 
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
	lcd_port |= temp;
	cbit(lcd_port,RS);
	cbit(lcd_port,RW);
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
	lcd_port |= cmd;
	cbit(lcd_port,RS);
	cbit(lcd_port,RW);
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
}

/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
	lcd_port |= temp;
	sbit(lcd_port,RS);
	cbit(lcd_port,RW);
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
	lcd_port |= letter;
	sbit(lcd_port,RS);
	cbit(lcd_port,RW);
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
}


void lcd_home()
{
	lcd_wr_command(0x80);
}


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
		str++;
	}
}

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
	switch (row) {
		case 1: lcd_wr_command (0x80 + column - 1); break;
		case 2: lcd_wr_command (0xc0 + column - 1); break;
		case 3: lcd_wr_command (0x94 + column - 1); break;
		case 4: lcd_wr_command (0xd4 + column - 1); break;
		default: break;
	}
}

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
	if(row==0||coloumn==0)
	{
		lcd_home();
	}
	else
	{
		lcd_cursor(row,coloumn);
	}
	if(digits==5 || flag==1)
	{
		million=value/10000+48;
		lcd_wr_char(million);
		flag=1;
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
		hundred = temp%10 + 48;
		lcd_wr_char(hundred);
		flag=1;
	}
	if(digits==2 || flag==1)
	{
		temp = value/10;
		tens = temp%10 + 48;
		lcd_wr_char(tens);
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
		lcd_wr_char(unit);
	}
	if(digits>5)
	{
		lcd_wr_char('E');
	}
	
}
		
/*** Function for lcd port configuration ***/
void lcd_port_config (void)
	{
	DDRC = DDRC | 0xF7; 	// all the LCD pins' direction set as output
	PORTC = PORTC & 0x80; 	// all the LCD pins are set to logic 0 except PORTC 7
	}

/*** Function for ADC pin configuration ***/
void adc_pin_config (void)
	{
	DDRF = 0x00; 
	PORTF = 0x00;
	DDRK = 0x00;
	PORTK = 0x00;
	}
/*** Funciton for initialization of ports ***/
void port_init()
	{
	lcd_port_config();
	adc_pin_config();	
	}
	
/*** Function for initialization of ADC ***/
void adc_init()
	{
	ADCSRA = 0x00;
	ADCSRB = 0x00;		//MUX5 = 0
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
	ACSR = 0x80;
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
	}

/*** Function for initialization of devices ***/
void init_devices (void)
	{
	cli();   //Clears the global interrupts
	port_init();
	adc_init();
	sei();   //Enables the global interrupts
	}
	
/*** Function for Analog to Digital conversion ***/
unsigned char ADC_Conversion(unsigned char Ch)
	{
	unsigned char a;
	if(Ch>7)
		{
		ADCSRB = 0x08;		// select the ch. > 7
		}
	Ch = Ch & 0x07;  			
	ADMUX= 0x20| Ch;	   	//do not disturb the left adjustment
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
	while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
	a=ADCH;
	ADCSRA = ADCSRA|0x10; 		//clear ADIF (ADC Interrupt Flag) by writing 1 to it
	ADCSRB = 0x00;
	return a;
	}
	
/*** Function for obtaining integral distance from sensor adc value ***/
unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
	{
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
	distanceInt = (int)distance;
	if(distanceInt>800)
		{
		distanceInt=800;
		}
	return distanceInt;
	}

/*** Funciton for initialization of ports ***/
void INIT_PORTS()
{

	DDRA=0x0F;      // Port A treated as Output
	PORTA = 0x00;   // Initialized
	DDRL = 0x18;    // Port L treated as output
	PORTL = 0x18;   //Iitialized

	DDRE=0x00;
	PORTE=0x30;

}

/*** Function for timer initialization ***/
void timer5_init()
{
	
	TCCR5B = 0b00001011;  //stop
	TCCR5A = 0b10101001;  
    
	OCR5AH = 0x00;
	OCR5AL = 0x00;
	OCR5BH = 0x00;
	OCR5BL = 0x00;
	OCR5CH = 0x00;
	OCR5CL = 0x00;
}

/***** To set left wheel speed *****/
void Left_Speed(unsigned char val){
	OCR5AL = val;
}

/***** To set right wheel speed *****/
void Right_Speed(unsigned char val){
	OCR5BL = val;
}

/*** Initialization of interrupts ***/
void INIT_INTERRUPT()
{
	cli();
	EICRB=0x0A;
	EIMSK=0x30;
	sei();
}

/*** For forward movement of robot ****/
void FORWARD(void)
{
	PORTA = 0x06;
}

/*** For reverse movement of robot ***/
void REVERSE(void)
{
	PORTA = 0x09;
}

/*** Hard left turn ***/
void LEFT_TURN(void)
{
	PORTA = 0x05;
}

/*** Soft left turn ***/
void LEFT_TURN_SOFT(void)
{
	PORTA = 0x04;
}

/*** Left turn while reversing ***/
void LEFT_REVERSE(void)
{
	PORTA = 0x01;
}


/*** Hard right turn ***/
void RIGHT_TURN(void)
{
	PORTA = 0x0A;
}

/*** Soft right turn ***/
void RIGHT_TURN_SOFT(void)
{
	PORTA = 0x02;
}

/*** Right turn while reversing ***/
void RIGHT_REVERSE(void)
{
	PORTA = 0x08;
}

/*** To stop the robot ***/
void STOP(void)
{
	PORTA = 0x00;
}



/************************** Functions related to interrupt begins here ********************************/


/*** For interrupt from left wheel ***/
ISR(INT4_vect)
{
	shaftCountLeft++;
}

/*** For interrupt from right wheel ***/
ISR(INT5_vect)
{
	shaftCountRight++;
}

/****** Rotate by a particular degre ******/
/**     Left or Right Turn has to be 
 *      specified before calling this function
 */
void ANGLE_ROTATE(unsigned int Degrees)
{

		float ReqdShaftCount = 0;
		unsigned long int ReqdShaftCountInt = 0;
		ReqdShaftCount = (float) Degrees/ 4.090;        // division by resolution to get shaft count  
		ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
		shaftCountRight = 0;
		shaftCountLeft = 0;
		while (1)
		{	if((shaftCountRight >= ReqdShaftCountInt) | (shaftCountLeft >= ReqdShaftCountInt))
			break;
		}
		STOP();

}



/****** Move by a particular distance ******/
/**     Forward or backward movement has to be
 *      specified before calling this function
 */
void LINEAR_DISTANCE( unsigned int distance)
{


	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;
	
	ReqdShaftCount = distance / 5.338;
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
	shaftCountRight = 0;
	while(1)
	 	{
			if(shaftCountRight > ReqdShaftCountInt)
				{
					break;
				}
		}
	STOP(); //Stop action
}


/************************** Functions related to interrupt ends here ********************************/


