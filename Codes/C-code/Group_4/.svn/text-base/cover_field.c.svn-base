#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
//#include <servo.c>

#include <math.h> //included to support power function
//#include "lcd.c"

#define FCPU 11059200ul //defined here to make sure that program works properly



unsigned char ADC_Conversion(unsigned char);
unsigned char ADC_Value;
unsigned char sharp_left, sharp_center, sharp_right, sharp_center_left, sharp_center_right;
unsigned char distance, adc_reading;
unsigned int value_left, value_center, value_right;
float BATT_Voltage, BATT_V;
float white_1, white_2, white_3;
unsigned int shaftCountRight, shaftCountLeft;


#include <avr/delay.h>
#define FCPU 11059200ul
#define RS 0
#define RW 1
#define EN 2
#define lcd_port PORTC

#define sbit(reg,bit)	reg |= (1<<bit)
#define cbit(reg,bit)	reg &= ~(1<<bit)

void init_ports();
void lcd_reset_4bit();
void lcd_init();
void lcd_wr_command(unsigned char);
void lcd_wr_char(char);
void lcd_home();
void lcd_cursor(char, char);
void lcd_print(char, char, unsigned int, int);
void lcd_string(char*);

unsigned int temp;
unsigned int unit;
unsigned int tens;
unsigned int hundred;
unsigned int thousand;
unsigned int million;

int i;


/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
	lcd_port = 0x30;				//Sending 3
	sbit(lcd_port,EN);				//Set Enable Pin
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
	lcd_port = 0x30;				//Sending 3
	sbit(lcd_port,EN);				//Set Enable Pin
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
	lcd_port = 0x30;				//Sending 3
	sbit(lcd_port,EN);				//Set Enable Pin
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
	sbit(lcd_port,EN);				//Set Enable Pin
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin

	
}

/*****Function to Initialize LCD*****/
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
	lcd_wr_command(0x01);
	lcd_wr_command(0x06);
	lcd_wr_command(0x0E);
	lcd_wr_command(0x80);
		
}

	 
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
	lcd_port |= temp;
	cbit(lcd_port,RS);
	cbit(lcd_port,RW);
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
	lcd_port |= cmd;
	cbit(lcd_port,RS);
	cbit(lcd_port,RW);
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
}

/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
	lcd_port |= temp;
	sbit(lcd_port,RS);
	cbit(lcd_port,RW);
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
	lcd_port |= letter;
	sbit(lcd_port,RS);
	cbit(lcd_port,RW);
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
}


void lcd_home()
{
	lcd_wr_command(0x80);
}


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
		str++;
	}
}

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
	switch (row) {
		case 1: lcd_wr_command (0x80 + column - 1); break;
		case 2: lcd_wr_command (0xc0 + column - 1); break;
		case 3: lcd_wr_command (0x94 + column - 1); break;
		case 4: lcd_wr_command (0xd4 + column - 1); break;
		default: break;
	}
}

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
	if(row==0||coloumn==0)
	{
		lcd_home();
	}
	else
	{
		lcd_cursor(row,coloumn);
	}
	if(digits==5 || flag==1)
	{
		million=value/10000+48;
		lcd_wr_char(million);
		flag=1;
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
		hundred = temp%10 + 48;
		lcd_wr_char(hundred);
		flag=1;
	}
	if(digits==2 || flag==1)
	{
		temp = value/10;
		tens = temp%10 + 48;
		lcd_wr_char(tens);
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
		lcd_wr_char(unit);
	}
	if(digits>5)
	{
		lcd_wr_char('E');
	}
	
}
		

void lcd_port_config (void)
	{
	DDRC = DDRC | 0xF7; 	//all the LCD pin's direction set as output
	PORTC = PORTC & 0x80; 	// all the LCD pins are set to logic 0 except PORTC 7
	}

//ADC pin configuration
void adc_pin_config (void)
	{
	DDRF = 0x00; 
	PORTF = 0x00;
	DDRK = 0x00;
	PORTK = 0x00;
	}

void port_init()
	{
	lcd_port_config();
	adc_pin_config();	
	}
	
void adc_init()
	{
	ADCSRA = 0x00;
	ADCSRB = 0x00;		//MUX5 = 0
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
	ACSR = 0x80;
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
	}

void init_devices (void)
	{
	cli(); //Clears the global interrupts
	port_init();
	adc_init();
	sei(); //Enables the global interrupts
	}
	
unsigned char ADC_Conversion(unsigned char Ch)
	{
	unsigned char a;
	if(Ch>7)
		{
		ADCSRB = 0x08;			// select the ch. > 7
		}
	Ch = Ch & 0x07;  			
	ADMUX= 0x20| Ch;	   		//do not disturb the left adjustment
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
	while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
	a=ADCH;
	ADCSRA = ADCSRA|0x10; 		//clear ADIF (ADC Interrupt Flag) by writing 1 to it
	ADCSRB = 0x00;
	return a;
	}
	
unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
	{
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
	distanceInt = (int)distance;
	if(distanceInt>800)
		{
		distanceInt=800;
		}
	return distanceInt;
	}


void INIT_PORTS()
{

	DDRA=0x0F; // Port A treated as Output
	PORTA = 0x00; // Initialized
	DDRL = 0x18;  // Port L treated as output
	PORTL = 0x18; //Iitialized

	DDRE=0x00;
	PORTE=0x30;

}

void timer5_init()
{
	
	TCCR5B = 0b00001011;  //stop
	TCCR5A = 0b10101001;  
      /*{ COM5A1=1, COM5A0=0; 
            COM5B1=1, COM5B0=0; 
	       COM5C1=0 COM5C0=0}	  
     	 {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	OCR5AH = 0x00;
	OCR5AL = 0x00;
	OCR5BH = 0x00;
	OCR5BL = 0x00;
	OCR5CH = 0x00;
	OCR5CL = 0x00;
}

void Left_Speed(unsigned char val){
	OCR5AL = val;
}

void Right_Speed(unsigned char val){
	OCR5BL = val;
}

void INIT_INTERRUPT()
{
	cli();
	EICRB=0x0A;
	EIMSK=0x30;
	sei();
}


void FORWARD(void)
{
	PORTA = 0x06;
}

void REVERSE(void)
{
	PORTA = 0x09;
}

void LEFT_TURN(void)
{
	PORTA = 0x05;
}

void LEFT_TURN_SOFT(void)
{
	PORTA = 0x04;
}
void LEFT_REVERSE(void)
{
	PORTA = 0x01;
}

void RIGHT_TURN(void)
{
	PORTA = 0x0A;
}

void RIGHT_TURN_SOFT(void)
{
	PORTA = 0x02;
}
void RIGHT_REVERSE(void)
{
	PORTA = 0x08;
}


void STOP(void)
{
	PORTA = 0x00;
}
/**************************new interupt for angular movement********************************/



ISR(INT4_vect)
{
	shaftCountLeft++;
}

ISR(INT5_vect)
{
	shaftCountRight++;
}

void ANGLE_ROTATE(unsigned int Degrees)
{

		float ReqdShaftCount = 0;
		unsigned long int ReqdShaftCountInt = 0;
		ReqdShaftCount = (float) Degrees/ 4.090; 
		// division by resolution to get shaft count  
		ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
		shaftCountRight = 0; //defined globle variable
		shaftCountLeft = 0;
		while (1)
		{	if((shaftCountRight >= ReqdShaftCountInt) | (shaftCountLeft >= ReqdShaftCountInt))
			break;
		}
		STOP();

}




void LINEAR_DISTANCE( unsigned int distance)
{


	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;
	
	ReqdShaftCount = distance / 5.338;
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
	shaftCountRight = 0;
	while(1)
	 	{
			if(shaftCountRight > ReqdShaftCountInt)
				{
					break;
				}
		}
	STOP(); //Stop action
}







/**********************************end**********************************************************/

/*
int main(void)
	{
	unsigned int value_left, value_center, value_right;
	unsigned int flag = 0;
	init_devices();
	timer5_init();
	INIT_PORTS();
	lcd_set_4bit();
	lcd_init();
	INIT_INTERRUPT();
	Left_Speed(100);
	Right_Speed(100);
	FORWARD();

	while(1)
		{
	
		//BATT_V = ADC_Conversion(0);
		//BATT_Voltage = ((ADC_Conversion(0)*100)*0.07902) + 0.7;	//Prints Battery Voltage Status
		//lcd_print(1,1,BATT_Voltage,4);
		
		sharp_left = ADC_Conversion(10);						//Stores the Analog value of front sharp connected to ADC channel 
		// into variable "sharp"
		value_left = Sharp_GP2D12_estimation(sharp_left);				//Stores Distance calsulated in a variable "value".
		lcd_print(2,1,value_left,3); 
		
		sharp_center = ADC_Conversion(11);						//Stores the Analog value of front sharp connected to ADC channel 
		// into variable "sharp"
		value_center = Sharp_GP2D12_estimation(sharp_center);				//Stores Distance calsulated in a variable "value".
		lcd_print(2,7,value_center,3);
		
		sharp_right = ADC_Conversion(12);						//Stores the Analog value of front sharp connected to ADC channel 
		// into variable "sharp"
		value_right = Sharp_GP2D12_estimation(sharp_right);				//Stores Distance calsulated in a variable "value".
		lcd_print(2,13,value_right,3);
			
		
		white_1 = ADC_Conversion(1);
		lcd_print(1,1,white_1,4);

		white_2 = ADC_Conversion(2);
		lcd_print(1,7,white_2,4);

		white_3 = ADC_Conversion(3);
		lcd_print(1,13,white_3,4);
			
		if (white_1<30 || white_3<30)
				{
					//sharp = ADC_Conversion(10);	
					//value = Sharp_GP2D12_estimation(sharp);
					//lcd_print(2,1,value,3); 
					
					sharp_left = ADC_Conversion(10);						//Stores the Analog value of front sharp connected to ADC channel 
					// into variable "sharp"
					value_left = Sharp_GP2D12_estimation(sharp_left);				//Stores Distance calsulated in a variable "value".
					lcd_print(2,1,value_left,3); 
		
					sharp_center = ADC_Conversion(11);						//Stores the Analog value of front sharp connected to ADC channel 
					// into variable "sharp"
					value_center = Sharp_GP2D12_estimation(sharp_center);				//Stores Distance calsulated in a variable "value".
					lcd_print(2,7,value_center,3);
		
					sharp_right = ADC_Conversion(12);						//Stores the Analog value of front sharp connected to ADC channel 
					// into variable "sharp"
					value_right = Sharp_GP2D12_estimation(sharp_right);				//Stores Distance calsulated in a variable "value".
					lcd_print(2,13,value_right,3);
				
		
					white_1 = ADC_Conversion(1);
					lcd_print(1,1,white_1,4);

					white_2 = ADC_Conversion(2);
					lcd_print(1,7,white_2,4);

					white_3 = ADC_Conversion(3);
					lcd_print(1,13,white_3,4);

					
					FORWARD();
					if(flag%2 == 0)
						{
						RIGHT_TURN();
						ANGLE_ROTATE(90);
						
						FORWARD();
						LINEAR_DISTANCE(160);
						
						FORWARD();
						RIGHT_TURN();
						ANGLE_ROTATE(90);
						}
					else
						{
						LEFT_TURN();
						ANGLE_ROTATE(90);
						
						FORWARD();
						LINEAR_DISTANCE(160);
						
						FORWARD();
						LEFT_TURN();
						ANGLE_ROTATE(90);
						}
				
			flag++;
			}

		/* While object is not detected in the left or right sensors */
	/*	while (value_left < 300 || value_center < 300 || value_right < 300)
			{
			STOP();
			
			//// Logic to Process Image and Pick n place
			
			//sharp = ADC_Conversion(10);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
			//value = Sharp_GP2D12_estimation(sharp);			//Stores Distance calsulated in a variable "value".

			sharp_left = ADC_Conversion(10);						//Stores the Analog value of front sharp connected to ADC channel 
			// into variable "sharp"
			value_left = Sharp_GP2D12_estimation(sharp_left);				//Stores Distance calsulated in a variable "value".
			lcd_print(2,1,value_left,3); 
		
			sharp_center = ADC_Conversion(11);						//Stores the Analog value of front sharp connected to ADC channel 
			// into variable "sharp"
			value_center = Sharp_GP2D12_estimation(sharp_center);				//Stores Distance calsulated in a variable "value".
			lcd_print(2,7,value_center,3);
		
			sharp_right = ADC_Conversion(12);						//Stores the Analog value of front sharp connected to ADC channel 
			// into variable "sharp"
			value_right = Sharp_GP2D12_estimation(sharp_right);				//Stores Distance calsulated in a variable "value".
			lcd_print(2,13,value_right,3);
			

			white_1 = ADC_Conversion(1);
			lcd_print(1,1,white_1,4);

			white_2 = ADC_Conversion(2);
			lcd_print(1,7,white_2,4);

			white_3 = ADC_Conversion(3);
			lcd_print(1,13,white_3,4);

			FORWARD();
			if (white_1<30 || white_3<30)
				{
					
					if(flag%2 == 0)
						{
						RIGHT_TURN();
						ANGLE_ROTATE(90);
						
						FORWARD();
						LINEAR_DISTANCE(160);
						
						FORWARD();
						RIGHT_TURN();
						ANGLE_ROTATE(90);
						}
					else
						{
						LEFT_TURN();
						ANGLE_ROTATE(90);
						
						FORWARD();
						LINEAR_DISTANCE(160);
						
						FORWARD();
						LEFT_TURN();
						ANGLE_ROTATE(90);
						}
				}
			
			
			}
			FORWARD();
		}
}
	


*/
