/**
 * Copyright (c) 2010, this is a property of ERTS Lab, IIT Bombay.
 * This project is developed as part of the Embedded Systems (Software) course CS 684, IIT Bombay
 *
 * PROJECT TITLE: To sort object based on color and size usinf Firebird V robot
 *
 * @section PROJECT SUMMARY
 * The robot covers the entire arena according to a predetermined algorithm.
 * It detects objects and captures its image after proper alignment.
 * In ignores objects that are not of the desired color.
 * For the desired color objects it sorts the objects according to size and places them in seperate bins.
 * This piece of code, is converted to a hex file of ATMEGA2560 standard
 * and burnt onto the FIREBIRD V Robot.
 *
 * @file servo.c
 * This file contains definition of all the functions required for
 * the movement of the servo motors present in the robotic arm.
 * This file is included in the main file.
 * 
 * @author Group4. Arpita Agrawal, Ruttika Maheshwari, Sukanya Basu
 *
 * @date LAST MODIFIED: Nov 8, 2010
 * @version 1.0
 *
 * @section LICENSE
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details at
 * http://www.gnu.org/copyleft/gpl.html
 *
 *
 * @section COMPILATION
 * Compile using the AVR studio for ATMEGA2560 and F_CPU=11059200
 * Write the .hex file to the FIREBIRD V robot
 *
 */


#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>


/**** To configure PORTB 5 pin for servo motor 1 operation ****/
void servo1_pin_config (void)
{
 DDRB  = DDRB | 0x20;   //making PORTB 5 pin output
 PORTB = PORTB | 0x20;  //setting PORTB 5 pin to logic 1
}


/**** To configure PORTB 6 pin for servo motor 2 operation ****/
void servo2_pin_config (void)
{
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
}


/**** To configure PORTB 7 pin for servo motor 3 operation ****/
void servo3_pin_config (void)
{
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
}


/*** To initialize the ports ***/
void port_init_servo(void)
{
 servo1_pin_config();   //Configure PORTB 5 pin for servo motor 1 operation
 servo2_pin_config();   //Configure PORTB 6 pin for servo motor 2 operation 
 servo3_pin_config();   //Configure PORTB 7 pin for servo motor 3 operation  
}


/**
 * TIMER1 initialization in 10 bit fast PWM mode  
 * prescale:256
 * WGM: 7) PWM 10bit fast, TOP=0x03FF
 * actual value: 42.187Hz 
 *
 */
void timer1_init(void)
{
 TCCR1B = 0x00;         //stop
 TCNT1H = 0xFC;         //Counter high value to which OCR1xH value is to be compared with
 TCNT1L = 0x01; 	//Counter low value to which OCR1xH value is to be compared with
 OCR1AH = 0x03;         //Output compare Register high value for servo 1
 OCR1AL = 0xFF;         //Output Compare Register low Value For servo 1
 OCR1BH = 0x03;         //Output compare Register high value for servo 2
 OCR1BL = 0xFF;         //Output Compare Register low Value For servo 2
 OCR1CH = 0x03;         //Output compare Register high value for servo 3
 OCR1CL = 0xFF;         //Output Compare Register low Value For servo 3
 ICR1H  = 0x03;	
 ICR1L  = 0xFF;
 TCCR1A = 0xAB;         /**     {COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
 		         *      For Overriding normal port functionality to OCRnA outputs.
			 *	{WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode
                         */
 TCCR1C = 0x00;
 TCCR1B = 0x0C;         //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
}



/*** Function to initialize all the peripherals ***/
void init_devices_servo(void)
{
 cli();         //disable all interrupts
 port_init_servo();
 timer1_init();
 sei();         //re-enable interrupts 
}



/*** Function to rotate Servo 1 by a specified angle in the multiples of 2.25 degrees ***/
void servo_1(unsigned char degrees)  
{
 float PositionPanServo = 0;
 PositionPanServo = ((float)degrees / 2.25) + 21.0;
 OCR1AH = 0x00;
 OCR1AL = (unsigned char) PositionPanServo;
}



/*** Function to rotate Servo 2 by a specified angle in the multiples of 2.25 degrees ***/
void servo_2(unsigned char degrees)
{
 float PositionTiltServo = 0;
 PositionTiltServo = ((float)degrees / 2.25) + 21.0;
 OCR1BH = 0x00;
 OCR1BL = (unsigned char) PositionTiltServo;
}


/*** Function to rotate Servo 3 by a specified angle in the multiples of 2.25 degrees ***/
void servo_3(unsigned char degrees)
{
 float PositionServo = 0;
 PositionServo = ((float)degrees / 2.25) + 21.0;
 OCR1CH = 0x00;
 OCR1CL = (unsigned char) PositionServo;
}


/** 
 * servo_x_free functions unlocks the servo motors from the any angle 
 * and make them free by giving 100% duty cycle at the PWM. This function can be used to 
 * reduce the power consumption of the motor if it is holding load against the gravity.
 */

void servo_1_free (void)        //makes servo 1 free rotating
{
 OCR1AH = 0x03; 
 OCR1AL = 0xFF;                 //Servo 1 off
}

void servo_2_free (void)        //makes servo 2 free rotating
{
 OCR1BH = 0x03;
 OCR1BL = 0xFF;                 //Servo 2 off
}

void servo_3_free (void)        //makes servo 3 free rotating
{
 OCR1CH = 0x03;
 OCR1CL = 0xFF;                 //Servo 3 off
} 
