
Gourp_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010a  00800200  00005d90  00005e24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005d90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000047  0080030a  0080030a  00005f2e  2**0
                  ALLOC
  3 .debug_aranges 000001e0  00000000  00000000  00005f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000073e  00000000  00000000  0000610e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003a56  00000000  00000000  0000684c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000016f7  00000000  00000000  0000a2a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000033c7  00000000  00000000  0000b999  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000500  00000000  00000000  0000ed60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007e4  00000000  00000000  0000f260  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a1a  00000000  00000000  0000fa44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0001045e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 3b 0c 	jmp	0x1876	; 0x1876 <__vector_5>
      18:	0c 94 58 0c 	jmp	0x18b0	; 0x18b0 <__vector_6>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 18 0f 	jmp	0x1e30	; 0x1e30 <__vector_25>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <lcd_set_4bit+0x7b4>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	13 e0       	ldi	r17, 0x03	; 3
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	e0 e9       	ldi	r30, 0x90	; 144
     17e:	fd e5       	ldi	r31, 0x5D	; 93
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	aa 30       	cpi	r26, 0x0A	; 10
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	13 e0       	ldi	r17, 0x03	; 3
     192:	aa e0       	ldi	r26, 0x0A	; 10
     194:	b3 e0       	ldi	r27, 0x03	; 3
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a1 35       	cpi	r26, 0x51	; 81
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <main>
     1a4:	0c 94 c6 2e 	jmp	0x5d8c	; 0x5d8c <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <lcd_set_4bit>:
int i;


/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
     1ac:	0f 93       	push	r16
     1ae:	1f 93       	push	r17
     1b0:	df 93       	push	r29
     1b2:	cf 93       	push	r28
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	c0 57       	subi	r28, 0x70	; 112
     1ba:	d0 40       	sbci	r29, 0x00	; 0
     1bc:	0f b6       	in	r0, 0x3f	; 63
     1be:	f8 94       	cli
     1c0:	de bf       	out	0x3e, r29	; 62
     1c2:	0f be       	out	0x3f, r0	; 63
     1c4:	cd bf       	out	0x3d, r28	; 61
     1c6:	fe 01       	movw	r30, r28
     1c8:	e3 59       	subi	r30, 0x93	; 147
     1ca:	ff 4f       	sbci	r31, 0xFF	; 255
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	a0 e8       	ldi	r26, 0x80	; 128
     1d2:	bf e3       	ldi	r27, 0x3F	; 63
     1d4:	80 83       	st	Z, r24
     1d6:	91 83       	std	Z+1, r25	; 0x01
     1d8:	a2 83       	std	Z+2, r26	; 0x02
     1da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     1dc:	8e 01       	movw	r16, r28
     1de:	07 59       	subi	r16, 0x97	; 151
     1e0:	1f 4f       	sbci	r17, 0xFF	; 255
     1e2:	fe 01       	movw	r30, r28
     1e4:	e3 59       	subi	r30, 0x93	; 147
     1e6:	ff 4f       	sbci	r31, 0xFF	; 255
     1e8:	60 81       	ld	r22, Z
     1ea:	71 81       	ldd	r23, Z+1	; 0x01
     1ec:	82 81       	ldd	r24, Z+2	; 0x02
     1ee:	93 81       	ldd	r25, Z+3	; 0x03
     1f0:	2d ec       	ldi	r18, 0xCD	; 205
     1f2:	3c ec       	ldi	r19, 0xCC	; 204
     1f4:	4c e2       	ldi	r20, 0x2C	; 44
     1f6:	55 e4       	ldi	r21, 0x45	; 69
     1f8:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
     1fc:	dc 01       	movw	r26, r24
     1fe:	cb 01       	movw	r24, r22
     200:	f8 01       	movw	r30, r16
     202:	80 83       	st	Z, r24
     204:	91 83       	std	Z+1, r25	; 0x01
     206:	a2 83       	std	Z+2, r26	; 0x02
     208:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     20a:	fe 01       	movw	r30, r28
     20c:	e7 59       	subi	r30, 0x97	; 151
     20e:	ff 4f       	sbci	r31, 0xFF	; 255
     210:	60 81       	ld	r22, Z
     212:	71 81       	ldd	r23, Z+1	; 0x01
     214:	82 81       	ldd	r24, Z+2	; 0x02
     216:	93 81       	ldd	r25, Z+3	; 0x03
     218:	20 e0       	ldi	r18, 0x00	; 0
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	40 e8       	ldi	r20, 0x80	; 128
     21e:	5f e3       	ldi	r21, 0x3F	; 63
     220:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
     224:	88 23       	and	r24, r24
     226:	44 f4       	brge	.+16     	; 0x238 <lcd_set_4bit+0x8c>
		__ticks = 1;
     228:	fe 01       	movw	r30, r28
     22a:	e9 59       	subi	r30, 0x99	; 153
     22c:	ff 4f       	sbci	r31, 0xFF	; 255
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	91 83       	std	Z+1, r25	; 0x01
     234:	80 83       	st	Z, r24
     236:	64 c0       	rjmp	.+200    	; 0x300 <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     238:	fe 01       	movw	r30, r28
     23a:	e7 59       	subi	r30, 0x97	; 151
     23c:	ff 4f       	sbci	r31, 0xFF	; 255
     23e:	60 81       	ld	r22, Z
     240:	71 81       	ldd	r23, Z+1	; 0x01
     242:	82 81       	ldd	r24, Z+2	; 0x02
     244:	93 81       	ldd	r25, Z+3	; 0x03
     246:	20 e0       	ldi	r18, 0x00	; 0
     248:	3f ef       	ldi	r19, 0xFF	; 255
     24a:	4f e7       	ldi	r20, 0x7F	; 127
     24c:	57 e4       	ldi	r21, 0x47	; 71
     24e:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
     252:	18 16       	cp	r1, r24
     254:	0c f0       	brlt	.+2      	; 0x258 <lcd_set_4bit+0xac>
     256:	43 c0       	rjmp	.+134    	; 0x2de <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     258:	fe 01       	movw	r30, r28
     25a:	e3 59       	subi	r30, 0x93	; 147
     25c:	ff 4f       	sbci	r31, 0xFF	; 255
     25e:	60 81       	ld	r22, Z
     260:	71 81       	ldd	r23, Z+1	; 0x01
     262:	82 81       	ldd	r24, Z+2	; 0x02
     264:	93 81       	ldd	r25, Z+3	; 0x03
     266:	20 e0       	ldi	r18, 0x00	; 0
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	40 e2       	ldi	r20, 0x20	; 32
     26c:	51 e4       	ldi	r21, 0x41	; 65
     26e:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
     272:	dc 01       	movw	r26, r24
     274:	cb 01       	movw	r24, r22
     276:	8e 01       	movw	r16, r28
     278:	09 59       	subi	r16, 0x99	; 153
     27a:	1f 4f       	sbci	r17, 0xFF	; 255
     27c:	bc 01       	movw	r22, r24
     27e:	cd 01       	movw	r24, r26
     280:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
     284:	dc 01       	movw	r26, r24
     286:	cb 01       	movw	r24, r22
     288:	f8 01       	movw	r30, r16
     28a:	91 83       	std	Z+1, r25	; 0x01
     28c:	80 83       	st	Z, r24
     28e:	1f c0       	rjmp	.+62     	; 0x2ce <lcd_set_4bit+0x122>
     290:	fe 01       	movw	r30, r28
     292:	eb 59       	subi	r30, 0x9B	; 155
     294:	ff 4f       	sbci	r31, 0xFF	; 255
     296:	84 e1       	ldi	r24, 0x14	; 20
     298:	91 e0       	ldi	r25, 0x01	; 1
     29a:	91 83       	std	Z+1, r25	; 0x01
     29c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     29e:	fe 01       	movw	r30, r28
     2a0:	eb 59       	subi	r30, 0x9B	; 155
     2a2:	ff 4f       	sbci	r31, 0xFF	; 255
     2a4:	80 81       	ld	r24, Z
     2a6:	91 81       	ldd	r25, Z+1	; 0x01
     2a8:	01 97       	sbiw	r24, 0x01	; 1
     2aa:	f1 f7       	brne	.-4      	; 0x2a8 <lcd_set_4bit+0xfc>
     2ac:	fe 01       	movw	r30, r28
     2ae:	eb 59       	subi	r30, 0x9B	; 155
     2b0:	ff 4f       	sbci	r31, 0xFF	; 255
     2b2:	91 83       	std	Z+1, r25	; 0x01
     2b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2b6:	de 01       	movw	r26, r28
     2b8:	a9 59       	subi	r26, 0x99	; 153
     2ba:	bf 4f       	sbci	r27, 0xFF	; 255
     2bc:	fe 01       	movw	r30, r28
     2be:	e9 59       	subi	r30, 0x99	; 153
     2c0:	ff 4f       	sbci	r31, 0xFF	; 255
     2c2:	80 81       	ld	r24, Z
     2c4:	91 81       	ldd	r25, Z+1	; 0x01
     2c6:	01 97       	sbiw	r24, 0x01	; 1
     2c8:	11 96       	adiw	r26, 0x01	; 1
     2ca:	9c 93       	st	X, r25
     2cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2ce:	fe 01       	movw	r30, r28
     2d0:	e9 59       	subi	r30, 0x99	; 153
     2d2:	ff 4f       	sbci	r31, 0xFF	; 255
     2d4:	80 81       	ld	r24, Z
     2d6:	91 81       	ldd	r25, Z+1	; 0x01
     2d8:	00 97       	sbiw	r24, 0x00	; 0
     2da:	d1 f6       	brne	.-76     	; 0x290 <lcd_set_4bit+0xe4>
     2dc:	27 c0       	rjmp	.+78     	; 0x32c <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2de:	8e 01       	movw	r16, r28
     2e0:	09 59       	subi	r16, 0x99	; 153
     2e2:	1f 4f       	sbci	r17, 0xFF	; 255
     2e4:	fe 01       	movw	r30, r28
     2e6:	e7 59       	subi	r30, 0x97	; 151
     2e8:	ff 4f       	sbci	r31, 0xFF	; 255
     2ea:	60 81       	ld	r22, Z
     2ec:	71 81       	ldd	r23, Z+1	; 0x01
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
     2f6:	dc 01       	movw	r26, r24
     2f8:	cb 01       	movw	r24, r22
     2fa:	f8 01       	movw	r30, r16
     2fc:	91 83       	std	Z+1, r25	; 0x01
     2fe:	80 83       	st	Z, r24
     300:	de 01       	movw	r26, r28
     302:	ad 59       	subi	r26, 0x9D	; 157
     304:	bf 4f       	sbci	r27, 0xFF	; 255
     306:	fe 01       	movw	r30, r28
     308:	e9 59       	subi	r30, 0x99	; 153
     30a:	ff 4f       	sbci	r31, 0xFF	; 255
     30c:	80 81       	ld	r24, Z
     30e:	91 81       	ldd	r25, Z+1	; 0x01
     310:	8d 93       	st	X+, r24
     312:	9c 93       	st	X, r25
     314:	fe 01       	movw	r30, r28
     316:	ed 59       	subi	r30, 0x9D	; 157
     318:	ff 4f       	sbci	r31, 0xFF	; 255
     31a:	80 81       	ld	r24, Z
     31c:	91 81       	ldd	r25, Z+1	; 0x01
     31e:	01 97       	sbiw	r24, 0x01	; 1
     320:	f1 f7       	brne	.-4      	; 0x31e <lcd_set_4bit+0x172>
     322:	fe 01       	movw	r30, r28
     324:	ed 59       	subi	r30, 0x9D	; 157
     326:	ff 4f       	sbci	r31, 0xFF	; 255
     328:	91 83       	std	Z+1, r25	; 0x01
     32a:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     32c:	a8 e2       	ldi	r26, 0x28	; 40
     32e:	b0 e0       	ldi	r27, 0x00	; 0
     330:	e8 e2       	ldi	r30, 0x28	; 40
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	80 81       	ld	r24, Z
     336:	8e 7f       	andi	r24, 0xFE	; 254
     338:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     33a:	a8 e2       	ldi	r26, 0x28	; 40
     33c:	b0 e0       	ldi	r27, 0x00	; 0
     33e:	e8 e2       	ldi	r30, 0x28	; 40
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	80 81       	ld	r24, Z
     344:	8d 7f       	andi	r24, 0xFD	; 253
     346:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     348:	e8 e2       	ldi	r30, 0x28	; 40
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	80 e3       	ldi	r24, 0x30	; 48
     34e:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     350:	a8 e2       	ldi	r26, 0x28	; 40
     352:	b0 e0       	ldi	r27, 0x00	; 0
     354:	e8 e2       	ldi	r30, 0x28	; 40
     356:	f0 e0       	ldi	r31, 0x00	; 0
     358:	80 81       	ld	r24, Z
     35a:	84 60       	ori	r24, 0x04	; 4
     35c:	8c 93       	st	X, r24
     35e:	fe 01       	movw	r30, r28
     360:	e1 5a       	subi	r30, 0xA1	; 161
     362:	ff 4f       	sbci	r31, 0xFF	; 255
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	a0 ea       	ldi	r26, 0xA0	; 160
     36a:	b0 e4       	ldi	r27, 0x40	; 64
     36c:	80 83       	st	Z, r24
     36e:	91 83       	std	Z+1, r25	; 0x01
     370:	a2 83       	std	Z+2, r26	; 0x02
     372:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     374:	8e 01       	movw	r16, r28
     376:	05 5a       	subi	r16, 0xA5	; 165
     378:	1f 4f       	sbci	r17, 0xFF	; 255
     37a:	fe 01       	movw	r30, r28
     37c:	e1 5a       	subi	r30, 0xA1	; 161
     37e:	ff 4f       	sbci	r31, 0xFF	; 255
     380:	60 81       	ld	r22, Z
     382:	71 81       	ldd	r23, Z+1	; 0x01
     384:	82 81       	ldd	r24, Z+2	; 0x02
     386:	93 81       	ldd	r25, Z+3	; 0x03
     388:	2d ec       	ldi	r18, 0xCD	; 205
     38a:	3c ec       	ldi	r19, 0xCC	; 204
     38c:	4c e2       	ldi	r20, 0x2C	; 44
     38e:	55 e4       	ldi	r21, 0x45	; 69
     390:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
     394:	dc 01       	movw	r26, r24
     396:	cb 01       	movw	r24, r22
     398:	f8 01       	movw	r30, r16
     39a:	80 83       	st	Z, r24
     39c:	91 83       	std	Z+1, r25	; 0x01
     39e:	a2 83       	std	Z+2, r26	; 0x02
     3a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     3a2:	fe 01       	movw	r30, r28
     3a4:	e5 5a       	subi	r30, 0xA5	; 165
     3a6:	ff 4f       	sbci	r31, 0xFF	; 255
     3a8:	60 81       	ld	r22, Z
     3aa:	71 81       	ldd	r23, Z+1	; 0x01
     3ac:	82 81       	ldd	r24, Z+2	; 0x02
     3ae:	93 81       	ldd	r25, Z+3	; 0x03
     3b0:	20 e0       	ldi	r18, 0x00	; 0
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	40 e8       	ldi	r20, 0x80	; 128
     3b6:	5f e3       	ldi	r21, 0x3F	; 63
     3b8:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
     3bc:	88 23       	and	r24, r24
     3be:	44 f4       	brge	.+16     	; 0x3d0 <lcd_set_4bit+0x224>
		__ticks = 1;
     3c0:	fe 01       	movw	r30, r28
     3c2:	e7 5a       	subi	r30, 0xA7	; 167
     3c4:	ff 4f       	sbci	r31, 0xFF	; 255
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	91 83       	std	Z+1, r25	; 0x01
     3cc:	80 83       	st	Z, r24
     3ce:	64 c0       	rjmp	.+200    	; 0x498 <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     3d0:	fe 01       	movw	r30, r28
     3d2:	e5 5a       	subi	r30, 0xA5	; 165
     3d4:	ff 4f       	sbci	r31, 0xFF	; 255
     3d6:	60 81       	ld	r22, Z
     3d8:	71 81       	ldd	r23, Z+1	; 0x01
     3da:	82 81       	ldd	r24, Z+2	; 0x02
     3dc:	93 81       	ldd	r25, Z+3	; 0x03
     3de:	20 e0       	ldi	r18, 0x00	; 0
     3e0:	3f ef       	ldi	r19, 0xFF	; 255
     3e2:	4f e7       	ldi	r20, 0x7F	; 127
     3e4:	57 e4       	ldi	r21, 0x47	; 71
     3e6:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
     3ea:	18 16       	cp	r1, r24
     3ec:	0c f0       	brlt	.+2      	; 0x3f0 <lcd_set_4bit+0x244>
     3ee:	43 c0       	rjmp	.+134    	; 0x476 <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3f0:	fe 01       	movw	r30, r28
     3f2:	e1 5a       	subi	r30, 0xA1	; 161
     3f4:	ff 4f       	sbci	r31, 0xFF	; 255
     3f6:	60 81       	ld	r22, Z
     3f8:	71 81       	ldd	r23, Z+1	; 0x01
     3fa:	82 81       	ldd	r24, Z+2	; 0x02
     3fc:	93 81       	ldd	r25, Z+3	; 0x03
     3fe:	20 e0       	ldi	r18, 0x00	; 0
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	40 e2       	ldi	r20, 0x20	; 32
     404:	51 e4       	ldi	r21, 0x41	; 65
     406:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
     40a:	dc 01       	movw	r26, r24
     40c:	cb 01       	movw	r24, r22
     40e:	8e 01       	movw	r16, r28
     410:	07 5a       	subi	r16, 0xA7	; 167
     412:	1f 4f       	sbci	r17, 0xFF	; 255
     414:	bc 01       	movw	r22, r24
     416:	cd 01       	movw	r24, r26
     418:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
     41c:	dc 01       	movw	r26, r24
     41e:	cb 01       	movw	r24, r22
     420:	f8 01       	movw	r30, r16
     422:	91 83       	std	Z+1, r25	; 0x01
     424:	80 83       	st	Z, r24
     426:	1f c0       	rjmp	.+62     	; 0x466 <lcd_set_4bit+0x2ba>
     428:	fe 01       	movw	r30, r28
     42a:	e9 5a       	subi	r30, 0xA9	; 169
     42c:	ff 4f       	sbci	r31, 0xFF	; 255
     42e:	84 e1       	ldi	r24, 0x14	; 20
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	91 83       	std	Z+1, r25	; 0x01
     434:	80 83       	st	Z, r24
     436:	fe 01       	movw	r30, r28
     438:	e9 5a       	subi	r30, 0xA9	; 169
     43a:	ff 4f       	sbci	r31, 0xFF	; 255
     43c:	80 81       	ld	r24, Z
     43e:	91 81       	ldd	r25, Z+1	; 0x01
     440:	01 97       	sbiw	r24, 0x01	; 1
     442:	f1 f7       	brne	.-4      	; 0x440 <lcd_set_4bit+0x294>
     444:	fe 01       	movw	r30, r28
     446:	e9 5a       	subi	r30, 0xA9	; 169
     448:	ff 4f       	sbci	r31, 0xFF	; 255
     44a:	91 83       	std	Z+1, r25	; 0x01
     44c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     44e:	de 01       	movw	r26, r28
     450:	a7 5a       	subi	r26, 0xA7	; 167
     452:	bf 4f       	sbci	r27, 0xFF	; 255
     454:	fe 01       	movw	r30, r28
     456:	e7 5a       	subi	r30, 0xA7	; 167
     458:	ff 4f       	sbci	r31, 0xFF	; 255
     45a:	80 81       	ld	r24, Z
     45c:	91 81       	ldd	r25, Z+1	; 0x01
     45e:	01 97       	sbiw	r24, 0x01	; 1
     460:	11 96       	adiw	r26, 0x01	; 1
     462:	9c 93       	st	X, r25
     464:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     466:	fe 01       	movw	r30, r28
     468:	e7 5a       	subi	r30, 0xA7	; 167
     46a:	ff 4f       	sbci	r31, 0xFF	; 255
     46c:	80 81       	ld	r24, Z
     46e:	91 81       	ldd	r25, Z+1	; 0x01
     470:	00 97       	sbiw	r24, 0x00	; 0
     472:	d1 f6       	brne	.-76     	; 0x428 <lcd_set_4bit+0x27c>
     474:	27 c0       	rjmp	.+78     	; 0x4c4 <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     476:	8e 01       	movw	r16, r28
     478:	07 5a       	subi	r16, 0xA7	; 167
     47a:	1f 4f       	sbci	r17, 0xFF	; 255
     47c:	fe 01       	movw	r30, r28
     47e:	e5 5a       	subi	r30, 0xA5	; 165
     480:	ff 4f       	sbci	r31, 0xFF	; 255
     482:	60 81       	ld	r22, Z
     484:	71 81       	ldd	r23, Z+1	; 0x01
     486:	82 81       	ldd	r24, Z+2	; 0x02
     488:	93 81       	ldd	r25, Z+3	; 0x03
     48a:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
     48e:	dc 01       	movw	r26, r24
     490:	cb 01       	movw	r24, r22
     492:	f8 01       	movw	r30, r16
     494:	91 83       	std	Z+1, r25	; 0x01
     496:	80 83       	st	Z, r24
     498:	de 01       	movw	r26, r28
     49a:	ab 5a       	subi	r26, 0xAB	; 171
     49c:	bf 4f       	sbci	r27, 0xFF	; 255
     49e:	fe 01       	movw	r30, r28
     4a0:	e7 5a       	subi	r30, 0xA7	; 167
     4a2:	ff 4f       	sbci	r31, 0xFF	; 255
     4a4:	80 81       	ld	r24, Z
     4a6:	91 81       	ldd	r25, Z+1	; 0x01
     4a8:	8d 93       	st	X+, r24
     4aa:	9c 93       	st	X, r25
     4ac:	fe 01       	movw	r30, r28
     4ae:	eb 5a       	subi	r30, 0xAB	; 171
     4b0:	ff 4f       	sbci	r31, 0xFF	; 255
     4b2:	80 81       	ld	r24, Z
     4b4:	91 81       	ldd	r25, Z+1	; 0x01
     4b6:	01 97       	sbiw	r24, 0x01	; 1
     4b8:	f1 f7       	brne	.-4      	; 0x4b6 <lcd_set_4bit+0x30a>
     4ba:	fe 01       	movw	r30, r28
     4bc:	eb 5a       	subi	r30, 0xAB	; 171
     4be:	ff 4f       	sbci	r31, 0xFF	; 255
     4c0:	91 83       	std	Z+1, r25	; 0x01
     4c2:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     4c4:	a8 e2       	ldi	r26, 0x28	; 40
     4c6:	b0 e0       	ldi	r27, 0x00	; 0
     4c8:	e8 e2       	ldi	r30, 0x28	; 40
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	80 81       	ld	r24, Z
     4ce:	8b 7f       	andi	r24, 0xFB	; 251
     4d0:	8c 93       	st	X, r24
     4d2:	fe 01       	movw	r30, r28
     4d4:	ef 5a       	subi	r30, 0xAF	; 175
     4d6:	ff 4f       	sbci	r31, 0xFF	; 255
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	a0 e8       	ldi	r26, 0x80	; 128
     4de:	bf e3       	ldi	r27, 0x3F	; 63
     4e0:	80 83       	st	Z, r24
     4e2:	91 83       	std	Z+1, r25	; 0x01
     4e4:	a2 83       	std	Z+2, r26	; 0x02
     4e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     4e8:	8e 01       	movw	r16, r28
     4ea:	03 5b       	subi	r16, 0xB3	; 179
     4ec:	1f 4f       	sbci	r17, 0xFF	; 255
     4ee:	fe 01       	movw	r30, r28
     4f0:	ef 5a       	subi	r30, 0xAF	; 175
     4f2:	ff 4f       	sbci	r31, 0xFF	; 255
     4f4:	60 81       	ld	r22, Z
     4f6:	71 81       	ldd	r23, Z+1	; 0x01
     4f8:	82 81       	ldd	r24, Z+2	; 0x02
     4fa:	93 81       	ldd	r25, Z+3	; 0x03
     4fc:	2d ec       	ldi	r18, 0xCD	; 205
     4fe:	3c ec       	ldi	r19, 0xCC	; 204
     500:	4c e2       	ldi	r20, 0x2C	; 44
     502:	55 e4       	ldi	r21, 0x45	; 69
     504:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
     508:	dc 01       	movw	r26, r24
     50a:	cb 01       	movw	r24, r22
     50c:	f8 01       	movw	r30, r16
     50e:	80 83       	st	Z, r24
     510:	91 83       	std	Z+1, r25	; 0x01
     512:	a2 83       	std	Z+2, r26	; 0x02
     514:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     516:	fe 01       	movw	r30, r28
     518:	e3 5b       	subi	r30, 0xB3	; 179
     51a:	ff 4f       	sbci	r31, 0xFF	; 255
     51c:	60 81       	ld	r22, Z
     51e:	71 81       	ldd	r23, Z+1	; 0x01
     520:	82 81       	ldd	r24, Z+2	; 0x02
     522:	93 81       	ldd	r25, Z+3	; 0x03
     524:	20 e0       	ldi	r18, 0x00	; 0
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	40 e8       	ldi	r20, 0x80	; 128
     52a:	5f e3       	ldi	r21, 0x3F	; 63
     52c:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
     530:	88 23       	and	r24, r24
     532:	44 f4       	brge	.+16     	; 0x544 <lcd_set_4bit+0x398>
		__ticks = 1;
     534:	fe 01       	movw	r30, r28
     536:	e5 5b       	subi	r30, 0xB5	; 181
     538:	ff 4f       	sbci	r31, 0xFF	; 255
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	91 83       	std	Z+1, r25	; 0x01
     540:	80 83       	st	Z, r24
     542:	64 c0       	rjmp	.+200    	; 0x60c <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     544:	fe 01       	movw	r30, r28
     546:	e3 5b       	subi	r30, 0xB3	; 179
     548:	ff 4f       	sbci	r31, 0xFF	; 255
     54a:	60 81       	ld	r22, Z
     54c:	71 81       	ldd	r23, Z+1	; 0x01
     54e:	82 81       	ldd	r24, Z+2	; 0x02
     550:	93 81       	ldd	r25, Z+3	; 0x03
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	3f ef       	ldi	r19, 0xFF	; 255
     556:	4f e7       	ldi	r20, 0x7F	; 127
     558:	57 e4       	ldi	r21, 0x47	; 71
     55a:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
     55e:	18 16       	cp	r1, r24
     560:	0c f0       	brlt	.+2      	; 0x564 <lcd_set_4bit+0x3b8>
     562:	43 c0       	rjmp	.+134    	; 0x5ea <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     564:	fe 01       	movw	r30, r28
     566:	ef 5a       	subi	r30, 0xAF	; 175
     568:	ff 4f       	sbci	r31, 0xFF	; 255
     56a:	60 81       	ld	r22, Z
     56c:	71 81       	ldd	r23, Z+1	; 0x01
     56e:	82 81       	ldd	r24, Z+2	; 0x02
     570:	93 81       	ldd	r25, Z+3	; 0x03
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	40 e2       	ldi	r20, 0x20	; 32
     578:	51 e4       	ldi	r21, 0x41	; 65
     57a:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
     57e:	dc 01       	movw	r26, r24
     580:	cb 01       	movw	r24, r22
     582:	8e 01       	movw	r16, r28
     584:	05 5b       	subi	r16, 0xB5	; 181
     586:	1f 4f       	sbci	r17, 0xFF	; 255
     588:	bc 01       	movw	r22, r24
     58a:	cd 01       	movw	r24, r26
     58c:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
     590:	dc 01       	movw	r26, r24
     592:	cb 01       	movw	r24, r22
     594:	f8 01       	movw	r30, r16
     596:	91 83       	std	Z+1, r25	; 0x01
     598:	80 83       	st	Z, r24
     59a:	1f c0       	rjmp	.+62     	; 0x5da <lcd_set_4bit+0x42e>
     59c:	fe 01       	movw	r30, r28
     59e:	e7 5b       	subi	r30, 0xB7	; 183
     5a0:	ff 4f       	sbci	r31, 0xFF	; 255
     5a2:	84 e1       	ldi	r24, 0x14	; 20
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	91 83       	std	Z+1, r25	; 0x01
     5a8:	80 83       	st	Z, r24
     5aa:	fe 01       	movw	r30, r28
     5ac:	e7 5b       	subi	r30, 0xB7	; 183
     5ae:	ff 4f       	sbci	r31, 0xFF	; 255
     5b0:	80 81       	ld	r24, Z
     5b2:	91 81       	ldd	r25, Z+1	; 0x01
     5b4:	01 97       	sbiw	r24, 0x01	; 1
     5b6:	f1 f7       	brne	.-4      	; 0x5b4 <lcd_set_4bit+0x408>
     5b8:	fe 01       	movw	r30, r28
     5ba:	e7 5b       	subi	r30, 0xB7	; 183
     5bc:	ff 4f       	sbci	r31, 0xFF	; 255
     5be:	91 83       	std	Z+1, r25	; 0x01
     5c0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5c2:	de 01       	movw	r26, r28
     5c4:	a5 5b       	subi	r26, 0xB5	; 181
     5c6:	bf 4f       	sbci	r27, 0xFF	; 255
     5c8:	fe 01       	movw	r30, r28
     5ca:	e5 5b       	subi	r30, 0xB5	; 181
     5cc:	ff 4f       	sbci	r31, 0xFF	; 255
     5ce:	80 81       	ld	r24, Z
     5d0:	91 81       	ldd	r25, Z+1	; 0x01
     5d2:	01 97       	sbiw	r24, 0x01	; 1
     5d4:	11 96       	adiw	r26, 0x01	; 1
     5d6:	9c 93       	st	X, r25
     5d8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5da:	fe 01       	movw	r30, r28
     5dc:	e5 5b       	subi	r30, 0xB5	; 181
     5de:	ff 4f       	sbci	r31, 0xFF	; 255
     5e0:	80 81       	ld	r24, Z
     5e2:	91 81       	ldd	r25, Z+1	; 0x01
     5e4:	00 97       	sbiw	r24, 0x00	; 0
     5e6:	d1 f6       	brne	.-76     	; 0x59c <lcd_set_4bit+0x3f0>
     5e8:	27 c0       	rjmp	.+78     	; 0x638 <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5ea:	8e 01       	movw	r16, r28
     5ec:	05 5b       	subi	r16, 0xB5	; 181
     5ee:	1f 4f       	sbci	r17, 0xFF	; 255
     5f0:	fe 01       	movw	r30, r28
     5f2:	e3 5b       	subi	r30, 0xB3	; 179
     5f4:	ff 4f       	sbci	r31, 0xFF	; 255
     5f6:	60 81       	ld	r22, Z
     5f8:	71 81       	ldd	r23, Z+1	; 0x01
     5fa:	82 81       	ldd	r24, Z+2	; 0x02
     5fc:	93 81       	ldd	r25, Z+3	; 0x03
     5fe:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
     602:	dc 01       	movw	r26, r24
     604:	cb 01       	movw	r24, r22
     606:	f8 01       	movw	r30, r16
     608:	91 83       	std	Z+1, r25	; 0x01
     60a:	80 83       	st	Z, r24
     60c:	de 01       	movw	r26, r28
     60e:	a9 5b       	subi	r26, 0xB9	; 185
     610:	bf 4f       	sbci	r27, 0xFF	; 255
     612:	fe 01       	movw	r30, r28
     614:	e5 5b       	subi	r30, 0xB5	; 181
     616:	ff 4f       	sbci	r31, 0xFF	; 255
     618:	80 81       	ld	r24, Z
     61a:	91 81       	ldd	r25, Z+1	; 0x01
     61c:	8d 93       	st	X+, r24
     61e:	9c 93       	st	X, r25
     620:	fe 01       	movw	r30, r28
     622:	e9 5b       	subi	r30, 0xB9	; 185
     624:	ff 4f       	sbci	r31, 0xFF	; 255
     626:	80 81       	ld	r24, Z
     628:	91 81       	ldd	r25, Z+1	; 0x01
     62a:	01 97       	sbiw	r24, 0x01	; 1
     62c:	f1 f7       	brne	.-4      	; 0x62a <lcd_set_4bit+0x47e>
     62e:	fe 01       	movw	r30, r28
     630:	e9 5b       	subi	r30, 0xB9	; 185
     632:	ff 4f       	sbci	r31, 0xFF	; 255
     634:	91 83       	std	Z+1, r25	; 0x01
     636:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     638:	a8 e2       	ldi	r26, 0x28	; 40
     63a:	b0 e0       	ldi	r27, 0x00	; 0
     63c:	e8 e2       	ldi	r30, 0x28	; 40
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	80 81       	ld	r24, Z
     642:	8e 7f       	andi	r24, 0xFE	; 254
     644:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     646:	a8 e2       	ldi	r26, 0x28	; 40
     648:	b0 e0       	ldi	r27, 0x00	; 0
     64a:	e8 e2       	ldi	r30, 0x28	; 40
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	80 81       	ld	r24, Z
     650:	8d 7f       	andi	r24, 0xFD	; 253
     652:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     654:	e8 e2       	ldi	r30, 0x28	; 40
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	80 e3       	ldi	r24, 0x30	; 48
     65a:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     65c:	a8 e2       	ldi	r26, 0x28	; 40
     65e:	b0 e0       	ldi	r27, 0x00	; 0
     660:	e8 e2       	ldi	r30, 0x28	; 40
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	80 81       	ld	r24, Z
     666:	84 60       	ori	r24, 0x04	; 4
     668:	8c 93       	st	X, r24
     66a:	fe 01       	movw	r30, r28
     66c:	ed 5b       	subi	r30, 0xBD	; 189
     66e:	ff 4f       	sbci	r31, 0xFF	; 255
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	a0 ea       	ldi	r26, 0xA0	; 160
     676:	b0 e4       	ldi	r27, 0x40	; 64
     678:	80 83       	st	Z, r24
     67a:	91 83       	std	Z+1, r25	; 0x01
     67c:	a2 83       	std	Z+2, r26	; 0x02
     67e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     680:	8e 01       	movw	r16, r28
     682:	01 5c       	subi	r16, 0xC1	; 193
     684:	1f 4f       	sbci	r17, 0xFF	; 255
     686:	fe 01       	movw	r30, r28
     688:	ed 5b       	subi	r30, 0xBD	; 189
     68a:	ff 4f       	sbci	r31, 0xFF	; 255
     68c:	60 81       	ld	r22, Z
     68e:	71 81       	ldd	r23, Z+1	; 0x01
     690:	82 81       	ldd	r24, Z+2	; 0x02
     692:	93 81       	ldd	r25, Z+3	; 0x03
     694:	2d ec       	ldi	r18, 0xCD	; 205
     696:	3c ec       	ldi	r19, 0xCC	; 204
     698:	4c e2       	ldi	r20, 0x2C	; 44
     69a:	55 e4       	ldi	r21, 0x45	; 69
     69c:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
     6a0:	dc 01       	movw	r26, r24
     6a2:	cb 01       	movw	r24, r22
     6a4:	f8 01       	movw	r30, r16
     6a6:	80 83       	st	Z, r24
     6a8:	91 83       	std	Z+1, r25	; 0x01
     6aa:	a2 83       	std	Z+2, r26	; 0x02
     6ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     6ae:	fe 01       	movw	r30, r28
     6b0:	ff 96       	adiw	r30, 0x3f	; 63
     6b2:	60 81       	ld	r22, Z
     6b4:	71 81       	ldd	r23, Z+1	; 0x01
     6b6:	82 81       	ldd	r24, Z+2	; 0x02
     6b8:	93 81       	ldd	r25, Z+3	; 0x03
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	40 e8       	ldi	r20, 0x80	; 128
     6c0:	5f e3       	ldi	r21, 0x3F	; 63
     6c2:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
     6c6:	88 23       	and	r24, r24
     6c8:	2c f4       	brge	.+10     	; 0x6d4 <lcd_set_4bit+0x528>
		__ticks = 1;
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	9e af       	std	Y+62, r25	; 0x3e
     6d0:	8d af       	std	Y+61, r24	; 0x3d
     6d2:	46 c0       	rjmp	.+140    	; 0x760 <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     6d4:	fe 01       	movw	r30, r28
     6d6:	ff 96       	adiw	r30, 0x3f	; 63
     6d8:	60 81       	ld	r22, Z
     6da:	71 81       	ldd	r23, Z+1	; 0x01
     6dc:	82 81       	ldd	r24, Z+2	; 0x02
     6de:	93 81       	ldd	r25, Z+3	; 0x03
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	3f ef       	ldi	r19, 0xFF	; 255
     6e4:	4f e7       	ldi	r20, 0x7F	; 127
     6e6:	57 e4       	ldi	r21, 0x47	; 71
     6e8:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
     6ec:	18 16       	cp	r1, r24
     6ee:	64 f5       	brge	.+88     	; 0x748 <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6f0:	fe 01       	movw	r30, r28
     6f2:	ed 5b       	subi	r30, 0xBD	; 189
     6f4:	ff 4f       	sbci	r31, 0xFF	; 255
     6f6:	60 81       	ld	r22, Z
     6f8:	71 81       	ldd	r23, Z+1	; 0x01
     6fa:	82 81       	ldd	r24, Z+2	; 0x02
     6fc:	93 81       	ldd	r25, Z+3	; 0x03
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	40 e2       	ldi	r20, 0x20	; 32
     704:	51 e4       	ldi	r21, 0x41	; 65
     706:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
     70a:	dc 01       	movw	r26, r24
     70c:	cb 01       	movw	r24, r22
     70e:	bc 01       	movw	r22, r24
     710:	cd 01       	movw	r24, r26
     712:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
     716:	dc 01       	movw	r26, r24
     718:	cb 01       	movw	r24, r22
     71a:	9e af       	std	Y+62, r25	; 0x3e
     71c:	8d af       	std	Y+61, r24	; 0x3d
     71e:	0f c0       	rjmp	.+30     	; 0x73e <lcd_set_4bit+0x592>
     720:	84 e1       	ldi	r24, 0x14	; 20
     722:	91 e0       	ldi	r25, 0x01	; 1
     724:	9c af       	std	Y+60, r25	; 0x3c
     726:	8b af       	std	Y+59, r24	; 0x3b
     728:	8b ad       	ldd	r24, Y+59	; 0x3b
     72a:	9c ad       	ldd	r25, Y+60	; 0x3c
     72c:	01 97       	sbiw	r24, 0x01	; 1
     72e:	f1 f7       	brne	.-4      	; 0x72c <lcd_set_4bit+0x580>
     730:	9c af       	std	Y+60, r25	; 0x3c
     732:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     734:	8d ad       	ldd	r24, Y+61	; 0x3d
     736:	9e ad       	ldd	r25, Y+62	; 0x3e
     738:	01 97       	sbiw	r24, 0x01	; 1
     73a:	9e af       	std	Y+62, r25	; 0x3e
     73c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     73e:	8d ad       	ldd	r24, Y+61	; 0x3d
     740:	9e ad       	ldd	r25, Y+62	; 0x3e
     742:	00 97       	sbiw	r24, 0x00	; 0
     744:	69 f7       	brne	.-38     	; 0x720 <lcd_set_4bit+0x574>
     746:	16 c0       	rjmp	.+44     	; 0x774 <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     748:	fe 01       	movw	r30, r28
     74a:	ff 96       	adiw	r30, 0x3f	; 63
     74c:	60 81       	ld	r22, Z
     74e:	71 81       	ldd	r23, Z+1	; 0x01
     750:	82 81       	ldd	r24, Z+2	; 0x02
     752:	93 81       	ldd	r25, Z+3	; 0x03
     754:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
     758:	dc 01       	movw	r26, r24
     75a:	cb 01       	movw	r24, r22
     75c:	9e af       	std	Y+62, r25	; 0x3e
     75e:	8d af       	std	Y+61, r24	; 0x3d
     760:	8d ad       	ldd	r24, Y+61	; 0x3d
     762:	9e ad       	ldd	r25, Y+62	; 0x3e
     764:	9a af       	std	Y+58, r25	; 0x3a
     766:	89 af       	std	Y+57, r24	; 0x39
     768:	89 ad       	ldd	r24, Y+57	; 0x39
     76a:	9a ad       	ldd	r25, Y+58	; 0x3a
     76c:	01 97       	sbiw	r24, 0x01	; 1
     76e:	f1 f7       	brne	.-4      	; 0x76c <lcd_set_4bit+0x5c0>
     770:	9a af       	std	Y+58, r25	; 0x3a
     772:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     774:	a8 e2       	ldi	r26, 0x28	; 40
     776:	b0 e0       	ldi	r27, 0x00	; 0
     778:	e8 e2       	ldi	r30, 0x28	; 40
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	80 81       	ld	r24, Z
     77e:	8b 7f       	andi	r24, 0xFB	; 251
     780:	8c 93       	st	X, r24
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	a0 e8       	ldi	r26, 0x80	; 128
     788:	bf e3       	ldi	r27, 0x3F	; 63
     78a:	8d ab       	std	Y+53, r24	; 0x35
     78c:	9e ab       	std	Y+54, r25	; 0x36
     78e:	af ab       	std	Y+55, r26	; 0x37
     790:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     792:	6d a9       	ldd	r22, Y+53	; 0x35
     794:	7e a9       	ldd	r23, Y+54	; 0x36
     796:	8f a9       	ldd	r24, Y+55	; 0x37
     798:	98 ad       	ldd	r25, Y+56	; 0x38
     79a:	2d ec       	ldi	r18, 0xCD	; 205
     79c:	3c ec       	ldi	r19, 0xCC	; 204
     79e:	4c e2       	ldi	r20, 0x2C	; 44
     7a0:	55 e4       	ldi	r21, 0x45	; 69
     7a2:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
     7a6:	dc 01       	movw	r26, r24
     7a8:	cb 01       	movw	r24, r22
     7aa:	89 ab       	std	Y+49, r24	; 0x31
     7ac:	9a ab       	std	Y+50, r25	; 0x32
     7ae:	ab ab       	std	Y+51, r26	; 0x33
     7b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     7b2:	69 a9       	ldd	r22, Y+49	; 0x31
     7b4:	7a a9       	ldd	r23, Y+50	; 0x32
     7b6:	8b a9       	ldd	r24, Y+51	; 0x33
     7b8:	9c a9       	ldd	r25, Y+52	; 0x34
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	40 e8       	ldi	r20, 0x80	; 128
     7c0:	5f e3       	ldi	r21, 0x3F	; 63
     7c2:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
     7c6:	88 23       	and	r24, r24
     7c8:	2c f4       	brge	.+10     	; 0x7d4 <lcd_set_4bit+0x628>
		__ticks = 1;
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	98 ab       	std	Y+48, r25	; 0x30
     7d0:	8f a7       	std	Y+47, r24	; 0x2f
     7d2:	3f c0       	rjmp	.+126    	; 0x852 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     7d4:	69 a9       	ldd	r22, Y+49	; 0x31
     7d6:	7a a9       	ldd	r23, Y+50	; 0x32
     7d8:	8b a9       	ldd	r24, Y+51	; 0x33
     7da:	9c a9       	ldd	r25, Y+52	; 0x34
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f e7       	ldi	r20, 0x7F	; 127
     7e2:	57 e4       	ldi	r21, 0x47	; 71
     7e4:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
     7e8:	18 16       	cp	r1, r24
     7ea:	4c f5       	brge	.+82     	; 0x83e <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7ec:	6d a9       	ldd	r22, Y+53	; 0x35
     7ee:	7e a9       	ldd	r23, Y+54	; 0x36
     7f0:	8f a9       	ldd	r24, Y+55	; 0x37
     7f2:	98 ad       	ldd	r25, Y+56	; 0x38
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	40 e2       	ldi	r20, 0x20	; 32
     7fa:	51 e4       	ldi	r21, 0x41	; 65
     7fc:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
     800:	dc 01       	movw	r26, r24
     802:	cb 01       	movw	r24, r22
     804:	bc 01       	movw	r22, r24
     806:	cd 01       	movw	r24, r26
     808:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
     80c:	dc 01       	movw	r26, r24
     80e:	cb 01       	movw	r24, r22
     810:	98 ab       	std	Y+48, r25	; 0x30
     812:	8f a7       	std	Y+47, r24	; 0x2f
     814:	0f c0       	rjmp	.+30     	; 0x834 <lcd_set_4bit+0x688>
     816:	84 e1       	ldi	r24, 0x14	; 20
     818:	91 e0       	ldi	r25, 0x01	; 1
     81a:	9e a7       	std	Y+46, r25	; 0x2e
     81c:	8d a7       	std	Y+45, r24	; 0x2d
     81e:	8d a5       	ldd	r24, Y+45	; 0x2d
     820:	9e a5       	ldd	r25, Y+46	; 0x2e
     822:	01 97       	sbiw	r24, 0x01	; 1
     824:	f1 f7       	brne	.-4      	; 0x822 <lcd_set_4bit+0x676>
     826:	9e a7       	std	Y+46, r25	; 0x2e
     828:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     82a:	8f a5       	ldd	r24, Y+47	; 0x2f
     82c:	98 a9       	ldd	r25, Y+48	; 0x30
     82e:	01 97       	sbiw	r24, 0x01	; 1
     830:	98 ab       	std	Y+48, r25	; 0x30
     832:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     834:	8f a5       	ldd	r24, Y+47	; 0x2f
     836:	98 a9       	ldd	r25, Y+48	; 0x30
     838:	00 97       	sbiw	r24, 0x00	; 0
     83a:	69 f7       	brne	.-38     	; 0x816 <lcd_set_4bit+0x66a>
     83c:	14 c0       	rjmp	.+40     	; 0x866 <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     83e:	69 a9       	ldd	r22, Y+49	; 0x31
     840:	7a a9       	ldd	r23, Y+50	; 0x32
     842:	8b a9       	ldd	r24, Y+51	; 0x33
     844:	9c a9       	ldd	r25, Y+52	; 0x34
     846:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
     84a:	dc 01       	movw	r26, r24
     84c:	cb 01       	movw	r24, r22
     84e:	98 ab       	std	Y+48, r25	; 0x30
     850:	8f a7       	std	Y+47, r24	; 0x2f
     852:	8f a5       	ldd	r24, Y+47	; 0x2f
     854:	98 a9       	ldd	r25, Y+48	; 0x30
     856:	9c a7       	std	Y+44, r25	; 0x2c
     858:	8b a7       	std	Y+43, r24	; 0x2b
     85a:	8b a5       	ldd	r24, Y+43	; 0x2b
     85c:	9c a5       	ldd	r25, Y+44	; 0x2c
     85e:	01 97       	sbiw	r24, 0x01	; 1
     860:	f1 f7       	brne	.-4      	; 0x85e <lcd_set_4bit+0x6b2>
     862:	9c a7       	std	Y+44, r25	; 0x2c
     864:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     866:	a8 e2       	ldi	r26, 0x28	; 40
     868:	b0 e0       	ldi	r27, 0x00	; 0
     86a:	e8 e2       	ldi	r30, 0x28	; 40
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	80 81       	ld	r24, Z
     870:	8e 7f       	andi	r24, 0xFE	; 254
     872:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     874:	a8 e2       	ldi	r26, 0x28	; 40
     876:	b0 e0       	ldi	r27, 0x00	; 0
     878:	e8 e2       	ldi	r30, 0x28	; 40
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	80 81       	ld	r24, Z
     87e:	8d 7f       	andi	r24, 0xFD	; 253
     880:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     882:	e8 e2       	ldi	r30, 0x28	; 40
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	80 e3       	ldi	r24, 0x30	; 48
     888:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     88a:	a8 e2       	ldi	r26, 0x28	; 40
     88c:	b0 e0       	ldi	r27, 0x00	; 0
     88e:	e8 e2       	ldi	r30, 0x28	; 40
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	80 81       	ld	r24, Z
     894:	84 60       	ori	r24, 0x04	; 4
     896:	8c 93       	st	X, r24
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	a0 ea       	ldi	r26, 0xA0	; 160
     89e:	b0 e4       	ldi	r27, 0x40	; 64
     8a0:	8f a3       	std	Y+39, r24	; 0x27
     8a2:	98 a7       	std	Y+40, r25	; 0x28
     8a4:	a9 a7       	std	Y+41, r26	; 0x29
     8a6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8a8:	6f a1       	ldd	r22, Y+39	; 0x27
     8aa:	78 a5       	ldd	r23, Y+40	; 0x28
     8ac:	89 a5       	ldd	r24, Y+41	; 0x29
     8ae:	9a a5       	ldd	r25, Y+42	; 0x2a
     8b0:	2d ec       	ldi	r18, 0xCD	; 205
     8b2:	3c ec       	ldi	r19, 0xCC	; 204
     8b4:	4c e2       	ldi	r20, 0x2C	; 44
     8b6:	55 e4       	ldi	r21, 0x45	; 69
     8b8:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
     8bc:	dc 01       	movw	r26, r24
     8be:	cb 01       	movw	r24, r22
     8c0:	8b a3       	std	Y+35, r24	; 0x23
     8c2:	9c a3       	std	Y+36, r25	; 0x24
     8c4:	ad a3       	std	Y+37, r26	; 0x25
     8c6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     8c8:	6b a1       	ldd	r22, Y+35	; 0x23
     8ca:	7c a1       	ldd	r23, Y+36	; 0x24
     8cc:	8d a1       	ldd	r24, Y+37	; 0x25
     8ce:	9e a1       	ldd	r25, Y+38	; 0x26
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	40 e8       	ldi	r20, 0x80	; 128
     8d6:	5f e3       	ldi	r21, 0x3F	; 63
     8d8:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
     8dc:	88 23       	and	r24, r24
     8de:	2c f4       	brge	.+10     	; 0x8ea <lcd_set_4bit+0x73e>
		__ticks = 1;
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	9a a3       	std	Y+34, r25	; 0x22
     8e6:	89 a3       	std	Y+33, r24	; 0x21
     8e8:	3f c0       	rjmp	.+126    	; 0x968 <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     8ea:	6b a1       	ldd	r22, Y+35	; 0x23
     8ec:	7c a1       	ldd	r23, Y+36	; 0x24
     8ee:	8d a1       	ldd	r24, Y+37	; 0x25
     8f0:	9e a1       	ldd	r25, Y+38	; 0x26
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	3f ef       	ldi	r19, 0xFF	; 255
     8f6:	4f e7       	ldi	r20, 0x7F	; 127
     8f8:	57 e4       	ldi	r21, 0x47	; 71
     8fa:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
     8fe:	18 16       	cp	r1, r24
     900:	4c f5       	brge	.+82     	; 0x954 <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     902:	6f a1       	ldd	r22, Y+39	; 0x27
     904:	78 a5       	ldd	r23, Y+40	; 0x28
     906:	89 a5       	ldd	r24, Y+41	; 0x29
     908:	9a a5       	ldd	r25, Y+42	; 0x2a
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	40 e2       	ldi	r20, 0x20	; 32
     910:	51 e4       	ldi	r21, 0x41	; 65
     912:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
     916:	dc 01       	movw	r26, r24
     918:	cb 01       	movw	r24, r22
     91a:	bc 01       	movw	r22, r24
     91c:	cd 01       	movw	r24, r26
     91e:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
     922:	dc 01       	movw	r26, r24
     924:	cb 01       	movw	r24, r22
     926:	9a a3       	std	Y+34, r25	; 0x22
     928:	89 a3       	std	Y+33, r24	; 0x21
     92a:	0f c0       	rjmp	.+30     	; 0x94a <lcd_set_4bit+0x79e>
     92c:	84 e1       	ldi	r24, 0x14	; 20
     92e:	91 e0       	ldi	r25, 0x01	; 1
     930:	98 a3       	std	Y+32, r25	; 0x20
     932:	8f 8f       	std	Y+31, r24	; 0x1f
     934:	8f 8d       	ldd	r24, Y+31	; 0x1f
     936:	98 a1       	ldd	r25, Y+32	; 0x20
     938:	01 97       	sbiw	r24, 0x01	; 1
     93a:	f1 f7       	brne	.-4      	; 0x938 <lcd_set_4bit+0x78c>
     93c:	98 a3       	std	Y+32, r25	; 0x20
     93e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     940:	89 a1       	ldd	r24, Y+33	; 0x21
     942:	9a a1       	ldd	r25, Y+34	; 0x22
     944:	01 97       	sbiw	r24, 0x01	; 1
     946:	9a a3       	std	Y+34, r25	; 0x22
     948:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     94a:	89 a1       	ldd	r24, Y+33	; 0x21
     94c:	9a a1       	ldd	r25, Y+34	; 0x22
     94e:	00 97       	sbiw	r24, 0x00	; 0
     950:	69 f7       	brne	.-38     	; 0x92c <lcd_set_4bit+0x780>
     952:	14 c0       	rjmp	.+40     	; 0x97c <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     954:	6b a1       	ldd	r22, Y+35	; 0x23
     956:	7c a1       	ldd	r23, Y+36	; 0x24
     958:	8d a1       	ldd	r24, Y+37	; 0x25
     95a:	9e a1       	ldd	r25, Y+38	; 0x26
     95c:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
     960:	dc 01       	movw	r26, r24
     962:	cb 01       	movw	r24, r22
     964:	9a a3       	std	Y+34, r25	; 0x22
     966:	89 a3       	std	Y+33, r24	; 0x21
     968:	89 a1       	ldd	r24, Y+33	; 0x21
     96a:	9a a1       	ldd	r25, Y+34	; 0x22
     96c:	9e 8f       	std	Y+30, r25	; 0x1e
     96e:	8d 8f       	std	Y+29, r24	; 0x1d
     970:	8d 8d       	ldd	r24, Y+29	; 0x1d
     972:	9e 8d       	ldd	r25, Y+30	; 0x1e
     974:	01 97       	sbiw	r24, 0x01	; 1
     976:	f1 f7       	brne	.-4      	; 0x974 <lcd_set_4bit+0x7c8>
     978:	9e 8f       	std	Y+30, r25	; 0x1e
     97a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     97c:	a8 e2       	ldi	r26, 0x28	; 40
     97e:	b0 e0       	ldi	r27, 0x00	; 0
     980:	e8 e2       	ldi	r30, 0x28	; 40
     982:	f0 e0       	ldi	r31, 0x00	; 0
     984:	80 81       	ld	r24, Z
     986:	8b 7f       	andi	r24, 0xFB	; 251
     988:	8c 93       	st	X, r24
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	a0 e8       	ldi	r26, 0x80	; 128
     990:	bf e3       	ldi	r27, 0x3F	; 63
     992:	89 8f       	std	Y+25, r24	; 0x19
     994:	9a 8f       	std	Y+26, r25	; 0x1a
     996:	ab 8f       	std	Y+27, r26	; 0x1b
     998:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     99a:	69 8d       	ldd	r22, Y+25	; 0x19
     99c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     99e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9a2:	2d ec       	ldi	r18, 0xCD	; 205
     9a4:	3c ec       	ldi	r19, 0xCC	; 204
     9a6:	4c e2       	ldi	r20, 0x2C	; 44
     9a8:	55 e4       	ldi	r21, 0x45	; 69
     9aa:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
     9ae:	dc 01       	movw	r26, r24
     9b0:	cb 01       	movw	r24, r22
     9b2:	8d 8b       	std	Y+21, r24	; 0x15
     9b4:	9e 8b       	std	Y+22, r25	; 0x16
     9b6:	af 8b       	std	Y+23, r26	; 0x17
     9b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     9ba:	6d 89       	ldd	r22, Y+21	; 0x15
     9bc:	7e 89       	ldd	r23, Y+22	; 0x16
     9be:	8f 89       	ldd	r24, Y+23	; 0x17
     9c0:	98 8d       	ldd	r25, Y+24	; 0x18
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	40 e8       	ldi	r20, 0x80	; 128
     9c8:	5f e3       	ldi	r21, 0x3F	; 63
     9ca:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
     9ce:	88 23       	and	r24, r24
     9d0:	2c f4       	brge	.+10     	; 0x9dc <lcd_set_4bit+0x830>
		__ticks = 1;
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	9c 8b       	std	Y+20, r25	; 0x14
     9d8:	8b 8b       	std	Y+19, r24	; 0x13
     9da:	3f c0       	rjmp	.+126    	; 0xa5a <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
     9dc:	6d 89       	ldd	r22, Y+21	; 0x15
     9de:	7e 89       	ldd	r23, Y+22	; 0x16
     9e0:	8f 89       	ldd	r24, Y+23	; 0x17
     9e2:	98 8d       	ldd	r25, Y+24	; 0x18
     9e4:	20 e0       	ldi	r18, 0x00	; 0
     9e6:	3f ef       	ldi	r19, 0xFF	; 255
     9e8:	4f e7       	ldi	r20, 0x7F	; 127
     9ea:	57 e4       	ldi	r21, 0x47	; 71
     9ec:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
     9f0:	18 16       	cp	r1, r24
     9f2:	4c f5       	brge	.+82     	; 0xa46 <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9f4:	69 8d       	ldd	r22, Y+25	; 0x19
     9f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     9f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	40 e2       	ldi	r20, 0x20	; 32
     a02:	51 e4       	ldi	r21, 0x41	; 65
     a04:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
     a08:	dc 01       	movw	r26, r24
     a0a:	cb 01       	movw	r24, r22
     a0c:	bc 01       	movw	r22, r24
     a0e:	cd 01       	movw	r24, r26
     a10:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
     a14:	dc 01       	movw	r26, r24
     a16:	cb 01       	movw	r24, r22
     a18:	9c 8b       	std	Y+20, r25	; 0x14
     a1a:	8b 8b       	std	Y+19, r24	; 0x13
     a1c:	0f c0       	rjmp	.+30     	; 0xa3c <lcd_set_4bit+0x890>
     a1e:	84 e1       	ldi	r24, 0x14	; 20
     a20:	91 e0       	ldi	r25, 0x01	; 1
     a22:	9a 8b       	std	Y+18, r25	; 0x12
     a24:	89 8b       	std	Y+17, r24	; 0x11
     a26:	89 89       	ldd	r24, Y+17	; 0x11
     a28:	9a 89       	ldd	r25, Y+18	; 0x12
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	f1 f7       	brne	.-4      	; 0xa2a <lcd_set_4bit+0x87e>
     a2e:	9a 8b       	std	Y+18, r25	; 0x12
     a30:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a32:	8b 89       	ldd	r24, Y+19	; 0x13
     a34:	9c 89       	ldd	r25, Y+20	; 0x14
     a36:	01 97       	sbiw	r24, 0x01	; 1
     a38:	9c 8b       	std	Y+20, r25	; 0x14
     a3a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a3c:	8b 89       	ldd	r24, Y+19	; 0x13
     a3e:	9c 89       	ldd	r25, Y+20	; 0x14
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	69 f7       	brne	.-38     	; 0xa1e <lcd_set_4bit+0x872>
     a44:	14 c0       	rjmp	.+40     	; 0xa6e <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a46:	6d 89       	ldd	r22, Y+21	; 0x15
     a48:	7e 89       	ldd	r23, Y+22	; 0x16
     a4a:	8f 89       	ldd	r24, Y+23	; 0x17
     a4c:	98 8d       	ldd	r25, Y+24	; 0x18
     a4e:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
     a52:	dc 01       	movw	r26, r24
     a54:	cb 01       	movw	r24, r22
     a56:	9c 8b       	std	Y+20, r25	; 0x14
     a58:	8b 8b       	std	Y+19, r24	; 0x13
     a5a:	8b 89       	ldd	r24, Y+19	; 0x13
     a5c:	9c 89       	ldd	r25, Y+20	; 0x14
     a5e:	98 8b       	std	Y+16, r25	; 0x10
     a60:	8f 87       	std	Y+15, r24	; 0x0f
     a62:	8f 85       	ldd	r24, Y+15	; 0x0f
     a64:	98 89       	ldd	r25, Y+16	; 0x10
     a66:	01 97       	sbiw	r24, 0x01	; 1
     a68:	f1 f7       	brne	.-4      	; 0xa66 <lcd_set_4bit+0x8ba>
     a6a:	98 8b       	std	Y+16, r25	; 0x10
     a6c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     a6e:	a8 e2       	ldi	r26, 0x28	; 40
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	e8 e2       	ldi	r30, 0x28	; 40
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	80 81       	ld	r24, Z
     a78:	8e 7f       	andi	r24, 0xFE	; 254
     a7a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     a7c:	a8 e2       	ldi	r26, 0x28	; 40
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	e8 e2       	ldi	r30, 0x28	; 40
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	80 81       	ld	r24, Z
     a86:	8d 7f       	andi	r24, 0xFD	; 253
     a88:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     a8a:	e8 e2       	ldi	r30, 0x28	; 40
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	80 e2       	ldi	r24, 0x20	; 32
     a90:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     a92:	a8 e2       	ldi	r26, 0x28	; 40
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	e8 e2       	ldi	r30, 0x28	; 40
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	80 81       	ld	r24, Z
     a9c:	84 60       	ori	r24, 0x04	; 4
     a9e:	8c 93       	st	X, r24
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 ea       	ldi	r26, 0xA0	; 160
     aa6:	b0 e4       	ldi	r27, 0x40	; 64
     aa8:	8b 87       	std	Y+11, r24	; 0x0b
     aaa:	9c 87       	std	Y+12, r25	; 0x0c
     aac:	ad 87       	std	Y+13, r26	; 0x0d
     aae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ab0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ab2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ab4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ab6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ab8:	2d ec       	ldi	r18, 0xCD	; 205
     aba:	3c ec       	ldi	r19, 0xCC	; 204
     abc:	4c e2       	ldi	r20, 0x2C	; 44
     abe:	55 e4       	ldi	r21, 0x45	; 69
     ac0:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
     ac4:	dc 01       	movw	r26, r24
     ac6:	cb 01       	movw	r24, r22
     ac8:	8f 83       	std	Y+7, r24	; 0x07
     aca:	98 87       	std	Y+8, r25	; 0x08
     acc:	a9 87       	std	Y+9, r26	; 0x09
     ace:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ad0:	6f 81       	ldd	r22, Y+7	; 0x07
     ad2:	78 85       	ldd	r23, Y+8	; 0x08
     ad4:	89 85       	ldd	r24, Y+9	; 0x09
     ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ad8:	20 e0       	ldi	r18, 0x00	; 0
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	40 e8       	ldi	r20, 0x80	; 128
     ade:	5f e3       	ldi	r21, 0x3F	; 63
     ae0:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
     ae4:	88 23       	and	r24, r24
     ae6:	2c f4       	brge	.+10     	; 0xaf2 <lcd_set_4bit+0x946>
		__ticks = 1;
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	9e 83       	std	Y+6, r25	; 0x06
     aee:	8d 83       	std	Y+5, r24	; 0x05
     af0:	3f c0       	rjmp	.+126    	; 0xb70 <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
     af2:	6f 81       	ldd	r22, Y+7	; 0x07
     af4:	78 85       	ldd	r23, Y+8	; 0x08
     af6:	89 85       	ldd	r24, Y+9	; 0x09
     af8:	9a 85       	ldd	r25, Y+10	; 0x0a
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	3f ef       	ldi	r19, 0xFF	; 255
     afe:	4f e7       	ldi	r20, 0x7F	; 127
     b00:	57 e4       	ldi	r21, 0x47	; 71
     b02:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
     b06:	18 16       	cp	r1, r24
     b08:	4c f5       	brge	.+82     	; 0xb5c <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b0a:	6b 85       	ldd	r22, Y+11	; 0x0b
     b0c:	7c 85       	ldd	r23, Y+12	; 0x0c
     b0e:	8d 85       	ldd	r24, Y+13	; 0x0d
     b10:	9e 85       	ldd	r25, Y+14	; 0x0e
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	40 e2       	ldi	r20, 0x20	; 32
     b18:	51 e4       	ldi	r21, 0x41	; 65
     b1a:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
     b1e:	dc 01       	movw	r26, r24
     b20:	cb 01       	movw	r24, r22
     b22:	bc 01       	movw	r22, r24
     b24:	cd 01       	movw	r24, r26
     b26:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
     b2a:	dc 01       	movw	r26, r24
     b2c:	cb 01       	movw	r24, r22
     b2e:	9e 83       	std	Y+6, r25	; 0x06
     b30:	8d 83       	std	Y+5, r24	; 0x05
     b32:	0f c0       	rjmp	.+30     	; 0xb52 <lcd_set_4bit+0x9a6>
     b34:	84 e1       	ldi	r24, 0x14	; 20
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	9c 83       	std	Y+4, r25	; 0x04
     b3a:	8b 83       	std	Y+3, r24	; 0x03
     b3c:	8b 81       	ldd	r24, Y+3	; 0x03
     b3e:	9c 81       	ldd	r25, Y+4	; 0x04
     b40:	01 97       	sbiw	r24, 0x01	; 1
     b42:	f1 f7       	brne	.-4      	; 0xb40 <lcd_set_4bit+0x994>
     b44:	9c 83       	std	Y+4, r25	; 0x04
     b46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b48:	8d 81       	ldd	r24, Y+5	; 0x05
     b4a:	9e 81       	ldd	r25, Y+6	; 0x06
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	9e 83       	std	Y+6, r25	; 0x06
     b50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b52:	8d 81       	ldd	r24, Y+5	; 0x05
     b54:	9e 81       	ldd	r25, Y+6	; 0x06
     b56:	00 97       	sbiw	r24, 0x00	; 0
     b58:	69 f7       	brne	.-38     	; 0xb34 <lcd_set_4bit+0x988>
     b5a:	14 c0       	rjmp	.+40     	; 0xb84 <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b5c:	6f 81       	ldd	r22, Y+7	; 0x07
     b5e:	78 85       	ldd	r23, Y+8	; 0x08
     b60:	89 85       	ldd	r24, Y+9	; 0x09
     b62:	9a 85       	ldd	r25, Y+10	; 0x0a
     b64:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
     b68:	dc 01       	movw	r26, r24
     b6a:	cb 01       	movw	r24, r22
     b6c:	9e 83       	std	Y+6, r25	; 0x06
     b6e:	8d 83       	std	Y+5, r24	; 0x05
     b70:	8d 81       	ldd	r24, Y+5	; 0x05
     b72:	9e 81       	ldd	r25, Y+6	; 0x06
     b74:	9a 83       	std	Y+2, r25	; 0x02
     b76:	89 83       	std	Y+1, r24	; 0x01
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	9a 81       	ldd	r25, Y+2	; 0x02
     b7c:	01 97       	sbiw	r24, 0x01	; 1
     b7e:	f1 f7       	brne	.-4      	; 0xb7c <lcd_set_4bit+0x9d0>
     b80:	9a 83       	std	Y+2, r25	; 0x02
     b82:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     b84:	a8 e2       	ldi	r26, 0x28	; 40
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	e8 e2       	ldi	r30, 0x28	; 40
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	8b 7f       	andi	r24, 0xFB	; 251
     b90:	8c 93       	st	X, r24

	
}
     b92:	c0 59       	subi	r28, 0x90	; 144
     b94:	df 4f       	sbci	r29, 0xFF	; 255
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	cd bf       	out	0x3d, r28	; 61
     ba0:	cf 91       	pop	r28
     ba2:	df 91       	pop	r29
     ba4:	1f 91       	pop	r17
     ba6:	0f 91       	pop	r16
     ba8:	08 95       	ret

00000baa <lcd_init>:

/*****Function to Initialize LCD*****/
void lcd_init()
{
     baa:	df 93       	push	r29
     bac:	cf 93       	push	r28
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	2e 97       	sbiw	r28, 0x0e	; 14
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	f8 94       	cli
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	cd bf       	out	0x3d, r28	; 61
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	a0 e8       	ldi	r26, 0x80	; 128
     bc4:	bf e3       	ldi	r27, 0x3F	; 63
     bc6:	8b 87       	std	Y+11, r24	; 0x0b
     bc8:	9c 87       	std	Y+12, r25	; 0x0c
     bca:	ad 87       	std	Y+13, r26	; 0x0d
     bcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bce:	6b 85       	ldd	r22, Y+11	; 0x0b
     bd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     bd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd6:	2d ec       	ldi	r18, 0xCD	; 205
     bd8:	3c ec       	ldi	r19, 0xCC	; 204
     bda:	4c e2       	ldi	r20, 0x2C	; 44
     bdc:	55 e4       	ldi	r21, 0x45	; 69
     bde:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
     be2:	dc 01       	movw	r26, r24
     be4:	cb 01       	movw	r24, r22
     be6:	8f 83       	std	Y+7, r24	; 0x07
     be8:	98 87       	std	Y+8, r25	; 0x08
     bea:	a9 87       	std	Y+9, r26	; 0x09
     bec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bee:	6f 81       	ldd	r22, Y+7	; 0x07
     bf0:	78 85       	ldd	r23, Y+8	; 0x08
     bf2:	89 85       	ldd	r24, Y+9	; 0x09
     bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf6:	20 e0       	ldi	r18, 0x00	; 0
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	40 e8       	ldi	r20, 0x80	; 128
     bfc:	5f e3       	ldi	r21, 0x3F	; 63
     bfe:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
     c02:	88 23       	and	r24, r24
     c04:	2c f4       	brge	.+10     	; 0xc10 <lcd_init+0x66>
		__ticks = 1;
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	9e 83       	std	Y+6, r25	; 0x06
     c0c:	8d 83       	std	Y+5, r24	; 0x05
     c0e:	3f c0       	rjmp	.+126    	; 0xc8e <lcd_init+0xe4>
	else if (__tmp > 65535)
     c10:	6f 81       	ldd	r22, Y+7	; 0x07
     c12:	78 85       	ldd	r23, Y+8	; 0x08
     c14:	89 85       	ldd	r24, Y+9	; 0x09
     c16:	9a 85       	ldd	r25, Y+10	; 0x0a
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	3f ef       	ldi	r19, 0xFF	; 255
     c1c:	4f e7       	ldi	r20, 0x7F	; 127
     c1e:	57 e4       	ldi	r21, 0x47	; 71
     c20:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
     c24:	18 16       	cp	r1, r24
     c26:	4c f5       	brge	.+82     	; 0xc7a <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c28:	6b 85       	ldd	r22, Y+11	; 0x0b
     c2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     c2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	40 e2       	ldi	r20, 0x20	; 32
     c36:	51 e4       	ldi	r21, 0x41	; 65
     c38:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
     c3c:	dc 01       	movw	r26, r24
     c3e:	cb 01       	movw	r24, r22
     c40:	bc 01       	movw	r22, r24
     c42:	cd 01       	movw	r24, r26
     c44:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
     c48:	dc 01       	movw	r26, r24
     c4a:	cb 01       	movw	r24, r22
     c4c:	9e 83       	std	Y+6, r25	; 0x06
     c4e:	8d 83       	std	Y+5, r24	; 0x05
     c50:	0f c0       	rjmp	.+30     	; 0xc70 <lcd_init+0xc6>
     c52:	84 e1       	ldi	r24, 0x14	; 20
     c54:	91 e0       	ldi	r25, 0x01	; 1
     c56:	9c 83       	std	Y+4, r25	; 0x04
     c58:	8b 83       	std	Y+3, r24	; 0x03
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
     c5c:	9c 81       	ldd	r25, Y+4	; 0x04
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <lcd_init+0xb4>
     c62:	9c 83       	std	Y+4, r25	; 0x04
     c64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c66:	8d 81       	ldd	r24, Y+5	; 0x05
     c68:	9e 81       	ldd	r25, Y+6	; 0x06
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	9e 83       	std	Y+6, r25	; 0x06
     c6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c70:	8d 81       	ldd	r24, Y+5	; 0x05
     c72:	9e 81       	ldd	r25, Y+6	; 0x06
     c74:	00 97       	sbiw	r24, 0x00	; 0
     c76:	69 f7       	brne	.-38     	; 0xc52 <lcd_init+0xa8>
     c78:	14 c0       	rjmp	.+40     	; 0xca2 <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c7a:	6f 81       	ldd	r22, Y+7	; 0x07
     c7c:	78 85       	ldd	r23, Y+8	; 0x08
     c7e:	89 85       	ldd	r24, Y+9	; 0x09
     c80:	9a 85       	ldd	r25, Y+10	; 0x0a
     c82:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
     c86:	dc 01       	movw	r26, r24
     c88:	cb 01       	movw	r24, r22
     c8a:	9e 83       	std	Y+6, r25	; 0x06
     c8c:	8d 83       	std	Y+5, r24	; 0x05
     c8e:	8d 81       	ldd	r24, Y+5	; 0x05
     c90:	9e 81       	ldd	r25, Y+6	; 0x06
     c92:	9a 83       	std	Y+2, r25	; 0x02
     c94:	89 83       	std	Y+1, r24	; 0x01
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	9a 81       	ldd	r25, Y+2	; 0x02
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	f1 f7       	brne	.-4      	; 0xc9a <lcd_init+0xf0>
     c9e:	9a 83       	std	Y+2, r25	; 0x02
     ca0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     ca2:	88 e2       	ldi	r24, 0x28	; 40
     ca4:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
	lcd_wr_command(0x01);
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
	lcd_wr_command(0x06);
     cae:	86 e0       	ldi	r24, 0x06	; 6
     cb0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
	lcd_wr_command(0x0E);
     cb4:	8e e0       	ldi	r24, 0x0E	; 14
     cb6:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
	lcd_wr_command(0x80);
     cba:	80 e8       	ldi	r24, 0x80	; 128
     cbc:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
		
}
     cc0:	2e 96       	adiw	r28, 0x0e	; 14
     cc2:	0f b6       	in	r0, 0x3f	; 63
     cc4:	f8 94       	cli
     cc6:	de bf       	out	0x3e, r29	; 62
     cc8:	0f be       	out	0x3f, r0	; 63
     cca:	cd bf       	out	0x3d, r28	; 61
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <lcd_wr_command>:

	 
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
     cda:	6e 97       	sbiw	r28, 0x1e	; 30
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	de bf       	out	0x3e, r29	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	cd bf       	out	0x3d, r28	; 61
     ce6:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     ce8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cea:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
     cec:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cee:	80 7f       	andi	r24, 0xF0	; 240
     cf0:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     cf2:	a8 e2       	ldi	r26, 0x28	; 40
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e8 e2       	ldi	r30, 0x28	; 40
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	8f 70       	andi	r24, 0x0F	; 15
     cfe:	8c 93       	st	X, r24
	lcd_port |= temp;
     d00:	a8 e2       	ldi	r26, 0x28	; 40
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e8 e2       	ldi	r30, 0x28	; 40
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	90 81       	ld	r25, Z
     d0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d0c:	89 2b       	or	r24, r25
     d0e:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     d10:	a8 e2       	ldi	r26, 0x28	; 40
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e8 e2       	ldi	r30, 0x28	; 40
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	8e 7f       	andi	r24, 0xFE	; 254
     d1c:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     d1e:	a8 e2       	ldi	r26, 0x28	; 40
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e8 e2       	ldi	r30, 0x28	; 40
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	8d 7f       	andi	r24, 0xFD	; 253
     d2a:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     d2c:	a8 e2       	ldi	r26, 0x28	; 40
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e8 e2       	ldi	r30, 0x28	; 40
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	84 60       	ori	r24, 0x04	; 4
     d38:	8c 93       	st	X, r24
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	a0 ea       	ldi	r26, 0xA0	; 160
     d40:	b0 e4       	ldi	r27, 0x40	; 64
     d42:	89 8f       	std	Y+25, r24	; 0x19
     d44:	9a 8f       	std	Y+26, r25	; 0x1a
     d46:	ab 8f       	std	Y+27, r26	; 0x1b
     d48:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d4a:	69 8d       	ldd	r22, Y+25	; 0x19
     d4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d50:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d52:	2d ec       	ldi	r18, 0xCD	; 205
     d54:	3c ec       	ldi	r19, 0xCC	; 204
     d56:	4c e2       	ldi	r20, 0x2C	; 44
     d58:	55 e4       	ldi	r21, 0x45	; 69
     d5a:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
     d5e:	dc 01       	movw	r26, r24
     d60:	cb 01       	movw	r24, r22
     d62:	8d 8b       	std	Y+21, r24	; 0x15
     d64:	9e 8b       	std	Y+22, r25	; 0x16
     d66:	af 8b       	std	Y+23, r26	; 0x17
     d68:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d6a:	6d 89       	ldd	r22, Y+21	; 0x15
     d6c:	7e 89       	ldd	r23, Y+22	; 0x16
     d6e:	8f 89       	ldd	r24, Y+23	; 0x17
     d70:	98 8d       	ldd	r25, Y+24	; 0x18
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	40 e8       	ldi	r20, 0x80	; 128
     d78:	5f e3       	ldi	r21, 0x3F	; 63
     d7a:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
     d7e:	88 23       	and	r24, r24
     d80:	2c f4       	brge	.+10     	; 0xd8c <lcd_wr_command+0xba>
		__ticks = 1;
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	9c 8b       	std	Y+20, r25	; 0x14
     d88:	8b 8b       	std	Y+19, r24	; 0x13
     d8a:	3f c0       	rjmp	.+126    	; 0xe0a <lcd_wr_command+0x138>
	else if (__tmp > 65535)
     d8c:	6d 89       	ldd	r22, Y+21	; 0x15
     d8e:	7e 89       	ldd	r23, Y+22	; 0x16
     d90:	8f 89       	ldd	r24, Y+23	; 0x17
     d92:	98 8d       	ldd	r25, Y+24	; 0x18
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	3f ef       	ldi	r19, 0xFF	; 255
     d98:	4f e7       	ldi	r20, 0x7F	; 127
     d9a:	57 e4       	ldi	r21, 0x47	; 71
     d9c:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
     da0:	18 16       	cp	r1, r24
     da2:	4c f5       	brge	.+82     	; 0xdf6 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     da4:	69 8d       	ldd	r22, Y+25	; 0x19
     da6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     da8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     daa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dac:	20 e0       	ldi	r18, 0x00	; 0
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	40 e2       	ldi	r20, 0x20	; 32
     db2:	51 e4       	ldi	r21, 0x41	; 65
     db4:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
     db8:	dc 01       	movw	r26, r24
     dba:	cb 01       	movw	r24, r22
     dbc:	bc 01       	movw	r22, r24
     dbe:	cd 01       	movw	r24, r26
     dc0:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
     dc4:	dc 01       	movw	r26, r24
     dc6:	cb 01       	movw	r24, r22
     dc8:	9c 8b       	std	Y+20, r25	; 0x14
     dca:	8b 8b       	std	Y+19, r24	; 0x13
     dcc:	0f c0       	rjmp	.+30     	; 0xdec <lcd_wr_command+0x11a>
     dce:	84 e1       	ldi	r24, 0x14	; 20
     dd0:	91 e0       	ldi	r25, 0x01	; 1
     dd2:	9a 8b       	std	Y+18, r25	; 0x12
     dd4:	89 8b       	std	Y+17, r24	; 0x11
     dd6:	89 89       	ldd	r24, Y+17	; 0x11
     dd8:	9a 89       	ldd	r25, Y+18	; 0x12
     dda:	01 97       	sbiw	r24, 0x01	; 1
     ddc:	f1 f7       	brne	.-4      	; 0xdda <lcd_wr_command+0x108>
     dde:	9a 8b       	std	Y+18, r25	; 0x12
     de0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     de2:	8b 89       	ldd	r24, Y+19	; 0x13
     de4:	9c 89       	ldd	r25, Y+20	; 0x14
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	9c 8b       	std	Y+20, r25	; 0x14
     dea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dec:	8b 89       	ldd	r24, Y+19	; 0x13
     dee:	9c 89       	ldd	r25, Y+20	; 0x14
     df0:	00 97       	sbiw	r24, 0x00	; 0
     df2:	69 f7       	brne	.-38     	; 0xdce <lcd_wr_command+0xfc>
     df4:	14 c0       	rjmp	.+40     	; 0xe1e <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     df6:	6d 89       	ldd	r22, Y+21	; 0x15
     df8:	7e 89       	ldd	r23, Y+22	; 0x16
     dfa:	8f 89       	ldd	r24, Y+23	; 0x17
     dfc:	98 8d       	ldd	r25, Y+24	; 0x18
     dfe:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
     e02:	dc 01       	movw	r26, r24
     e04:	cb 01       	movw	r24, r22
     e06:	9c 8b       	std	Y+20, r25	; 0x14
     e08:	8b 8b       	std	Y+19, r24	; 0x13
     e0a:	8b 89       	ldd	r24, Y+19	; 0x13
     e0c:	9c 89       	ldd	r25, Y+20	; 0x14
     e0e:	98 8b       	std	Y+16, r25	; 0x10
     e10:	8f 87       	std	Y+15, r24	; 0x0f
     e12:	8f 85       	ldd	r24, Y+15	; 0x0f
     e14:	98 89       	ldd	r25, Y+16	; 0x10
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	f1 f7       	brne	.-4      	; 0xe16 <lcd_wr_command+0x144>
     e1a:	98 8b       	std	Y+16, r25	; 0x10
     e1c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
     e1e:	a8 e2       	ldi	r26, 0x28	; 40
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e8 e2       	ldi	r30, 0x28	; 40
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	8b 7f       	andi	r24, 0xFB	; 251
     e2a:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
     e2c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e2e:	8f 70       	andi	r24, 0x0F	; 15
     e30:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
     e32:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e34:	82 95       	swap	r24
     e36:	80 7f       	andi	r24, 0xF0	; 240
     e38:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
     e3a:	a8 e2       	ldi	r26, 0x28	; 40
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e8 e2       	ldi	r30, 0x28	; 40
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	8f 70       	andi	r24, 0x0F	; 15
     e46:	8c 93       	st	X, r24
	lcd_port |= cmd;
     e48:	a8 e2       	ldi	r26, 0x28	; 40
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e8 e2       	ldi	r30, 0x28	; 40
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	90 81       	ld	r25, Z
     e52:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e54:	89 2b       	or	r24, r25
     e56:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     e58:	a8 e2       	ldi	r26, 0x28	; 40
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e8 e2       	ldi	r30, 0x28	; 40
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	8e 7f       	andi	r24, 0xFE	; 254
     e64:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     e66:	a8 e2       	ldi	r26, 0x28	; 40
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e8 e2       	ldi	r30, 0x28	; 40
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	8d 7f       	andi	r24, 0xFD	; 253
     e72:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     e74:	a8 e2       	ldi	r26, 0x28	; 40
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e8 e2       	ldi	r30, 0x28	; 40
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	84 60       	ori	r24, 0x04	; 4
     e80:	8c 93       	st	X, r24
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	a0 ea       	ldi	r26, 0xA0	; 160
     e88:	b0 e4       	ldi	r27, 0x40	; 64
     e8a:	8b 87       	std	Y+11, r24	; 0x0b
     e8c:	9c 87       	std	Y+12, r25	; 0x0c
     e8e:	ad 87       	std	Y+13, r26	; 0x0d
     e90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e92:	6b 85       	ldd	r22, Y+11	; 0x0b
     e94:	7c 85       	ldd	r23, Y+12	; 0x0c
     e96:	8d 85       	ldd	r24, Y+13	; 0x0d
     e98:	9e 85       	ldd	r25, Y+14	; 0x0e
     e9a:	2d ec       	ldi	r18, 0xCD	; 205
     e9c:	3c ec       	ldi	r19, 0xCC	; 204
     e9e:	4c e2       	ldi	r20, 0x2C	; 44
     ea0:	55 e4       	ldi	r21, 0x45	; 69
     ea2:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
     ea6:	dc 01       	movw	r26, r24
     ea8:	cb 01       	movw	r24, r22
     eaa:	8f 83       	std	Y+7, r24	; 0x07
     eac:	98 87       	std	Y+8, r25	; 0x08
     eae:	a9 87       	std	Y+9, r26	; 0x09
     eb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     eb2:	6f 81       	ldd	r22, Y+7	; 0x07
     eb4:	78 85       	ldd	r23, Y+8	; 0x08
     eb6:	89 85       	ldd	r24, Y+9	; 0x09
     eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	40 e8       	ldi	r20, 0x80	; 128
     ec0:	5f e3       	ldi	r21, 0x3F	; 63
     ec2:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
     ec6:	88 23       	and	r24, r24
     ec8:	2c f4       	brge	.+10     	; 0xed4 <lcd_wr_command+0x202>
		__ticks = 1;
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	9e 83       	std	Y+6, r25	; 0x06
     ed0:	8d 83       	std	Y+5, r24	; 0x05
     ed2:	3f c0       	rjmp	.+126    	; 0xf52 <lcd_wr_command+0x280>
	else if (__tmp > 65535)
     ed4:	6f 81       	ldd	r22, Y+7	; 0x07
     ed6:	78 85       	ldd	r23, Y+8	; 0x08
     ed8:	89 85       	ldd	r24, Y+9	; 0x09
     eda:	9a 85       	ldd	r25, Y+10	; 0x0a
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	3f ef       	ldi	r19, 0xFF	; 255
     ee0:	4f e7       	ldi	r20, 0x7F	; 127
     ee2:	57 e4       	ldi	r21, 0x47	; 71
     ee4:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
     ee8:	18 16       	cp	r1, r24
     eea:	4c f5       	brge	.+82     	; 0xf3e <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eec:	6b 85       	ldd	r22, Y+11	; 0x0b
     eee:	7c 85       	ldd	r23, Y+12	; 0x0c
     ef0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ef2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 e2       	ldi	r20, 0x20	; 32
     efa:	51 e4       	ldi	r21, 0x41	; 65
     efc:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	bc 01       	movw	r22, r24
     f06:	cd 01       	movw	r24, r26
     f08:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
     f0c:	dc 01       	movw	r26, r24
     f0e:	cb 01       	movw	r24, r22
     f10:	9e 83       	std	Y+6, r25	; 0x06
     f12:	8d 83       	std	Y+5, r24	; 0x05
     f14:	0f c0       	rjmp	.+30     	; 0xf34 <lcd_wr_command+0x262>
     f16:	84 e1       	ldi	r24, 0x14	; 20
     f18:	91 e0       	ldi	r25, 0x01	; 1
     f1a:	9c 83       	std	Y+4, r25	; 0x04
     f1c:	8b 83       	std	Y+3, r24	; 0x03
     f1e:	8b 81       	ldd	r24, Y+3	; 0x03
     f20:	9c 81       	ldd	r25, Y+4	; 0x04
     f22:	01 97       	sbiw	r24, 0x01	; 1
     f24:	f1 f7       	brne	.-4      	; 0xf22 <lcd_wr_command+0x250>
     f26:	9c 83       	std	Y+4, r25	; 0x04
     f28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f2a:	8d 81       	ldd	r24, Y+5	; 0x05
     f2c:	9e 81       	ldd	r25, Y+6	; 0x06
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	9e 83       	std	Y+6, r25	; 0x06
     f32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f34:	8d 81       	ldd	r24, Y+5	; 0x05
     f36:	9e 81       	ldd	r25, Y+6	; 0x06
     f38:	00 97       	sbiw	r24, 0x00	; 0
     f3a:	69 f7       	brne	.-38     	; 0xf16 <lcd_wr_command+0x244>
     f3c:	14 c0       	rjmp	.+40     	; 0xf66 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f3e:	6f 81       	ldd	r22, Y+7	; 0x07
     f40:	78 85       	ldd	r23, Y+8	; 0x08
     f42:	89 85       	ldd	r24, Y+9	; 0x09
     f44:	9a 85       	ldd	r25, Y+10	; 0x0a
     f46:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	9e 83       	std	Y+6, r25	; 0x06
     f50:	8d 83       	std	Y+5, r24	; 0x05
     f52:	8d 81       	ldd	r24, Y+5	; 0x05
     f54:	9e 81       	ldd	r25, Y+6	; 0x06
     f56:	9a 83       	std	Y+2, r25	; 0x02
     f58:	89 83       	std	Y+1, r24	; 0x01
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	9a 81       	ldd	r25, Y+2	; 0x02
     f5e:	01 97       	sbiw	r24, 0x01	; 1
     f60:	f1 f7       	brne	.-4      	; 0xf5e <lcd_wr_command+0x28c>
     f62:	9a 83       	std	Y+2, r25	; 0x02
     f64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
     f66:	a8 e2       	ldi	r26, 0x28	; 40
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e8 e2       	ldi	r30, 0x28	; 40
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	8b 7f       	andi	r24, 0xFB	; 251
     f72:	8c 93       	st	X, r24
}
     f74:	6e 96       	adiw	r28, 0x1e	; 30
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	f8 94       	cli
     f7a:	de bf       	out	0x3e, r29	; 62
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	cd bf       	out	0x3d, r28	; 61
     f80:	cf 91       	pop	r28
     f82:	df 91       	pop	r29
     f84:	08 95       	ret

00000f86 <lcd_wr_char>:

/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
     f86:	df 93       	push	r29
     f88:	cf 93       	push	r28
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	6e 97       	sbiw	r28, 0x1e	; 30
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	f8 94       	cli
     f94:	de bf       	out	0x3e, r29	; 62
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	cd bf       	out	0x3d, r28	; 61
     f9a:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
     f9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f9e:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
     fa0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fa2:	80 7f       	andi	r24, 0xF0	; 240
     fa4:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     fa6:	a8 e2       	ldi	r26, 0x28	; 40
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e8 e2       	ldi	r30, 0x28	; 40
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	8f 70       	andi	r24, 0x0F	; 15
     fb2:	8c 93       	st	X, r24
	lcd_port |= temp;
     fb4:	a8 e2       	ldi	r26, 0x28	; 40
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e8 e2       	ldi	r30, 0x28	; 40
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	90 81       	ld	r25, Z
     fbe:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fc0:	89 2b       	or	r24, r25
     fc2:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
     fc4:	a8 e2       	ldi	r26, 0x28	; 40
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e8 e2       	ldi	r30, 0x28	; 40
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	81 60       	ori	r24, 0x01	; 1
     fd0:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     fd2:	a8 e2       	ldi	r26, 0x28	; 40
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e8 e2       	ldi	r30, 0x28	; 40
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	8d 7f       	andi	r24, 0xFD	; 253
     fde:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     fe0:	a8 e2       	ldi	r26, 0x28	; 40
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e8 e2       	ldi	r30, 0x28	; 40
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	84 60       	ori	r24, 0x04	; 4
     fec:	8c 93       	st	X, r24
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	a0 ea       	ldi	r26, 0xA0	; 160
     ff4:	b0 e4       	ldi	r27, 0x40	; 64
     ff6:	89 8f       	std	Y+25, r24	; 0x19
     ff8:	9a 8f       	std	Y+26, r25	; 0x1a
     ffa:	ab 8f       	std	Y+27, r26	; 0x1b
     ffc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ffe:	69 8d       	ldd	r22, Y+25	; 0x19
    1000:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1002:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1004:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1006:	2d ec       	ldi	r18, 0xCD	; 205
    1008:	3c ec       	ldi	r19, 0xCC	; 204
    100a:	4c e2       	ldi	r20, 0x2C	; 44
    100c:	55 e4       	ldi	r21, 0x45	; 69
    100e:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	8d 8b       	std	Y+21, r24	; 0x15
    1018:	9e 8b       	std	Y+22, r25	; 0x16
    101a:	af 8b       	std	Y+23, r26	; 0x17
    101c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    101e:	6d 89       	ldd	r22, Y+21	; 0x15
    1020:	7e 89       	ldd	r23, Y+22	; 0x16
    1022:	8f 89       	ldd	r24, Y+23	; 0x17
    1024:	98 8d       	ldd	r25, Y+24	; 0x18
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	40 e8       	ldi	r20, 0x80	; 128
    102c:	5f e3       	ldi	r21, 0x3F	; 63
    102e:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
    1032:	88 23       	and	r24, r24
    1034:	2c f4       	brge	.+10     	; 0x1040 <lcd_wr_char+0xba>
		__ticks = 1;
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	9c 8b       	std	Y+20, r25	; 0x14
    103c:	8b 8b       	std	Y+19, r24	; 0x13
    103e:	3f c0       	rjmp	.+126    	; 0x10be <lcd_wr_char+0x138>
	else if (__tmp > 65535)
    1040:	6d 89       	ldd	r22, Y+21	; 0x15
    1042:	7e 89       	ldd	r23, Y+22	; 0x16
    1044:	8f 89       	ldd	r24, Y+23	; 0x17
    1046:	98 8d       	ldd	r25, Y+24	; 0x18
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	3f ef       	ldi	r19, 0xFF	; 255
    104c:	4f e7       	ldi	r20, 0x7F	; 127
    104e:	57 e4       	ldi	r21, 0x47	; 71
    1050:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
    1054:	18 16       	cp	r1, r24
    1056:	4c f5       	brge	.+82     	; 0x10aa <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1058:	69 8d       	ldd	r22, Y+25	; 0x19
    105a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    105c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    105e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	40 e2       	ldi	r20, 0x20	; 32
    1066:	51 e4       	ldi	r21, 0x41	; 65
    1068:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	bc 01       	movw	r22, r24
    1072:	cd 01       	movw	r24, r26
    1074:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    1078:	dc 01       	movw	r26, r24
    107a:	cb 01       	movw	r24, r22
    107c:	9c 8b       	std	Y+20, r25	; 0x14
    107e:	8b 8b       	std	Y+19, r24	; 0x13
    1080:	0f c0       	rjmp	.+30     	; 0x10a0 <lcd_wr_char+0x11a>
    1082:	84 e1       	ldi	r24, 0x14	; 20
    1084:	91 e0       	ldi	r25, 0x01	; 1
    1086:	9a 8b       	std	Y+18, r25	; 0x12
    1088:	89 8b       	std	Y+17, r24	; 0x11
    108a:	89 89       	ldd	r24, Y+17	; 0x11
    108c:	9a 89       	ldd	r25, Y+18	; 0x12
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	f1 f7       	brne	.-4      	; 0x108e <lcd_wr_char+0x108>
    1092:	9a 8b       	std	Y+18, r25	; 0x12
    1094:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1096:	8b 89       	ldd	r24, Y+19	; 0x13
    1098:	9c 89       	ldd	r25, Y+20	; 0x14
    109a:	01 97       	sbiw	r24, 0x01	; 1
    109c:	9c 8b       	std	Y+20, r25	; 0x14
    109e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10a0:	8b 89       	ldd	r24, Y+19	; 0x13
    10a2:	9c 89       	ldd	r25, Y+20	; 0x14
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	69 f7       	brne	.-38     	; 0x1082 <lcd_wr_char+0xfc>
    10a8:	14 c0       	rjmp	.+40     	; 0x10d2 <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10aa:	6d 89       	ldd	r22, Y+21	; 0x15
    10ac:	7e 89       	ldd	r23, Y+22	; 0x16
    10ae:	8f 89       	ldd	r24, Y+23	; 0x17
    10b0:	98 8d       	ldd	r25, Y+24	; 0x18
    10b2:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    10b6:	dc 01       	movw	r26, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	9c 8b       	std	Y+20, r25	; 0x14
    10bc:	8b 8b       	std	Y+19, r24	; 0x13
    10be:	8b 89       	ldd	r24, Y+19	; 0x13
    10c0:	9c 89       	ldd	r25, Y+20	; 0x14
    10c2:	98 8b       	std	Y+16, r25	; 0x10
    10c4:	8f 87       	std	Y+15, r24	; 0x0f
    10c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    10c8:	98 89       	ldd	r25, Y+16	; 0x10
    10ca:	01 97       	sbiw	r24, 0x01	; 1
    10cc:	f1 f7       	brne	.-4      	; 0x10ca <lcd_wr_char+0x144>
    10ce:	98 8b       	std	Y+16, r25	; 0x10
    10d0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    10d2:	a8 e2       	ldi	r26, 0x28	; 40
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e8 e2       	ldi	r30, 0x28	; 40
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	8b 7f       	andi	r24, 0xFB	; 251
    10de:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    10e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10e2:	8f 70       	andi	r24, 0x0F	; 15
    10e4:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    10e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10e8:	82 95       	swap	r24
    10ea:	80 7f       	andi	r24, 0xF0	; 240
    10ec:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    10ee:	a8 e2       	ldi	r26, 0x28	; 40
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e8 e2       	ldi	r30, 0x28	; 40
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	8f 70       	andi	r24, 0x0F	; 15
    10fa:	8c 93       	st	X, r24
	lcd_port |= letter;
    10fc:	a8 e2       	ldi	r26, 0x28	; 40
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e8 e2       	ldi	r30, 0x28	; 40
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	90 81       	ld	r25, Z
    1106:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1108:	89 2b       	or	r24, r25
    110a:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    110c:	a8 e2       	ldi	r26, 0x28	; 40
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e8 e2       	ldi	r30, 0x28	; 40
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	81 60       	ori	r24, 0x01	; 1
    1118:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    111a:	a8 e2       	ldi	r26, 0x28	; 40
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e8 e2       	ldi	r30, 0x28	; 40
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	8d 7f       	andi	r24, 0xFD	; 253
    1126:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1128:	a8 e2       	ldi	r26, 0x28	; 40
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e8 e2       	ldi	r30, 0x28	; 40
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	84 60       	ori	r24, 0x04	; 4
    1134:	8c 93       	st	X, r24
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	a0 ea       	ldi	r26, 0xA0	; 160
    113c:	b0 e4       	ldi	r27, 0x40	; 64
    113e:	8b 87       	std	Y+11, r24	; 0x0b
    1140:	9c 87       	std	Y+12, r25	; 0x0c
    1142:	ad 87       	std	Y+13, r26	; 0x0d
    1144:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1146:	6b 85       	ldd	r22, Y+11	; 0x0b
    1148:	7c 85       	ldd	r23, Y+12	; 0x0c
    114a:	8d 85       	ldd	r24, Y+13	; 0x0d
    114c:	9e 85       	ldd	r25, Y+14	; 0x0e
    114e:	2d ec       	ldi	r18, 0xCD	; 205
    1150:	3c ec       	ldi	r19, 0xCC	; 204
    1152:	4c e2       	ldi	r20, 0x2C	; 44
    1154:	55 e4       	ldi	r21, 0x45	; 69
    1156:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	8f 83       	std	Y+7, r24	; 0x07
    1160:	98 87       	std	Y+8, r25	; 0x08
    1162:	a9 87       	std	Y+9, r26	; 0x09
    1164:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1166:	6f 81       	ldd	r22, Y+7	; 0x07
    1168:	78 85       	ldd	r23, Y+8	; 0x08
    116a:	89 85       	ldd	r24, Y+9	; 0x09
    116c:	9a 85       	ldd	r25, Y+10	; 0x0a
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	40 e8       	ldi	r20, 0x80	; 128
    1174:	5f e3       	ldi	r21, 0x3F	; 63
    1176:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
    117a:	88 23       	and	r24, r24
    117c:	2c f4       	brge	.+10     	; 0x1188 <lcd_wr_char+0x202>
		__ticks = 1;
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	9e 83       	std	Y+6, r25	; 0x06
    1184:	8d 83       	std	Y+5, r24	; 0x05
    1186:	3f c0       	rjmp	.+126    	; 0x1206 <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    1188:	6f 81       	ldd	r22, Y+7	; 0x07
    118a:	78 85       	ldd	r23, Y+8	; 0x08
    118c:	89 85       	ldd	r24, Y+9	; 0x09
    118e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	3f ef       	ldi	r19, 0xFF	; 255
    1194:	4f e7       	ldi	r20, 0x7F	; 127
    1196:	57 e4       	ldi	r21, 0x47	; 71
    1198:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
    119c:	18 16       	cp	r1, r24
    119e:	4c f5       	brge	.+82     	; 0x11f2 <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    11a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    11a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	40 e2       	ldi	r20, 0x20	; 32
    11ae:	51 e4       	ldi	r21, 0x41	; 65
    11b0:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	bc 01       	movw	r22, r24
    11ba:	cd 01       	movw	r24, r26
    11bc:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    11c0:	dc 01       	movw	r26, r24
    11c2:	cb 01       	movw	r24, r22
    11c4:	9e 83       	std	Y+6, r25	; 0x06
    11c6:	8d 83       	std	Y+5, r24	; 0x05
    11c8:	0f c0       	rjmp	.+30     	; 0x11e8 <lcd_wr_char+0x262>
    11ca:	84 e1       	ldi	r24, 0x14	; 20
    11cc:	91 e0       	ldi	r25, 0x01	; 1
    11ce:	9c 83       	std	Y+4, r25	; 0x04
    11d0:	8b 83       	std	Y+3, r24	; 0x03
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	9c 81       	ldd	r25, Y+4	; 0x04
    11d6:	01 97       	sbiw	r24, 0x01	; 1
    11d8:	f1 f7       	brne	.-4      	; 0x11d6 <lcd_wr_char+0x250>
    11da:	9c 83       	std	Y+4, r25	; 0x04
    11dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11de:	8d 81       	ldd	r24, Y+5	; 0x05
    11e0:	9e 81       	ldd	r25, Y+6	; 0x06
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	9e 83       	std	Y+6, r25	; 0x06
    11e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ea:	9e 81       	ldd	r25, Y+6	; 0x06
    11ec:	00 97       	sbiw	r24, 0x00	; 0
    11ee:	69 f7       	brne	.-38     	; 0x11ca <lcd_wr_char+0x244>
    11f0:	14 c0       	rjmp	.+40     	; 0x121a <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11f2:	6f 81       	ldd	r22, Y+7	; 0x07
    11f4:	78 85       	ldd	r23, Y+8	; 0x08
    11f6:	89 85       	ldd	r24, Y+9	; 0x09
    11f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11fa:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    11fe:	dc 01       	movw	r26, r24
    1200:	cb 01       	movw	r24, r22
    1202:	9e 83       	std	Y+6, r25	; 0x06
    1204:	8d 83       	std	Y+5, r24	; 0x05
    1206:	8d 81       	ldd	r24, Y+5	; 0x05
    1208:	9e 81       	ldd	r25, Y+6	; 0x06
    120a:	9a 83       	std	Y+2, r25	; 0x02
    120c:	89 83       	std	Y+1, r24	; 0x01
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	9a 81       	ldd	r25, Y+2	; 0x02
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	f1 f7       	brne	.-4      	; 0x1212 <lcd_wr_char+0x28c>
    1216:	9a 83       	std	Y+2, r25	; 0x02
    1218:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    121a:	a8 e2       	ldi	r26, 0x28	; 40
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e8 e2       	ldi	r30, 0x28	; 40
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	8b 7f       	andi	r24, 0xFB	; 251
    1226:	8c 93       	st	X, r24
}
    1228:	6e 96       	adiw	r28, 0x1e	; 30
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	cd bf       	out	0x3d, r28	; 61
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <lcd_home>:


void lcd_home()
{
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    1242:	80 e8       	ldi	r24, 0x80	; 128
    1244:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
}
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	0f 92       	push	r0
    1254:	0f 92       	push	r0
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	9a 83       	std	Y+2, r25	; 0x02
    125c:	89 83       	std	Y+1, r24	; 0x01
    125e:	0a c0       	rjmp	.+20     	; 0x1274 <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    1260:	e9 81       	ldd	r30, Y+1	; 0x01
    1262:	fa 81       	ldd	r31, Y+2	; 0x02
    1264:	80 81       	ld	r24, Z
    1266:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
		str++;
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	9a 81       	ldd	r25, Y+2	; 0x02
    126e:	01 96       	adiw	r24, 0x01	; 1
    1270:	9a 83       	std	Y+2, r25	; 0x02
    1272:	89 83       	std	Y+1, r24	; 0x01


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
    1274:	e9 81       	ldd	r30, Y+1	; 0x01
    1276:	fa 81       	ldd	r31, Y+2	; 0x02
    1278:	80 81       	ld	r24, Z
    127a:	88 23       	and	r24, r24
    127c:	89 f7       	brne	.-30     	; 0x1260 <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	08 95       	ret

00001288 <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
    1288:	df 93       	push	r29
    128a:	cf 93       	push	r28
    128c:	00 d0       	rcall	.+0      	; 0x128e <lcd_cursor+0x6>
    128e:	0f 92       	push	r0
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
    1294:	89 83       	std	Y+1, r24	; 0x01
    1296:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	3c 83       	std	Y+4, r19	; 0x04
    12a0:	2b 83       	std	Y+3, r18	; 0x03
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	9c 81       	ldd	r25, Y+4	; 0x04
    12a6:	82 30       	cpi	r24, 0x02	; 2
    12a8:	91 05       	cpc	r25, r1
    12aa:	d9 f0       	breq	.+54     	; 0x12e2 <lcd_cursor+0x5a>
    12ac:	2b 81       	ldd	r18, Y+3	; 0x03
    12ae:	3c 81       	ldd	r19, Y+4	; 0x04
    12b0:	23 30       	cpi	r18, 0x03	; 3
    12b2:	31 05       	cpc	r19, r1
    12b4:	34 f4       	brge	.+12     	; 0x12c2 <lcd_cursor+0x3a>
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ba:	81 30       	cpi	r24, 0x01	; 1
    12bc:	91 05       	cpc	r25, r1
    12be:	61 f0       	breq	.+24     	; 0x12d8 <lcd_cursor+0x50>
    12c0:	1e c0       	rjmp	.+60     	; 0x12fe <lcd_cursor+0x76>
    12c2:	2b 81       	ldd	r18, Y+3	; 0x03
    12c4:	3c 81       	ldd	r19, Y+4	; 0x04
    12c6:	23 30       	cpi	r18, 0x03	; 3
    12c8:	31 05       	cpc	r19, r1
    12ca:	81 f0       	breq	.+32     	; 0x12ec <lcd_cursor+0x64>
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	9c 81       	ldd	r25, Y+4	; 0x04
    12d0:	84 30       	cpi	r24, 0x04	; 4
    12d2:	91 05       	cpc	r25, r1
    12d4:	81 f0       	breq	.+32     	; 0x12f6 <lcd_cursor+0x6e>
    12d6:	13 c0       	rjmp	.+38     	; 0x12fe <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	81 58       	subi	r24, 0x81	; 129
    12dc:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
    12e0:	0e c0       	rjmp	.+28     	; 0x12fe <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	81 54       	subi	r24, 0x41	; 65
    12e6:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
    12ea:	09 c0       	rjmp	.+18     	; 0x12fe <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	8d 56       	subi	r24, 0x6D	; 109
    12f0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
    12f4:	04 c0       	rjmp	.+8      	; 0x12fe <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	8d 52       	subi	r24, 0x2D	; 45
    12fa:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
		default: break;
	}
}
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <lcd_print>:

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
    1314:	27 97       	sbiw	r28, 0x07	; 7
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	f8 94       	cli
    131a:	de bf       	out	0x3e, r29	; 62
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	cd bf       	out	0x3d, r28	; 61
    1320:	8a 83       	std	Y+2, r24	; 0x02
    1322:	6b 83       	std	Y+3, r22	; 0x03
    1324:	5d 83       	std	Y+5, r21	; 0x05
    1326:	4c 83       	std	Y+4, r20	; 0x04
    1328:	3f 83       	std	Y+7, r19	; 0x07
    132a:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    132c:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	88 23       	and	r24, r24
    1332:	19 f0       	breq	.+6      	; 0x133a <lcd_print+0x2e>
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	88 23       	and	r24, r24
    1338:	19 f4       	brne	.+6      	; 0x1340 <lcd_print+0x34>
	{
		lcd_home();
    133a:	0e 94 1d 09 	call	0x123a	; 0x123a <lcd_home>
    133e:	04 c0       	rjmp	.+8      	; 0x1348 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	6b 81       	ldd	r22, Y+3	; 0x03
    1344:	0e 94 44 09 	call	0x1288	; 0x1288 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    1348:	8e 81       	ldd	r24, Y+6	; 0x06
    134a:	9f 81       	ldd	r25, Y+7	; 0x07
    134c:	85 30       	cpi	r24, 0x05	; 5
    134e:	91 05       	cpc	r25, r1
    1350:	19 f0       	breq	.+6      	; 0x1358 <lcd_print+0x4c>
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	a9 f4       	brne	.+42     	; 0x1382 <lcd_print+0x76>
	{
		million=value/10000+48;
    1358:	8c 81       	ldd	r24, Y+4	; 0x04
    135a:	9d 81       	ldd	r25, Y+5	; 0x05
    135c:	20 e1       	ldi	r18, 0x10	; 16
    135e:	37 e2       	ldi	r19, 0x27	; 39
    1360:	b9 01       	movw	r22, r18
    1362:	0e 94 04 2c 	call	0x5808	; 0x5808 <__udivmodhi4>
    1366:	cb 01       	movw	r24, r22
    1368:	c0 96       	adiw	r24, 0x30	; 48
    136a:	90 93 18 03 	sts	0x0318, r25
    136e:	80 93 17 03 	sts	0x0317, r24
		lcd_wr_char(million);
    1372:	80 91 17 03 	lds	r24, 0x0317
    1376:	90 91 18 03 	lds	r25, 0x0318
    137a:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
		flag=1;
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    1382:	8e 81       	ldd	r24, Y+6	; 0x06
    1384:	9f 81       	ldd	r25, Y+7	; 0x07
    1386:	84 30       	cpi	r24, 0x04	; 4
    1388:	91 05       	cpc	r25, r1
    138a:	19 f0       	breq	.+6      	; 0x1392 <lcd_print+0x86>
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	11 f5       	brne	.+68     	; 0x13d6 <lcd_print+0xca>
	{
		temp = value/1000;
    1392:	8c 81       	ldd	r24, Y+4	; 0x04
    1394:	9d 81       	ldd	r25, Y+5	; 0x05
    1396:	28 ee       	ldi	r18, 0xE8	; 232
    1398:	33 e0       	ldi	r19, 0x03	; 3
    139a:	b9 01       	movw	r22, r18
    139c:	0e 94 04 2c 	call	0x5808	; 0x5808 <__udivmodhi4>
    13a0:	cb 01       	movw	r24, r22
    13a2:	90 93 20 03 	sts	0x0320, r25
    13a6:	80 93 1f 03 	sts	0x031F, r24
		thousand = temp%10 + 48;
    13aa:	80 91 1f 03 	lds	r24, 0x031F
    13ae:	90 91 20 03 	lds	r25, 0x0320
    13b2:	2a e0       	ldi	r18, 0x0A	; 10
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	b9 01       	movw	r22, r18
    13b8:	0e 94 04 2c 	call	0x5808	; 0x5808 <__udivmodhi4>
    13bc:	c0 96       	adiw	r24, 0x30	; 48
    13be:	90 93 50 03 	sts	0x0350, r25
    13c2:	80 93 4f 03 	sts	0x034F, r24
		lcd_wr_char(thousand);
    13c6:	80 91 4f 03 	lds	r24, 0x034F
    13ca:	90 91 50 03 	lds	r25, 0x0350
    13ce:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
		flag=1;
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    13d6:	8e 81       	ldd	r24, Y+6	; 0x06
    13d8:	9f 81       	ldd	r25, Y+7	; 0x07
    13da:	83 30       	cpi	r24, 0x03	; 3
    13dc:	91 05       	cpc	r25, r1
    13de:	19 f0       	breq	.+6      	; 0x13e6 <lcd_print+0xda>
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	81 30       	cpi	r24, 0x01	; 1
    13e4:	11 f5       	brne	.+68     	; 0x142a <lcd_print+0x11e>
	{
		temp = value/100;
    13e6:	8c 81       	ldd	r24, Y+4	; 0x04
    13e8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ea:	24 e6       	ldi	r18, 0x64	; 100
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	b9 01       	movw	r22, r18
    13f0:	0e 94 04 2c 	call	0x5808	; 0x5808 <__udivmodhi4>
    13f4:	cb 01       	movw	r24, r22
    13f6:	90 93 20 03 	sts	0x0320, r25
    13fa:	80 93 1f 03 	sts	0x031F, r24
		hundred = temp%10 + 48;
    13fe:	80 91 1f 03 	lds	r24, 0x031F
    1402:	90 91 20 03 	lds	r25, 0x0320
    1406:	2a e0       	ldi	r18, 0x0A	; 10
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	b9 01       	movw	r22, r18
    140c:	0e 94 04 2c 	call	0x5808	; 0x5808 <__udivmodhi4>
    1410:	c0 96       	adiw	r24, 0x30	; 48
    1412:	90 93 44 03 	sts	0x0344, r25
    1416:	80 93 43 03 	sts	0x0343, r24
		lcd_wr_char(hundred);
    141a:	80 91 43 03 	lds	r24, 0x0343
    141e:	90 91 44 03 	lds	r25, 0x0344
    1422:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
		flag=1;
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    142a:	8e 81       	ldd	r24, Y+6	; 0x06
    142c:	9f 81       	ldd	r25, Y+7	; 0x07
    142e:	82 30       	cpi	r24, 0x02	; 2
    1430:	91 05       	cpc	r25, r1
    1432:	19 f0       	breq	.+6      	; 0x143a <lcd_print+0x12e>
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	81 30       	cpi	r24, 0x01	; 1
    1438:	11 f5       	brne	.+68     	; 0x147e <lcd_print+0x172>
	{
		temp = value/10;
    143a:	8c 81       	ldd	r24, Y+4	; 0x04
    143c:	9d 81       	ldd	r25, Y+5	; 0x05
    143e:	2a e0       	ldi	r18, 0x0A	; 10
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	b9 01       	movw	r22, r18
    1444:	0e 94 04 2c 	call	0x5808	; 0x5808 <__udivmodhi4>
    1448:	cb 01       	movw	r24, r22
    144a:	90 93 20 03 	sts	0x0320, r25
    144e:	80 93 1f 03 	sts	0x031F, r24
		tens = temp%10 + 48;
    1452:	80 91 1f 03 	lds	r24, 0x031F
    1456:	90 91 20 03 	lds	r25, 0x0320
    145a:	2a e0       	ldi	r18, 0x0A	; 10
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	b9 01       	movw	r22, r18
    1460:	0e 94 04 2c 	call	0x5808	; 0x5808 <__udivmodhi4>
    1464:	c0 96       	adiw	r24, 0x30	; 48
    1466:	90 93 34 03 	sts	0x0334, r25
    146a:	80 93 33 03 	sts	0x0333, r24
		lcd_wr_char(tens);
    146e:	80 91 33 03 	lds	r24, 0x0333
    1472:	90 91 34 03 	lds	r25, 0x0334
    1476:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
		flag=1;
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    147e:	8e 81       	ldd	r24, Y+6	; 0x06
    1480:	9f 81       	ldd	r25, Y+7	; 0x07
    1482:	81 30       	cpi	r24, 0x01	; 1
    1484:	91 05       	cpc	r25, r1
    1486:	19 f0       	breq	.+6      	; 0x148e <lcd_print+0x182>
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	81 30       	cpi	r24, 0x01	; 1
    148c:	91 f4       	brne	.+36     	; 0x14b2 <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    148e:	8c 81       	ldd	r24, Y+4	; 0x04
    1490:	9d 81       	ldd	r25, Y+5	; 0x05
    1492:	2a e0       	ldi	r18, 0x0A	; 10
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	b9 01       	movw	r22, r18
    1498:	0e 94 04 2c 	call	0x5808	; 0x5808 <__udivmodhi4>
    149c:	c0 96       	adiw	r24, 0x30	; 48
    149e:	90 93 4e 03 	sts	0x034E, r25
    14a2:	80 93 4d 03 	sts	0x034D, r24
		lcd_wr_char(unit);
    14a6:	80 91 4d 03 	lds	r24, 0x034D
    14aa:	90 91 4e 03 	lds	r25, 0x034E
    14ae:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
	}
	if(digits>5)
    14b2:	8e 81       	ldd	r24, Y+6	; 0x06
    14b4:	9f 81       	ldd	r25, Y+7	; 0x07
    14b6:	86 30       	cpi	r24, 0x06	; 6
    14b8:	91 05       	cpc	r25, r1
    14ba:	1c f0       	brlt	.+6      	; 0x14c2 <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    14bc:	85 e4       	ldi	r24, 0x45	; 69
    14be:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
	}
	
}
    14c2:	27 96       	adiw	r28, 0x07	; 7
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	f8 94       	cli
    14c8:	de bf       	out	0x3e, r29	; 62
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	cd bf       	out	0x3d, r28	; 61
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	08 95       	ret

000014d4 <lcd_port_config>:
		

void lcd_port_config (void)
	{
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
	DDRC = DDRC | 0xF7; 	//all the LCD pin's direction set as output
    14dc:	a7 e2       	ldi	r26, 0x27	; 39
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e7 e2       	ldi	r30, 0x27	; 39
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	87 6f       	ori	r24, 0xF7	; 247
    14e8:	8c 93       	st	X, r24
	PORTC = PORTC & 0x80; 	// all the LCD pins are set to logic 0 except PORTC 7
    14ea:	a8 e2       	ldi	r26, 0x28	; 40
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e8 e2       	ldi	r30, 0x28	; 40
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	80 78       	andi	r24, 0x80	; 128
    14f6:	8c 93       	st	X, r24
	}
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
	{
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
	DDRF = 0x00; 
    1506:	e0 e3       	ldi	r30, 0x30	; 48
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	10 82       	st	Z, r1
	PORTF = 0x00;
    150c:	e1 e3       	ldi	r30, 0x31	; 49
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	10 82       	st	Z, r1
	DDRK = 0x00;
    1512:	e7 e0       	ldi	r30, 0x07	; 7
    1514:	f1 e0       	ldi	r31, 0x01	; 1
    1516:	10 82       	st	Z, r1
	PORTK = 0x00;
    1518:	e8 e0       	ldi	r30, 0x08	; 8
    151a:	f1 e0       	ldi	r31, 0x01	; 1
    151c:	10 82       	st	Z, r1
	}
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <port_init>:

void port_init()
	{
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
	lcd_port_config();
    152c:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <lcd_port_config>
	adc_pin_config();	
    1530:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <adc_pin_config>
	}
    1534:	cf 91       	pop	r28
    1536:	df 91       	pop	r29
    1538:	08 95       	ret

0000153a <adc_init>:
	
void adc_init()
	{
    153a:	df 93       	push	r29
    153c:	cf 93       	push	r28
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
    1542:	ea e7       	ldi	r30, 0x7A	; 122
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
    1548:	eb e7       	ldi	r30, 0x7B	; 123
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    154e:	ec e7       	ldi	r30, 0x7C	; 124
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 e2       	ldi	r24, 0x20	; 32
    1554:	80 83       	st	Z, r24
	ACSR = 0x80;
    1556:	e0 e5       	ldi	r30, 0x50	; 80
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 e8       	ldi	r24, 0x80	; 128
    155c:	80 83       	st	Z, r24
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    155e:	ea e7       	ldi	r30, 0x7A	; 122
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	86 e8       	ldi	r24, 0x86	; 134
    1564:	80 83       	st	Z, r24
	}
    1566:	cf 91       	pop	r28
    1568:	df 91       	pop	r29
    156a:	08 95       	ret

0000156c <init_devices>:

void init_devices (void)
	{
    156c:	df 93       	push	r29
    156e:	cf 93       	push	r28
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupts
    1574:	f8 94       	cli
	port_init();
    1576:	0e 94 92 0a 	call	0x1524	; 0x1524 <port_init>
	adc_init();
    157a:	0e 94 9d 0a 	call	0x153a	; 0x153a <adc_init>
	sei(); //Enables the global interrupts
    157e:	78 94       	sei
	}
    1580:	cf 91       	pop	r28
    1582:	df 91       	pop	r29
    1584:	08 95       	ret

00001586 <ADC_Conversion>:
	
unsigned char ADC_Conversion(unsigned char Ch)
	{
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	0f 92       	push	r0
    158c:	0f 92       	push	r0
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
    1592:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(Ch>7)
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	88 30       	cpi	r24, 0x08	; 8
    1598:	20 f0       	brcs	.+8      	; 0x15a2 <ADC_Conversion+0x1c>
		{
		ADCSRB = 0x08;			// select the ch. > 7
    159a:	eb e7       	ldi	r30, 0x7B	; 123
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	88 e0       	ldi	r24, 0x08	; 8
    15a0:	80 83       	st	Z, r24
		}
	Ch = Ch & 0x07;  			
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	87 70       	andi	r24, 0x07	; 7
    15a6:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;	   		//do not disturb the left adjustment
    15a8:	ec e7       	ldi	r30, 0x7C	; 124
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	80 62       	ori	r24, 0x20	; 32
    15b0:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
    15b2:	aa e7       	ldi	r26, 0x7A	; 122
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	ea e7       	ldi	r30, 0x7A	; 122
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	80 64       	ori	r24, 0x40	; 64
    15be:	8c 93       	st	X, r24
	while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
    15c0:	ea e7       	ldi	r30, 0x7A	; 122
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	88 2f       	mov	r24, r24
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	80 71       	andi	r24, 0x10	; 16
    15cc:	90 70       	andi	r25, 0x00	; 0
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	b9 f3       	breq	.-18     	; 0x15c0 <ADC_Conversion+0x3a>
	a=ADCH;
    15d2:	e9 e7       	ldi	r30, 0x79	; 121
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10; 		//clear ADIF (ADC Interrupt Flag) by writing 1 to it
    15da:	aa e7       	ldi	r26, 0x7A	; 122
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	ea e7       	ldi	r30, 0x7A	; 122
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	80 61       	ori	r24, 0x10	; 16
    15e6:	8c 93       	st	X, r24
	ADCSRB = 0x00;
    15e8:	eb e7       	ldi	r30, 0x7B	; 123
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	10 82       	st	Z, r1
	return a;
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
	}
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	cf 91       	pop	r28
    15f6:	df 91       	pop	r29
    15f8:	08 95       	ret

000015fa <Sharp_GP2D12_estimation>:
	
unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
	{
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	27 97       	sbiw	r28, 0x07	; 7
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	f8 94       	cli
    1608:	de bf       	out	0x3e, r29	; 62
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	cd bf       	out	0x3d, r28	; 61
    160e:	8f 83       	std	Y+7, r24	; 0x07
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
    1610:	8f 81       	ldd	r24, Y+7	; 0x07
    1612:	88 2f       	mov	r24, r24
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	a0 e0       	ldi	r26, 0x00	; 0
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	bc 01       	movw	r22, r24
    161c:	cd 01       	movw	r24, r26
    161e:	0e 94 96 29 	call	0x532c	; 0x532c <__floatunsisf>
    1622:	dc 01       	movw	r26, r24
    1624:	cb 01       	movw	r24, r22
    1626:	bc 01       	movw	r22, r24
    1628:	cd 01       	movw	r24, r26
    162a:	2f ee       	ldi	r18, 0xEF	; 239
    162c:	39 ec       	ldi	r19, 0xC9	; 201
    162e:	43 e9       	ldi	r20, 0x93	; 147
    1630:	5f e3       	ldi	r21, 0x3F	; 63
    1632:	0e 94 4f 2c 	call	0x589e	; 0x589e <pow>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	9c 01       	movw	r18, r24
    163c:	ad 01       	movw	r20, r26
    163e:	60 e0       	ldi	r22, 0x00	; 0
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	80 e8       	ldi	r24, 0x80	; 128
    1644:	9f e3       	ldi	r25, 0x3F	; 63
    1646:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <__divsf3>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	bc 01       	movw	r22, r24
    1650:	cd 01       	movw	r24, r26
    1652:	2a e9       	ldi	r18, 0x9A	; 154
    1654:	39 ef       	ldi	r19, 0xF9	; 249
    1656:	4e e2       	ldi	r20, 0x2E	; 46
    1658:	55 e4       	ldi	r21, 0x45	; 69
    165a:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	bc 01       	movw	r22, r24
    1664:	cd 01       	movw	r24, r26
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	40 e2       	ldi	r20, 0x20	; 32
    166c:	51 e4       	ldi	r21, 0x41	; 65
    166e:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    1672:	dc 01       	movw	r26, r24
    1674:	cb 01       	movw	r24, r22
    1676:	bc 01       	movw	r22, r24
    1678:	cd 01       	movw	r24, r26
    167a:	0e 94 42 29 	call	0x5284	; 0x5284 <__fixsfsi>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	aa 27       	eor	r26, r26
    1684:	97 fd       	sbrc	r25, 7
    1686:	a0 95       	com	r26
    1688:	ba 2f       	mov	r27, r26
    168a:	bc 01       	movw	r22, r24
    168c:	cd 01       	movw	r24, r26
    168e:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <__floatsisf>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	8b 83       	std	Y+3, r24	; 0x03
    1698:	9c 83       	std	Y+4, r25	; 0x04
    169a:	ad 83       	std	Y+5, r26	; 0x05
    169c:	be 83       	std	Y+6, r27	; 0x06
	distanceInt = (int)distance;
    169e:	6b 81       	ldd	r22, Y+3	; 0x03
    16a0:	7c 81       	ldd	r23, Y+4	; 0x04
    16a2:	8d 81       	ldd	r24, Y+5	; 0x05
    16a4:	9e 81       	ldd	r25, Y+6	; 0x06
    16a6:	0e 94 42 29 	call	0x5284	; 0x5284 <__fixsfsi>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	9a 83       	std	Y+2, r25	; 0x02
    16b0:	89 83       	std	Y+1, r24	; 0x01
	if(distanceInt>800)
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	9a 81       	ldd	r25, Y+2	; 0x02
    16b6:	23 e0       	ldi	r18, 0x03	; 3
    16b8:	81 32       	cpi	r24, 0x21	; 33
    16ba:	92 07       	cpc	r25, r18
    16bc:	20 f0       	brcs	.+8      	; 0x16c6 <Sharp_GP2D12_estimation+0xcc>
		{
		distanceInt=800;
    16be:	80 e2       	ldi	r24, 0x20	; 32
    16c0:	93 e0       	ldi	r25, 0x03	; 3
    16c2:	9a 83       	std	Y+2, r25	; 0x02
    16c4:	89 83       	std	Y+1, r24	; 0x01
		}
	return distanceInt;
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    16ca:	27 96       	adiw	r28, 0x07	; 7
    16cc:	0f b6       	in	r0, 0x3f	; 63
    16ce:	f8 94       	cli
    16d0:	de bf       	out	0x3e, r29	; 62
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	cd bf       	out	0x3d, r28	; 61
    16d6:	cf 91       	pop	r28
    16d8:	df 91       	pop	r29
    16da:	08 95       	ret

000016dc <INIT_PORTS>:


void INIT_PORTS()
{
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62

	DDRA=0x0F; // Port A treated as Output
    16e4:	e1 e2       	ldi	r30, 0x21	; 33
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	8f e0       	ldi	r24, 0x0F	; 15
    16ea:	80 83       	st	Z, r24
	PORTA = 0x00; // Initialized
    16ec:	e2 e2       	ldi	r30, 0x22	; 34
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	10 82       	st	Z, r1
	DDRL = 0x18;  // Port L treated as output
    16f2:	ea e0       	ldi	r30, 0x0A	; 10
    16f4:	f1 e0       	ldi	r31, 0x01	; 1
    16f6:	88 e1       	ldi	r24, 0x18	; 24
    16f8:	80 83       	st	Z, r24
	PORTL = 0x18; //Iitialized
    16fa:	eb e0       	ldi	r30, 0x0B	; 11
    16fc:	f1 e0       	ldi	r31, 0x01	; 1
    16fe:	88 e1       	ldi	r24, 0x18	; 24
    1700:	80 83       	st	Z, r24

	DDRE=0x00;
    1702:	ed e2       	ldi	r30, 0x2D	; 45
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	10 82       	st	Z, r1
	PORTE=0x30;
    1708:	ee e2       	ldi	r30, 0x2E	; 46
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 e3       	ldi	r24, 0x30	; 48
    170e:	80 83       	st	Z, r24

}
    1710:	cf 91       	pop	r28
    1712:	df 91       	pop	r29
    1714:	08 95       	ret

00001716 <timer5_init>:

void timer5_init()
{
    1716:	df 93       	push	r29
    1718:	cf 93       	push	r28
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62
	
	TCCR5B = 0b00001011;  //stop
    171e:	e1 e2       	ldi	r30, 0x21	; 33
    1720:	f1 e0       	ldi	r31, 0x01	; 1
    1722:	8b e0       	ldi	r24, 0x0B	; 11
    1724:	80 83       	st	Z, r24
	TCCR5A = 0b10101001;  
    1726:	e0 e2       	ldi	r30, 0x20	; 32
    1728:	f1 e0       	ldi	r31, 0x01	; 1
    172a:	89 ea       	ldi	r24, 0xA9	; 169
    172c:	80 83       	st	Z, r24
      /*{ COM5A1=1, COM5A0=0; 
            COM5B1=1, COM5B0=0; 
	       COM5C1=0 COM5C0=0}	  
     	 {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	OCR5AH = 0x00;
    172e:	e9 e2       	ldi	r30, 0x29	; 41
    1730:	f1 e0       	ldi	r31, 0x01	; 1
    1732:	10 82       	st	Z, r1
	OCR5AL = 0x00;
    1734:	e8 e2       	ldi	r30, 0x28	; 40
    1736:	f1 e0       	ldi	r31, 0x01	; 1
    1738:	10 82       	st	Z, r1
	OCR5BH = 0x00;
    173a:	eb e2       	ldi	r30, 0x2B	; 43
    173c:	f1 e0       	ldi	r31, 0x01	; 1
    173e:	10 82       	st	Z, r1
	OCR5BL = 0x00;
    1740:	ea e2       	ldi	r30, 0x2A	; 42
    1742:	f1 e0       	ldi	r31, 0x01	; 1
    1744:	10 82       	st	Z, r1
	OCR5CH = 0x00;
    1746:	ed e2       	ldi	r30, 0x2D	; 45
    1748:	f1 e0       	ldi	r31, 0x01	; 1
    174a:	10 82       	st	Z, r1
	OCR5CL = 0x00;
    174c:	ec e2       	ldi	r30, 0x2C	; 44
    174e:	f1 e0       	ldi	r31, 0x01	; 1
    1750:	10 82       	st	Z, r1
}
    1752:	cf 91       	pop	r28
    1754:	df 91       	pop	r29
    1756:	08 95       	ret

00001758 <Left_Speed>:

void Left_Speed(unsigned char val){
    1758:	df 93       	push	r29
    175a:	cf 93       	push	r28
    175c:	0f 92       	push	r0
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
    1762:	89 83       	std	Y+1, r24	; 0x01
	OCR5AL = val;
    1764:	e8 e2       	ldi	r30, 0x28	; 40
    1766:	f1 e0       	ldi	r31, 0x01	; 1
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	80 83       	st	Z, r24
}
    176c:	0f 90       	pop	r0
    176e:	cf 91       	pop	r28
    1770:	df 91       	pop	r29
    1772:	08 95       	ret

00001774 <Right_Speed>:

void Right_Speed(unsigned char val){
    1774:	df 93       	push	r29
    1776:	cf 93       	push	r28
    1778:	0f 92       	push	r0
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
    177e:	89 83       	std	Y+1, r24	; 0x01
	OCR5BL = val;
    1780:	ea e2       	ldi	r30, 0x2A	; 42
    1782:	f1 e0       	ldi	r31, 0x01	; 1
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	80 83       	st	Z, r24
}
    1788:	0f 90       	pop	r0
    178a:	cf 91       	pop	r28
    178c:	df 91       	pop	r29
    178e:	08 95       	ret

00001790 <INIT_INTERRUPT>:

void INIT_INTERRUPT()
{
    1790:	df 93       	push	r29
    1792:	cf 93       	push	r28
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
	cli();
    1798:	f8 94       	cli
	EICRB=0x0A;
    179a:	ea e6       	ldi	r30, 0x6A	; 106
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	8a e0       	ldi	r24, 0x0A	; 10
    17a0:	80 83       	st	Z, r24
	EIMSK=0x30;
    17a2:	ed e3       	ldi	r30, 0x3D	; 61
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 e3       	ldi	r24, 0x30	; 48
    17a8:	80 83       	st	Z, r24
	sei();
    17aa:	78 94       	sei
}
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	08 95       	ret

000017b2 <FORWARD>:


void FORWARD(void)
{
    17b2:	df 93       	push	r29
    17b4:	cf 93       	push	r28
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x06;
    17ba:	e2 e2       	ldi	r30, 0x22	; 34
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	86 e0       	ldi	r24, 0x06	; 6
    17c0:	80 83       	st	Z, r24
}
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	08 95       	ret

000017c8 <REVERSE>:

void REVERSE(void)
{
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x09;
    17d0:	e2 e2       	ldi	r30, 0x22	; 34
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	89 e0       	ldi	r24, 0x09	; 9
    17d6:	80 83       	st	Z, r24
}
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	08 95       	ret

000017de <LEFT_TURN>:

void LEFT_TURN(void)
{
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x05;
    17e6:	e2 e2       	ldi	r30, 0x22	; 34
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	85 e0       	ldi	r24, 0x05	; 5
    17ec:	80 83       	st	Z, r24
}
    17ee:	cf 91       	pop	r28
    17f0:	df 91       	pop	r29
    17f2:	08 95       	ret

000017f4 <LEFT_TURN_SOFT>:

void LEFT_TURN_SOFT(void)
{
    17f4:	df 93       	push	r29
    17f6:	cf 93       	push	r28
    17f8:	cd b7       	in	r28, 0x3d	; 61
    17fa:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x04;
    17fc:	e2 e2       	ldi	r30, 0x22	; 34
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	84 e0       	ldi	r24, 0x04	; 4
    1802:	80 83       	st	Z, r24
}
    1804:	cf 91       	pop	r28
    1806:	df 91       	pop	r29
    1808:	08 95       	ret

0000180a <LEFT_REVERSE>:
void LEFT_REVERSE(void)
{
    180a:	df 93       	push	r29
    180c:	cf 93       	push	r28
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x01;
    1812:	e2 e2       	ldi	r30, 0x22	; 34
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	80 83       	st	Z, r24
}
    181a:	cf 91       	pop	r28
    181c:	df 91       	pop	r29
    181e:	08 95       	ret

00001820 <RIGHT_TURN>:
{
	PORTA = 0x0A;
}*/

void RIGHT_TURN(void)
{
    1820:	df 93       	push	r29
    1822:	cf 93       	push	r28
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x0A;
    1828:	e2 e2       	ldi	r30, 0x22	; 34
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	8a e0       	ldi	r24, 0x0A	; 10
    182e:	80 83       	st	Z, r24
}
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <RIGHT_TURN_SOFT>:

void RIGHT_TURN_SOFT(void)
{
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	cd b7       	in	r28, 0x3d	; 61
    183c:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x02;
    183e:	e2 e2       	ldi	r30, 0x22	; 34
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	82 e0       	ldi	r24, 0x02	; 2
    1844:	80 83       	st	Z, r24
}
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	08 95       	ret

0000184c <RIGHT_REVERSE>:
void RIGHT_REVERSE(void)
{
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x08;
    1854:	e2 e2       	ldi	r30, 0x22	; 34
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	88 e0       	ldi	r24, 0x08	; 8
    185a:	80 83       	st	Z, r24
}
    185c:	cf 91       	pop	r28
    185e:	df 91       	pop	r29
    1860:	08 95       	ret

00001862 <STOP>:


void STOP(void)
{
    1862:	df 93       	push	r29
    1864:	cf 93       	push	r28
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x00;
    186a:	e2 e2       	ldi	r30, 0x22	; 34
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	10 82       	st	Z, r1
}
    1870:	cf 91       	pop	r28
    1872:	df 91       	pop	r29
    1874:	08 95       	ret

00001876 <__vector_5>:
/**************************new interupt for angular movement********************************/



ISR(INT4_vect)
{
    1876:	1f 92       	push	r1
    1878:	0f 92       	push	r0
    187a:	0f b6       	in	r0, 0x3f	; 63
    187c:	0f 92       	push	r0
    187e:	11 24       	eor	r1, r1
    1880:	8f 93       	push	r24
    1882:	9f 93       	push	r25
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
	shaftCountLeft++;
    188c:	80 91 2d 03 	lds	r24, 0x032D
    1890:	90 91 2e 03 	lds	r25, 0x032E
    1894:	01 96       	adiw	r24, 0x01	; 1
    1896:	90 93 2e 03 	sts	0x032E, r25
    189a:	80 93 2d 03 	sts	0x032D, r24
}
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	9f 91       	pop	r25
    18a4:	8f 91       	pop	r24
    18a6:	0f 90       	pop	r0
    18a8:	0f be       	out	0x3f, r0	; 63
    18aa:	0f 90       	pop	r0
    18ac:	1f 90       	pop	r1
    18ae:	18 95       	reti

000018b0 <__vector_6>:

ISR(INT5_vect)
{
    18b0:	1f 92       	push	r1
    18b2:	0f 92       	push	r0
    18b4:	0f b6       	in	r0, 0x3f	; 63
    18b6:	0f 92       	push	r0
    18b8:	11 24       	eor	r1, r1
    18ba:	8f 93       	push	r24
    18bc:	9f 93       	push	r25
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
	shaftCountRight++;
    18c6:	80 91 4b 03 	lds	r24, 0x034B
    18ca:	90 91 4c 03 	lds	r25, 0x034C
    18ce:	01 96       	adiw	r24, 0x01	; 1
    18d0:	90 93 4c 03 	sts	0x034C, r25
    18d4:	80 93 4b 03 	sts	0x034B, r24
}
    18d8:	cf 91       	pop	r28
    18da:	df 91       	pop	r29
    18dc:	9f 91       	pop	r25
    18de:	8f 91       	pop	r24
    18e0:	0f 90       	pop	r0
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	0f 90       	pop	r0
    18e6:	1f 90       	pop	r1
    18e8:	18 95       	reti

000018ea <ANGLE_ROTATE>:

void ANGLE_ROTATE(unsigned int Degrees)
{
    18ea:	df 93       	push	r29
    18ec:	cf 93       	push	r28
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
    18f2:	2c 97       	sbiw	r28, 0x0c	; 12
    18f4:	0f b6       	in	r0, 0x3f	; 63
    18f6:	f8 94       	cli
    18f8:	de bf       	out	0x3e, r29	; 62
    18fa:	0f be       	out	0x3f, r0	; 63
    18fc:	cd bf       	out	0x3d, r28	; 61
    18fe:	9a 87       	std	Y+10, r25	; 0x0a
    1900:	89 87       	std	Y+9, r24	; 0x09

		float ReqdShaftCount = 0;
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	a0 e0       	ldi	r26, 0x00	; 0
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	8d 83       	std	Y+5, r24	; 0x05
    190c:	9e 83       	std	Y+6, r25	; 0x06
    190e:	af 83       	std	Y+7, r26	; 0x07
    1910:	b8 87       	std	Y+8, r27	; 0x08
		unsigned long int ReqdShaftCountInt = 0;
    1912:	19 82       	std	Y+1, r1	; 0x01
    1914:	1a 82       	std	Y+2, r1	; 0x02
    1916:	1b 82       	std	Y+3, r1	; 0x03
    1918:	1c 82       	std	Y+4, r1	; 0x04
		ReqdShaftCount = (float) Degrees/ 4.090; 
    191a:	89 85       	ldd	r24, Y+9	; 0x09
    191c:	9a 85       	ldd	r25, Y+10	; 0x0a
    191e:	cc 01       	movw	r24, r24
    1920:	a0 e0       	ldi	r26, 0x00	; 0
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	bc 01       	movw	r22, r24
    1926:	cd 01       	movw	r24, r26
    1928:	0e 94 96 29 	call	0x532c	; 0x532c <__floatunsisf>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	bc 01       	movw	r22, r24
    1932:	cd 01       	movw	r24, r26
    1934:	28 e4       	ldi	r18, 0x48	; 72
    1936:	31 ee       	ldi	r19, 0xE1	; 225
    1938:	42 e8       	ldi	r20, 0x82	; 130
    193a:	50 e4       	ldi	r21, 0x40	; 64
    193c:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <__divsf3>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	8d 83       	std	Y+5, r24	; 0x05
    1946:	9e 83       	std	Y+6, r25	; 0x06
    1948:	af 83       	std	Y+7, r26	; 0x07
    194a:	b8 87       	std	Y+8, r27	; 0x08
		// division by resolution to get shaft count  
		ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    194c:	6d 81       	ldd	r22, Y+5	; 0x05
    194e:	7e 81       	ldd	r23, Y+6	; 0x06
    1950:	8f 81       	ldd	r24, Y+7	; 0x07
    1952:	98 85       	ldd	r25, Y+8	; 0x08
    1954:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	cc 01       	movw	r24, r24
    195e:	a0 e0       	ldi	r26, 0x00	; 0
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	89 83       	std	Y+1, r24	; 0x01
    1964:	9a 83       	std	Y+2, r25	; 0x02
    1966:	ab 83       	std	Y+3, r26	; 0x03
    1968:	bc 83       	std	Y+4, r27	; 0x04
		shaftCountRight = 0; //defined globle variable
    196a:	10 92 4c 03 	sts	0x034C, r1
    196e:	10 92 4b 03 	sts	0x034B, r1
		shaftCountLeft = 0;
    1972:	10 92 2e 03 	sts	0x032E, r1
    1976:	10 92 2d 03 	sts	0x032D, r1
		while (1)
		{	if((shaftCountRight >= ReqdShaftCountInt) | (shaftCountLeft >= ReqdShaftCountInt))
    197a:	80 91 4b 03 	lds	r24, 0x034B
    197e:	90 91 4c 03 	lds	r25, 0x034C
    1982:	9c 01       	movw	r18, r24
    1984:	40 e0       	ldi	r20, 0x00	; 0
    1986:	50 e0       	ldi	r21, 0x00	; 0
    1988:	1c 86       	std	Y+12, r1	; 0x0c
    198a:	89 81       	ldd	r24, Y+1	; 0x01
    198c:	9a 81       	ldd	r25, Y+2	; 0x02
    198e:	ab 81       	ldd	r26, Y+3	; 0x03
    1990:	bc 81       	ldd	r27, Y+4	; 0x04
    1992:	28 17       	cp	r18, r24
    1994:	39 07       	cpc	r19, r25
    1996:	4a 07       	cpc	r20, r26
    1998:	5b 07       	cpc	r21, r27
    199a:	10 f0       	brcs	.+4      	; 0x19a0 <ANGLE_ROTATE+0xb6>
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	8c 87       	std	Y+12, r24	; 0x0c
    19a0:	80 91 2d 03 	lds	r24, 0x032D
    19a4:	90 91 2e 03 	lds	r25, 0x032E
    19a8:	9c 01       	movw	r18, r24
    19aa:	40 e0       	ldi	r20, 0x00	; 0
    19ac:	50 e0       	ldi	r21, 0x00	; 0
    19ae:	1b 86       	std	Y+11, r1	; 0x0b
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
    19b2:	9a 81       	ldd	r25, Y+2	; 0x02
    19b4:	ab 81       	ldd	r26, Y+3	; 0x03
    19b6:	bc 81       	ldd	r27, Y+4	; 0x04
    19b8:	28 17       	cp	r18, r24
    19ba:	39 07       	cpc	r19, r25
    19bc:	4a 07       	cpc	r20, r26
    19be:	5b 07       	cpc	r21, r27
    19c0:	10 f0       	brcs	.+4      	; 0x19c6 <ANGLE_ROTATE+0xdc>
    19c2:	91 e0       	ldi	r25, 0x01	; 1
    19c4:	9b 87       	std	Y+11, r25	; 0x0b
    19c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    19c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    19ca:	89 2b       	or	r24, r25
    19cc:	88 23       	and	r24, r24
    19ce:	a9 f2       	breq	.-86     	; 0x197a <ANGLE_ROTATE+0x90>
			break;
		}
		STOP();
    19d0:	0e 94 31 0c 	call	0x1862	; 0x1862 <STOP>

}
    19d4:	2c 96       	adiw	r28, 0x0c	; 12
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	f8 94       	cli
    19da:	de bf       	out	0x3e, r29	; 62
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	cd bf       	out	0x3d, r28	; 61
    19e0:	cf 91       	pop	r28
    19e2:	df 91       	pop	r29
    19e4:	08 95       	ret

000019e6 <LINEAR_DISTANCE>:




void LINEAR_DISTANCE( unsigned int distance)
{
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    19ee:	2a 97       	sbiw	r28, 0x0a	; 10
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	f8 94       	cli
    19f4:	de bf       	out	0x3e, r29	; 62
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	cd bf       	out	0x3d, r28	; 61
    19fa:	9a 87       	std	Y+10, r25	; 0x0a
    19fc:	89 87       	std	Y+9, r24	; 0x09


	float ReqdShaftCount = 0;
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	a0 e0       	ldi	r26, 0x00	; 0
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	8d 83       	std	Y+5, r24	; 0x05
    1a08:	9e 83       	std	Y+6, r25	; 0x06
    1a0a:	af 83       	std	Y+7, r26	; 0x07
    1a0c:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
    1a0e:	19 82       	std	Y+1, r1	; 0x01
    1a10:	1a 82       	std	Y+2, r1	; 0x02
    1a12:	1b 82       	std	Y+3, r1	; 0x03
    1a14:	1c 82       	std	Y+4, r1	; 0x04
	
	ReqdShaftCount = distance / 5.338;
    1a16:	89 85       	ldd	r24, Y+9	; 0x09
    1a18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a1a:	cc 01       	movw	r24, r24
    1a1c:	a0 e0       	ldi	r26, 0x00	; 0
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	bc 01       	movw	r22, r24
    1a22:	cd 01       	movw	r24, r26
    1a24:	0e 94 96 29 	call	0x532c	; 0x532c <__floatunsisf>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	bc 01       	movw	r22, r24
    1a2e:	cd 01       	movw	r24, r26
    1a30:	25 ee       	ldi	r18, 0xE5	; 229
    1a32:	30 ed       	ldi	r19, 0xD0	; 208
    1a34:	4a ea       	ldi	r20, 0xAA	; 170
    1a36:	50 e4       	ldi	r21, 0x40	; 64
    1a38:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <__divsf3>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	8d 83       	std	Y+5, r24	; 0x05
    1a42:	9e 83       	std	Y+6, r25	; 0x06
    1a44:	af 83       	std	Y+7, r26	; 0x07
    1a46:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    1a48:	6d 81       	ldd	r22, Y+5	; 0x05
    1a4a:	7e 81       	ldd	r23, Y+6	; 0x06
    1a4c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a4e:	98 85       	ldd	r25, Y+8	; 0x08
    1a50:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	89 83       	std	Y+1, r24	; 0x01
    1a5a:	9a 83       	std	Y+2, r25	; 0x02
    1a5c:	ab 83       	std	Y+3, r26	; 0x03
    1a5e:	bc 83       	std	Y+4, r27	; 0x04
	shaftCountRight = 0;
    1a60:	10 92 4c 03 	sts	0x034C, r1
    1a64:	10 92 4b 03 	sts	0x034B, r1
	while(1)
	 	{
			if(shaftCountRight > ReqdShaftCountInt)
    1a68:	80 91 4b 03 	lds	r24, 0x034B
    1a6c:	90 91 4c 03 	lds	r25, 0x034C
    1a70:	9c 01       	movw	r18, r24
    1a72:	40 e0       	ldi	r20, 0x00	; 0
    1a74:	50 e0       	ldi	r21, 0x00	; 0
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7a:	ab 81       	ldd	r26, Y+3	; 0x03
    1a7c:	bc 81       	ldd	r27, Y+4	; 0x04
    1a7e:	82 17       	cp	r24, r18
    1a80:	93 07       	cpc	r25, r19
    1a82:	a4 07       	cpc	r26, r20
    1a84:	b5 07       	cpc	r27, r21
    1a86:	80 f7       	brcc	.-32     	; 0x1a68 <LINEAR_DISTANCE+0x82>
				{
					break;
				}
		}
	STOP(); //Stop action
    1a88:	0e 94 31 0c 	call	0x1862	; 0x1862 <STOP>
}
    1a8c:	2a 96       	adiw	r28, 0x0a	; 10
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	f8 94       	cli
    1a92:	de bf       	out	0x3e, r29	; 62
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	cd bf       	out	0x3d, r28	; 61
    1a98:	cf 91       	pop	r28
    1a9a:	df 91       	pop	r29
    1a9c:	08 95       	ret

00001a9e <servo1_pin_config>:
#include <avr/interrupt.h>
#include <util/delay.h>


void servo1_pin_config (void)
{
    1a9e:	df 93       	push	r29
    1aa0:	cf 93       	push	r28
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
    1aa6:	a4 e2       	ldi	r26, 0x24	; 36
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	e4 e2       	ldi	r30, 0x24	; 36
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	80 62       	ori	r24, 0x20	; 32
    1ab2:	8c 93       	st	X, r24
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
    1ab4:	a5 e2       	ldi	r26, 0x25	; 37
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e5 e2       	ldi	r30, 0x25	; 37
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	80 62       	ori	r24, 0x20	; 32
    1ac0:	8c 93       	st	X, r24
}
    1ac2:	cf 91       	pop	r28
    1ac4:	df 91       	pop	r29
    1ac6:	08 95       	ret

00001ac8 <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
    1ad0:	a4 e2       	ldi	r26, 0x24	; 36
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	e4 e2       	ldi	r30, 0x24	; 36
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	80 64       	ori	r24, 0x40	; 64
    1adc:	8c 93       	st	X, r24
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
    1ade:	a5 e2       	ldi	r26, 0x25	; 37
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	e5 e2       	ldi	r30, 0x25	; 37
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	80 64       	ori	r24, 0x40	; 64
    1aea:	8c 93       	st	X, r24
}
    1aec:	cf 91       	pop	r28
    1aee:	df 91       	pop	r29
    1af0:	08 95       	ret

00001af2 <servo3_pin_config>:

//Configure PORTB 7 pin for servo motor 3 operation
void servo3_pin_config (void)
{
    1af2:	df 93       	push	r29
    1af4:	cf 93       	push	r28
    1af6:	cd b7       	in	r28, 0x3d	; 61
    1af8:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
    1afa:	a4 e2       	ldi	r26, 0x24	; 36
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	e4 e2       	ldi	r30, 0x24	; 36
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	80 68       	ori	r24, 0x80	; 128
    1b06:	8c 93       	st	X, r24
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
    1b08:	a5 e2       	ldi	r26, 0x25	; 37
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	e5 e2       	ldi	r30, 0x25	; 37
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	80 68       	ori	r24, 0x80	; 128
    1b14:	8c 93       	st	X, r24
}
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
    1b1a:	08 95       	ret

00001b1c <port_init_servo>:

//Initialize the ports
void port_init_servo(void)
{
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
 servo1_pin_config(); //Configure PORTB 5 pin for servo motor 1 operation
    1b24:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <servo1_pin_config>
 servo2_pin_config(); //Configure PORTB 6 pin for servo motor 2 operation 
    1b28:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <servo2_pin_config>
 servo3_pin_config(); //Configure PORTB 7 pin for servo motor 3 operation  
    1b2c:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <servo3_pin_config>
}
    1b30:	cf 91       	pop	r28
    1b32:	df 91       	pop	r29
    1b34:	08 95       	ret

00001b36 <timer1_init>:
//TIMER1 initialization in 10 bit fast PWM mode  
//prescale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 42.187Hz 
void timer1_init(void)
{
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
 TCCR1B = 0x00; //stop
    1b3e:	e1 e8       	ldi	r30, 0x81	; 129
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
    1b44:	e5 e8       	ldi	r30, 0x85	; 133
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	8c ef       	ldi	r24, 0xFC	; 252
    1b4a:	80 83       	st	Z, r24
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
    1b4c:	e4 e8       	ldi	r30, 0x84	; 132
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	80 83       	st	Z, r24
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
    1b54:	e9 e8       	ldi	r30, 0x89	; 137
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	83 e0       	ldi	r24, 0x03	; 3
    1b5a:	80 83       	st	Z, r24
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
    1b5c:	e8 e8       	ldi	r30, 0x88	; 136
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	8f ef       	ldi	r24, 0xFF	; 255
    1b62:	80 83       	st	Z, r24
 OCR1BH = 0x03;	//Output compare Register high value for servo 2
    1b64:	eb e8       	ldi	r30, 0x8B	; 139
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	83 e0       	ldi	r24, 0x03	; 3
    1b6a:	80 83       	st	Z, r24
 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
    1b6c:	ea e8       	ldi	r30, 0x8A	; 138
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	8f ef       	ldi	r24, 0xFF	; 255
    1b72:	80 83       	st	Z, r24
 OCR1CH = 0x03;	//Output compare Register high value for servo 3
    1b74:	ed e8       	ldi	r30, 0x8D	; 141
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	83 e0       	ldi	r24, 0x03	; 3
    1b7a:	80 83       	st	Z, r24
 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
    1b7c:	ec e8       	ldi	r30, 0x8C	; 140
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	8f ef       	ldi	r24, 0xFF	; 255
    1b82:	80 83       	st	Z, r24
 ICR1H  = 0x03;	
    1b84:	e7 e8       	ldi	r30, 0x87	; 135
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	83 e0       	ldi	r24, 0x03	; 3
    1b8a:	80 83       	st	Z, r24
 ICR1L  = 0xFF;
    1b8c:	e6 e8       	ldi	r30, 0x86	; 134
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	8f ef       	ldi	r24, 0xFF	; 255
    1b92:	80 83       	st	Z, r24
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
    1b94:	e0 e8       	ldi	r30, 0x80	; 128
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	8b ea       	ldi	r24, 0xAB	; 171
    1b9a:	80 83       	st	Z, r24
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
    1b9c:	e2 e8       	ldi	r30, 0x82	; 130
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	10 82       	st	Z, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
    1ba2:	e1 e8       	ldi	r30, 0x81	; 129
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	8c e0       	ldi	r24, 0x0C	; 12
    1ba8:	80 83       	st	Z, r24
}
    1baa:	cf 91       	pop	r28
    1bac:	df 91       	pop	r29
    1bae:	08 95       	ret

00001bb0 <init_devices_servo>:


//Function to initialize all the peripherals
void init_devices_servo(void)
{
    1bb0:	df 93       	push	r29
    1bb2:	cf 93       	push	r28
    1bb4:	cd b7       	in	r28, 0x3d	; 61
    1bb6:	de b7       	in	r29, 0x3e	; 62
 cli(); //disable all interrupts
    1bb8:	f8 94       	cli
 port_init_servo();
    1bba:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <port_init_servo>
 timer1_init();
    1bbe:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <timer1_init>
 sei(); //re-enable interrupts 
    1bc2:	78 94       	sei
}
    1bc4:	cf 91       	pop	r28
    1bc6:	df 91       	pop	r29
    1bc8:	08 95       	ret

00001bca <servo_1>:


//Function to rotate Servo 1 by a specified angle in the multiples of 2.25 degrees
void servo_1(unsigned char degrees)  
{
    1bca:	0f 93       	push	r16
    1bcc:	1f 93       	push	r17
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	00 d0       	rcall	.+0      	; 0x1bd4 <servo_1+0xa>
    1bd4:	0f 92       	push	r0
    1bd6:	0f 92       	push	r0
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
    1bdc:	8d 83       	std	Y+5, r24	; 0x05
 float PositionPanServo = 0;
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	a0 e0       	ldi	r26, 0x00	; 0
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	89 83       	std	Y+1, r24	; 0x01
    1be8:	9a 83       	std	Y+2, r25	; 0x02
    1bea:	ab 83       	std	Y+3, r26	; 0x03
    1bec:	bc 83       	std	Y+4, r27	; 0x04
 PositionPanServo = ((float)degrees / 2.25) + 21.0;
    1bee:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf0:	88 2f       	mov	r24, r24
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	a0 e0       	ldi	r26, 0x00	; 0
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	bc 01       	movw	r22, r24
    1bfa:	cd 01       	movw	r24, r26
    1bfc:	0e 94 96 29 	call	0x532c	; 0x532c <__floatunsisf>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	bc 01       	movw	r22, r24
    1c06:	cd 01       	movw	r24, r26
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	40 e1       	ldi	r20, 0x10	; 16
    1c0e:	50 e4       	ldi	r21, 0x40	; 64
    1c10:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <__divsf3>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	bc 01       	movw	r22, r24
    1c1a:	cd 01       	movw	r24, r26
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	48 ea       	ldi	r20, 0xA8	; 168
    1c22:	51 e4       	ldi	r21, 0x41	; 65
    1c24:	0e 94 81 26 	call	0x4d02	; 0x4d02 <__addsf3>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	89 83       	std	Y+1, r24	; 0x01
    1c2e:	9a 83       	std	Y+2, r25	; 0x02
    1c30:	ab 83       	std	Y+3, r26	; 0x03
    1c32:	bc 83       	std	Y+4, r27	; 0x04
 OCR1AH = 0x00;
    1c34:	e9 e8       	ldi	r30, 0x89	; 137
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	10 82       	st	Z, r1
 OCR1AL = (unsigned char) PositionPanServo;
    1c3a:	08 e8       	ldi	r16, 0x88	; 136
    1c3c:	10 e0       	ldi	r17, 0x00	; 0
    1c3e:	69 81       	ldd	r22, Y+1	; 0x01
    1c40:	7a 81       	ldd	r23, Y+2	; 0x02
    1c42:	8b 81       	ldd	r24, Y+3	; 0x03
    1c44:	9c 81       	ldd	r25, Y+4	; 0x04
    1c46:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	f8 01       	movw	r30, r16
    1c50:	80 83       	st	Z, r24
}
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	cf 91       	pop	r28
    1c5e:	df 91       	pop	r29
    1c60:	1f 91       	pop	r17
    1c62:	0f 91       	pop	r16
    1c64:	08 95       	ret

00001c66 <servo_2>:


//Function to rotate Servo 2 by a specified angle in the multiples of 2.25 degrees
void servo_2(unsigned char degrees)
{
    1c66:	0f 93       	push	r16
    1c68:	1f 93       	push	r17
    1c6a:	df 93       	push	r29
    1c6c:	cf 93       	push	r28
    1c6e:	00 d0       	rcall	.+0      	; 0x1c70 <servo_2+0xa>
    1c70:	0f 92       	push	r0
    1c72:	0f 92       	push	r0
    1c74:	cd b7       	in	r28, 0x3d	; 61
    1c76:	de b7       	in	r29, 0x3e	; 62
    1c78:	8d 83       	std	Y+5, r24	; 0x05
 float PositionTiltServo = 0;
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	a0 e0       	ldi	r26, 0x00	; 0
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	89 83       	std	Y+1, r24	; 0x01
    1c84:	9a 83       	std	Y+2, r25	; 0x02
    1c86:	ab 83       	std	Y+3, r26	; 0x03
    1c88:	bc 83       	std	Y+4, r27	; 0x04
 PositionTiltServo = ((float)degrees / 2.25) + 21.0;
    1c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8c:	88 2f       	mov	r24, r24
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	a0 e0       	ldi	r26, 0x00	; 0
    1c92:	b0 e0       	ldi	r27, 0x00	; 0
    1c94:	bc 01       	movw	r22, r24
    1c96:	cd 01       	movw	r24, r26
    1c98:	0e 94 96 29 	call	0x532c	; 0x532c <__floatunsisf>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	bc 01       	movw	r22, r24
    1ca2:	cd 01       	movw	r24, r26
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	40 e1       	ldi	r20, 0x10	; 16
    1caa:	50 e4       	ldi	r21, 0x40	; 64
    1cac:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <__divsf3>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	bc 01       	movw	r22, r24
    1cb6:	cd 01       	movw	r24, r26
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	48 ea       	ldi	r20, 0xA8	; 168
    1cbe:	51 e4       	ldi	r21, 0x41	; 65
    1cc0:	0e 94 81 26 	call	0x4d02	; 0x4d02 <__addsf3>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	89 83       	std	Y+1, r24	; 0x01
    1cca:	9a 83       	std	Y+2, r25	; 0x02
    1ccc:	ab 83       	std	Y+3, r26	; 0x03
    1cce:	bc 83       	std	Y+4, r27	; 0x04
 OCR1BH = 0x00;
    1cd0:	eb e8       	ldi	r30, 0x8B	; 139
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	10 82       	st	Z, r1
 OCR1BL = (unsigned char) PositionTiltServo;
    1cd6:	0a e8       	ldi	r16, 0x8A	; 138
    1cd8:	10 e0       	ldi	r17, 0x00	; 0
    1cda:	69 81       	ldd	r22, Y+1	; 0x01
    1cdc:	7a 81       	ldd	r23, Y+2	; 0x02
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce2:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	f8 01       	movw	r30, r16
    1cec:	80 83       	st	Z, r24
}
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	cf 91       	pop	r28
    1cfa:	df 91       	pop	r29
    1cfc:	1f 91       	pop	r17
    1cfe:	0f 91       	pop	r16
    1d00:	08 95       	ret

00001d02 <servo_3>:

//Function to rotate Servo 3 by a specified angle in the multiples of 2.25 degrees
void servo_3(unsigned char degrees)
{
    1d02:	0f 93       	push	r16
    1d04:	1f 93       	push	r17
    1d06:	df 93       	push	r29
    1d08:	cf 93       	push	r28
    1d0a:	00 d0       	rcall	.+0      	; 0x1d0c <servo_3+0xa>
    1d0c:	0f 92       	push	r0
    1d0e:	0f 92       	push	r0
    1d10:	cd b7       	in	r28, 0x3d	; 61
    1d12:	de b7       	in	r29, 0x3e	; 62
    1d14:	8d 83       	std	Y+5, r24	; 0x05
 float PositionServo = 0;
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	a0 e0       	ldi	r26, 0x00	; 0
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	89 83       	std	Y+1, r24	; 0x01
    1d20:	9a 83       	std	Y+2, r25	; 0x02
    1d22:	ab 83       	std	Y+3, r26	; 0x03
    1d24:	bc 83       	std	Y+4, r27	; 0x04
 PositionServo = ((float)degrees / 2.25) + 21.0;
    1d26:	8d 81       	ldd	r24, Y+5	; 0x05
    1d28:	88 2f       	mov	r24, r24
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	a0 e0       	ldi	r26, 0x00	; 0
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	bc 01       	movw	r22, r24
    1d32:	cd 01       	movw	r24, r26
    1d34:	0e 94 96 29 	call	0x532c	; 0x532c <__floatunsisf>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	bc 01       	movw	r22, r24
    1d3e:	cd 01       	movw	r24, r26
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	40 e1       	ldi	r20, 0x10	; 16
    1d46:	50 e4       	ldi	r21, 0x40	; 64
    1d48:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <__divsf3>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	bc 01       	movw	r22, r24
    1d52:	cd 01       	movw	r24, r26
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	48 ea       	ldi	r20, 0xA8	; 168
    1d5a:	51 e4       	ldi	r21, 0x41	; 65
    1d5c:	0e 94 81 26 	call	0x4d02	; 0x4d02 <__addsf3>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	89 83       	std	Y+1, r24	; 0x01
    1d66:	9a 83       	std	Y+2, r25	; 0x02
    1d68:	ab 83       	std	Y+3, r26	; 0x03
    1d6a:	bc 83       	std	Y+4, r27	; 0x04
 OCR1CH = 0x00;
    1d6c:	ed e8       	ldi	r30, 0x8D	; 141
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	10 82       	st	Z, r1
 OCR1CL = (unsigned char) PositionServo;
    1d72:	0c e8       	ldi	r16, 0x8C	; 140
    1d74:	10 e0       	ldi	r17, 0x00	; 0
    1d76:	69 81       	ldd	r22, Y+1	; 0x01
    1d78:	7a 81       	ldd	r23, Y+2	; 0x02
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7e:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	f8 01       	movw	r30, r16
    1d88:	80 83       	st	Z, r24
}
    1d8a:	0f 90       	pop	r0
    1d8c:	0f 90       	pop	r0
    1d8e:	0f 90       	pop	r0
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	1f 91       	pop	r17
    1d9a:	0f 91       	pop	r16
    1d9c:	08 95       	ret

00001d9e <servo_1_free>:
//servo_free functions unlocks the servo motors from the any angle 
//and make them free by giving 100% duty cycle at the PWM. This function can be used to 
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
    1d9e:	df 93       	push	r29
    1da0:	cf 93       	push	r28
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
 OCR1AH = 0x03; 
    1da6:	e9 e8       	ldi	r30, 0x89	; 137
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	83 e0       	ldi	r24, 0x03	; 3
    1dac:	80 83       	st	Z, r24
 OCR1AL = 0xFF; //Servo 1 off
    1dae:	e8 e8       	ldi	r30, 0x88	; 136
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	8f ef       	ldi	r24, 0xFF	; 255
    1db4:	80 83       	st	Z, r24
}
    1db6:	cf 91       	pop	r28
    1db8:	df 91       	pop	r29
    1dba:	08 95       	ret

00001dbc <servo_2_free>:

void servo_2_free (void) //makes servo 2 free rotating
{
    1dbc:	df 93       	push	r29
    1dbe:	cf 93       	push	r28
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
 OCR1BH = 0x03;
    1dc4:	eb e8       	ldi	r30, 0x8B	; 139
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	83 e0       	ldi	r24, 0x03	; 3
    1dca:	80 83       	st	Z, r24
 OCR1BL = 0xFF; //Servo 2 off
    1dcc:	ea e8       	ldi	r30, 0x8A	; 138
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	8f ef       	ldi	r24, 0xFF	; 255
    1dd2:	80 83       	st	Z, r24
}
    1dd4:	cf 91       	pop	r28
    1dd6:	df 91       	pop	r29
    1dd8:	08 95       	ret

00001dda <servo_3_free>:

void servo_3_free (void) //makes servo 3 free rotating
{
    1dda:	df 93       	push	r29
    1ddc:	cf 93       	push	r28
    1dde:	cd b7       	in	r28, 0x3d	; 61
    1de0:	de b7       	in	r29, 0x3e	; 62
 OCR1CH = 0x03;
    1de2:	ed e8       	ldi	r30, 0x8D	; 141
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	83 e0       	ldi	r24, 0x03	; 3
    1de8:	80 83       	st	Z, r24
 OCR1CL = 0xFF; //Servo 3 off
    1dea:	ec e8       	ldi	r30, 0x8C	; 140
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	8f ef       	ldi	r24, 0xFF	; 255
    1df0:	80 83       	st	Z, r24
} 
    1df2:	cf 91       	pop	r28
    1df4:	df 91       	pop	r29
    1df6:	08 95       	ret

00001df8 <uart0_init>:
unsigned int flag_rx = 1;
unsigned char data;
unsigned int flag_x = 0;

void uart0_init(void)
{
    1df8:	df 93       	push	r29
    1dfa:	cf 93       	push	r28
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62
 UCSR0B = 0x00; //disable while setting baud rate
    1e00:	e1 ec       	ldi	r30, 0xC1	; 193
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	10 82       	st	Z, r1
 UCSR0A = 0x00;
    1e06:	e0 ec       	ldi	r30, 0xC0	; 192
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	10 82       	st	Z, r1
 UCSR0C = 0x06;
    1e0c:	e2 ec       	ldi	r30, 0xC2	; 194
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	86 e0       	ldi	r24, 0x06	; 6
    1e12:	80 83       	st	Z, r24
 UBRR0L = 0x47; //set baud rate lo
    1e14:	e4 ec       	ldi	r30, 0xC4	; 196
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	87 e4       	ldi	r24, 0x47	; 71
    1e1a:	80 83       	st	Z, r24
 UBRR0H = 0x00; //set baud rate hi
    1e1c:	e5 ec       	ldi	r30, 0xC5	; 197
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	10 82       	st	Z, r1
 UCSR0B = 0x98;
    1e22:	e1 ec       	ldi	r30, 0xC1	; 193
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	88 e9       	ldi	r24, 0x98	; 152
    1e28:	80 83       	st	Z, r24
}
    1e2a:	cf 91       	pop	r28
    1e2c:	df 91       	pop	r29
    1e2e:	08 95       	ret

00001e30 <__vector_25>:




SIGNAL(SIG_USART0_RECV) 		// ISR for receiving complete interrupt
{
    1e30:	1f 92       	push	r1
    1e32:	0f 92       	push	r0
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	0f 92       	push	r0
    1e38:	00 90 5b 00 	lds	r0, 0x005B
    1e3c:	0f 92       	push	r0
    1e3e:	11 24       	eor	r1, r1
    1e40:	8f 93       	push	r24
    1e42:	9f 93       	push	r25
    1e44:	ef 93       	push	r30
    1e46:	ff 93       	push	r31
    1e48:	df 93       	push	r29
    1e4a:	cf 93       	push	r28
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
	
		data=UDR0;
    1e50:	e6 ec       	ldi	r30, 0xC6	; 198
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	80 93 3a 03 	sts	0x033A, r24



	if((flag_rx == 0)&&( data == '0'))
    1e5a:	80 91 00 02 	lds	r24, 0x0200
    1e5e:	90 91 01 02 	lds	r25, 0x0201
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	49 f4       	brne	.+18     	; 0x1e78 <__vector_25+0x48>
    1e66:	80 91 3a 03 	lds	r24, 0x033A
    1e6a:	80 33       	cpi	r24, 0x30	; 48
    1e6c:	29 f4       	brne	.+10     	; 0x1e78 <__vector_25+0x48>
	{
		UDR0='E';
    1e6e:	e6 ec       	ldi	r30, 0xC6	; 198
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	85 e4       	ldi	r24, 0x45	; 69
    1e74:	80 83       	st	Z, r24
    1e76:	0b c0       	rjmp	.+22     	; 0x1e8e <__vector_25+0x5e>
		
	}
	else if(flag_rx == 1)
    1e78:	80 91 00 02 	lds	r24, 0x0200
    1e7c:	90 91 01 02 	lds	r25, 0x0201
    1e80:	81 30       	cpi	r24, 0x01	; 1
    1e82:	91 05       	cpc	r25, r1
    1e84:	21 f4       	brne	.+8      	; 0x1e8e <__vector_25+0x5e>
	{
		UDR0='0';
    1e86:	e6 ec       	ldi	r30, 0xC6	; 198
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 e3       	ldi	r24, 0x30	; 48
    1e8c:	80 83       	st	Z, r24
	}
	
	


			if (data == 'B')  //objects of larger area...to be kept on right
    1e8e:	80 91 3a 03 	lds	r24, 0x033A
    1e92:	82 34       	cpi	r24, 0x42	; 66
    1e94:	59 f4       	brne	.+22     	; 0x1eac <__vector_25+0x7c>
			{
	
				UDR0='R';
    1e96:	e6 ec       	ldi	r30, 0xC6	; 198
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	82 e5       	ldi	r24, 0x52	; 82
    1e9c:	80 83       	st	Z, r24
				flag_x=1;
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	90 93 11 03 	sts	0x0311, r25
    1ea6:	80 93 10 03 	sts	0x0310, r24
    1eaa:	22 c0       	rjmp	.+68     	; 0x1ef0 <__vector_25+0xc0>
		
		    } 

	else if (data== 'C') // object of smaller area to be kept on left
    1eac:	80 91 3a 03 	lds	r24, 0x033A
    1eb0:	83 34       	cpi	r24, 0x43	; 67
    1eb2:	59 f4       	brne	.+22     	; 0x1eca <__vector_25+0x9a>
			{
				UDR0= 'R';
    1eb4:	e6 ec       	ldi	r30, 0xC6	; 198
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	82 e5       	ldi	r24, 0x52	; 82
    1eba:	80 83       	st	Z, r24
				flag_x=1;
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	90 93 11 03 	sts	0x0311, r25
    1ec4:	80 93 10 03 	sts	0x0310, r24
    1ec8:	13 c0       	rjmp	.+38     	; 0x1ef0 <__vector_25+0xc0>
		
			} 
else if (data == 'D')
    1eca:	80 91 3a 03 	lds	r24, 0x033A
    1ece:	84 34       	cpi	r24, 0x44	; 68
    1ed0:	59 f4       	brne	.+22     	; 0x1ee8 <__vector_25+0xb8>
{
	UDR0='R';
    1ed2:	e6 ec       	ldi	r30, 0xC6	; 198
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	82 e5       	ldi	r24, 0x52	; 82
    1ed8:	80 83       	st	Z, r24
	flag_x=1;
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	90 93 11 03 	sts	0x0311, r25
    1ee2:	80 93 10 03 	sts	0x0310, r24
    1ee6:	04 c0       	rjmp	.+8      	; 0x1ef0 <__vector_25+0xc0>
}

else
{
	UDR0 = '0';
    1ee8:	e6 ec       	ldi	r30, 0xC6	; 198
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 e3       	ldi	r24, 0x30	; 48
    1eee:	80 83       	st	Z, r24

}
// making copy of data from UDR0 in 'data' variable 								// echo data back to
								
								
}
    1ef0:	cf 91       	pop	r28
    1ef2:	df 91       	pop	r29
    1ef4:	ff 91       	pop	r31
    1ef6:	ef 91       	pop	r30
    1ef8:	9f 91       	pop	r25
    1efa:	8f 91       	pop	r24
    1efc:	0f 90       	pop	r0
    1efe:	00 92 5b 00 	sts	0x005B, r0
    1f02:	0f 90       	pop	r0
    1f04:	0f be       	out	0x3f, r0	; 63
    1f06:	0f 90       	pop	r0
    1f08:	1f 90       	pop	r1
    1f0a:	18 95       	reti

00001f0c <init_uart0>:


//Function To Initialize all The Devices
void init_uart0()
{
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	cd b7       	in	r28, 0x3d	; 61
    1f12:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupts
    1f14:	f8 94       	cli
 uart0_init(); //Initailize UART1 for serial communiaction
    1f16:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <uart0_init>
 sei();   //Enables the global interrupts
    1f1a:	78 94       	sei
}
    1f1c:	cf 91       	pop	r28
    1f1e:	df 91       	pop	r29
    1f20:	08 95       	ret

00001f22 <main>:



int main(void)
{
    1f22:	0f 93       	push	r16
    1f24:	1f 93       	push	r17
    1f26:	df 93       	push	r29
    1f28:	cf 93       	push	r28
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
    1f2e:	c2 54       	subi	r28, 0x42	; 66
    1f30:	d1 40       	sbci	r29, 0x01	; 1
    1f32:	0f b6       	in	r0, 0x3f	; 63
    1f34:	f8 94       	cli
    1f36:	de bf       	out	0x3e, r29	; 62
    1f38:	0f be       	out	0x3f, r0	; 63
    1f3a:	cd bf       	out	0x3d, r28	; 61


//unsigned char data;

init_devices();
    1f3c:	0e 94 b6 0a 	call	0x156c	; 0x156c <init_devices>
init_devices_servo();
    1f40:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <init_devices_servo>
timer5_init();
    1f44:	0e 94 8b 0b 	call	0x1716	; 0x1716 <timer5_init>
INIT_PORTS();
    1f48:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <INIT_PORTS>
lcd_set_4bit();
    1f4c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_set_4bit>
lcd_init();
    1f50:	0e 94 d5 05 	call	0xbaa	; 0xbaa <lcd_init>
INIT_INTERRUPT();
    1f54:	0e 94 c8 0b 	call	0x1790	; 0x1790 <INIT_INTERRUPT>
uart0_init();
    1f58:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <uart0_init>


	// INTIAL POSITION OF ARM.. SERVO_1 = Gripper, SERVO_2 = UP/DOWN, SERVO_3 = LEFT/RIGHT
	
	servo_1(180);
    1f5c:	84 eb       	ldi	r24, 0xB4	; 180
    1f5e:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <servo_1>
    1f62:	fe 01       	movw	r30, r28
    1f64:	e1 5c       	subi	r30, 0xC1	; 193
    1f66:	fe 4f       	sbci	r31, 0xFE	; 254
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	a8 e4       	ldi	r26, 0x48	; 72
    1f6e:	b3 e4       	ldi	r27, 0x43	; 67
    1f70:	80 83       	st	Z, r24
    1f72:	91 83       	std	Z+1, r25	; 0x01
    1f74:	a2 83       	std	Z+2, r26	; 0x02
    1f76:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f78:	8e 01       	movw	r16, r28
    1f7a:	05 5c       	subi	r16, 0xC5	; 197
    1f7c:	1e 4f       	sbci	r17, 0xFE	; 254
    1f7e:	fe 01       	movw	r30, r28
    1f80:	e1 5c       	subi	r30, 0xC1	; 193
    1f82:	fe 4f       	sbci	r31, 0xFE	; 254
    1f84:	60 81       	ld	r22, Z
    1f86:	71 81       	ldd	r23, Z+1	; 0x01
    1f88:	82 81       	ldd	r24, Z+2	; 0x02
    1f8a:	93 81       	ldd	r25, Z+3	; 0x03
    1f8c:	2d ec       	ldi	r18, 0xCD	; 205
    1f8e:	3c ec       	ldi	r19, 0xCC	; 204
    1f90:	4c e2       	ldi	r20, 0x2C	; 44
    1f92:	55 e4       	ldi	r21, 0x45	; 69
    1f94:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	f8 01       	movw	r30, r16
    1f9e:	80 83       	st	Z, r24
    1fa0:	91 83       	std	Z+1, r25	; 0x01
    1fa2:	a2 83       	std	Z+2, r26	; 0x02
    1fa4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fa6:	fe 01       	movw	r30, r28
    1fa8:	e5 5c       	subi	r30, 0xC5	; 197
    1faa:	fe 4f       	sbci	r31, 0xFE	; 254
    1fac:	60 81       	ld	r22, Z
    1fae:	71 81       	ldd	r23, Z+1	; 0x01
    1fb0:	82 81       	ldd	r24, Z+2	; 0x02
    1fb2:	93 81       	ldd	r25, Z+3	; 0x03
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	40 e8       	ldi	r20, 0x80	; 128
    1fba:	5f e3       	ldi	r21, 0x3F	; 63
    1fbc:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
    1fc0:	88 23       	and	r24, r24
    1fc2:	44 f4       	brge	.+16     	; 0x1fd4 <main+0xb2>
		__ticks = 1;
    1fc4:	fe 01       	movw	r30, r28
    1fc6:	e7 5c       	subi	r30, 0xC7	; 199
    1fc8:	fe 4f       	sbci	r31, 0xFE	; 254
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	91 83       	std	Z+1, r25	; 0x01
    1fd0:	80 83       	st	Z, r24
    1fd2:	64 c0       	rjmp	.+200    	; 0x209c <main+0x17a>
	else if (__tmp > 65535)
    1fd4:	fe 01       	movw	r30, r28
    1fd6:	e5 5c       	subi	r30, 0xC5	; 197
    1fd8:	fe 4f       	sbci	r31, 0xFE	; 254
    1fda:	60 81       	ld	r22, Z
    1fdc:	71 81       	ldd	r23, Z+1	; 0x01
    1fde:	82 81       	ldd	r24, Z+2	; 0x02
    1fe0:	93 81       	ldd	r25, Z+3	; 0x03
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	3f ef       	ldi	r19, 0xFF	; 255
    1fe6:	4f e7       	ldi	r20, 0x7F	; 127
    1fe8:	57 e4       	ldi	r21, 0x47	; 71
    1fea:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
    1fee:	18 16       	cp	r1, r24
    1ff0:	0c f0       	brlt	.+2      	; 0x1ff4 <main+0xd2>
    1ff2:	43 c0       	rjmp	.+134    	; 0x207a <main+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	e1 5c       	subi	r30, 0xC1	; 193
    1ff8:	fe 4f       	sbci	r31, 0xFE	; 254
    1ffa:	60 81       	ld	r22, Z
    1ffc:	71 81       	ldd	r23, Z+1	; 0x01
    1ffe:	82 81       	ldd	r24, Z+2	; 0x02
    2000:	93 81       	ldd	r25, Z+3	; 0x03
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	40 e2       	ldi	r20, 0x20	; 32
    2008:	51 e4       	ldi	r21, 0x41	; 65
    200a:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	8e 01       	movw	r16, r28
    2014:	07 5c       	subi	r16, 0xC7	; 199
    2016:	1e 4f       	sbci	r17, 0xFE	; 254
    2018:	bc 01       	movw	r22, r24
    201a:	cd 01       	movw	r24, r26
    201c:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	f8 01       	movw	r30, r16
    2026:	91 83       	std	Z+1, r25	; 0x01
    2028:	80 83       	st	Z, r24
    202a:	1f c0       	rjmp	.+62     	; 0x206a <main+0x148>
    202c:	fe 01       	movw	r30, r28
    202e:	e9 5c       	subi	r30, 0xC9	; 201
    2030:	fe 4f       	sbci	r31, 0xFE	; 254
    2032:	84 e1       	ldi	r24, 0x14	; 20
    2034:	91 e0       	ldi	r25, 0x01	; 1
    2036:	91 83       	std	Z+1, r25	; 0x01
    2038:	80 83       	st	Z, r24
    203a:	fe 01       	movw	r30, r28
    203c:	e9 5c       	subi	r30, 0xC9	; 201
    203e:	fe 4f       	sbci	r31, 0xFE	; 254
    2040:	80 81       	ld	r24, Z
    2042:	91 81       	ldd	r25, Z+1	; 0x01
    2044:	01 97       	sbiw	r24, 0x01	; 1
    2046:	f1 f7       	brne	.-4      	; 0x2044 <main+0x122>
    2048:	fe 01       	movw	r30, r28
    204a:	e9 5c       	subi	r30, 0xC9	; 201
    204c:	fe 4f       	sbci	r31, 0xFE	; 254
    204e:	91 83       	std	Z+1, r25	; 0x01
    2050:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2052:	de 01       	movw	r26, r28
    2054:	a7 5c       	subi	r26, 0xC7	; 199
    2056:	be 4f       	sbci	r27, 0xFE	; 254
    2058:	fe 01       	movw	r30, r28
    205a:	e7 5c       	subi	r30, 0xC7	; 199
    205c:	fe 4f       	sbci	r31, 0xFE	; 254
    205e:	80 81       	ld	r24, Z
    2060:	91 81       	ldd	r25, Z+1	; 0x01
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	11 96       	adiw	r26, 0x01	; 1
    2066:	9c 93       	st	X, r25
    2068:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    206a:	fe 01       	movw	r30, r28
    206c:	e7 5c       	subi	r30, 0xC7	; 199
    206e:	fe 4f       	sbci	r31, 0xFE	; 254
    2070:	80 81       	ld	r24, Z
    2072:	91 81       	ldd	r25, Z+1	; 0x01
    2074:	00 97       	sbiw	r24, 0x00	; 0
    2076:	d1 f6       	brne	.-76     	; 0x202c <main+0x10a>
    2078:	27 c0       	rjmp	.+78     	; 0x20c8 <main+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207a:	8e 01       	movw	r16, r28
    207c:	07 5c       	subi	r16, 0xC7	; 199
    207e:	1e 4f       	sbci	r17, 0xFE	; 254
    2080:	fe 01       	movw	r30, r28
    2082:	e5 5c       	subi	r30, 0xC5	; 197
    2084:	fe 4f       	sbci	r31, 0xFE	; 254
    2086:	60 81       	ld	r22, Z
    2088:	71 81       	ldd	r23, Z+1	; 0x01
    208a:	82 81       	ldd	r24, Z+2	; 0x02
    208c:	93 81       	ldd	r25, Z+3	; 0x03
    208e:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	f8 01       	movw	r30, r16
    2098:	91 83       	std	Z+1, r25	; 0x01
    209a:	80 83       	st	Z, r24
    209c:	de 01       	movw	r26, r28
    209e:	ab 5c       	subi	r26, 0xCB	; 203
    20a0:	be 4f       	sbci	r27, 0xFE	; 254
    20a2:	fe 01       	movw	r30, r28
    20a4:	e7 5c       	subi	r30, 0xC7	; 199
    20a6:	fe 4f       	sbci	r31, 0xFE	; 254
    20a8:	80 81       	ld	r24, Z
    20aa:	91 81       	ldd	r25, Z+1	; 0x01
    20ac:	8d 93       	st	X+, r24
    20ae:	9c 93       	st	X, r25
    20b0:	fe 01       	movw	r30, r28
    20b2:	eb 5c       	subi	r30, 0xCB	; 203
    20b4:	fe 4f       	sbci	r31, 0xFE	; 254
    20b6:	80 81       	ld	r24, Z
    20b8:	91 81       	ldd	r25, Z+1	; 0x01
    20ba:	01 97       	sbiw	r24, 0x01	; 1
    20bc:	f1 f7       	brne	.-4      	; 0x20ba <main+0x198>
    20be:	fe 01       	movw	r30, r28
    20c0:	eb 5c       	subi	r30, 0xCB	; 203
    20c2:	fe 4f       	sbci	r31, 0xFE	; 254
    20c4:	91 83       	std	Z+1, r25	; 0x01
    20c6:	80 83       	st	Z, r24
	_delay_ms(200);
	servo_2(50);
    20c8:	82 e3       	ldi	r24, 0x32	; 50
    20ca:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <servo_2>
    20ce:	fe 01       	movw	r30, r28
    20d0:	ef 5c       	subi	r30, 0xCF	; 207
    20d2:	fe 4f       	sbci	r31, 0xFE	; 254
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	a8 e4       	ldi	r26, 0x48	; 72
    20da:	b3 e4       	ldi	r27, 0x43	; 67
    20dc:	80 83       	st	Z, r24
    20de:	91 83       	std	Z+1, r25	; 0x01
    20e0:	a2 83       	std	Z+2, r26	; 0x02
    20e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e4:	8e 01       	movw	r16, r28
    20e6:	03 5d       	subi	r16, 0xD3	; 211
    20e8:	1e 4f       	sbci	r17, 0xFE	; 254
    20ea:	fe 01       	movw	r30, r28
    20ec:	ef 5c       	subi	r30, 0xCF	; 207
    20ee:	fe 4f       	sbci	r31, 0xFE	; 254
    20f0:	60 81       	ld	r22, Z
    20f2:	71 81       	ldd	r23, Z+1	; 0x01
    20f4:	82 81       	ldd	r24, Z+2	; 0x02
    20f6:	93 81       	ldd	r25, Z+3	; 0x03
    20f8:	2d ec       	ldi	r18, 0xCD	; 205
    20fa:	3c ec       	ldi	r19, 0xCC	; 204
    20fc:	4c e2       	ldi	r20, 0x2C	; 44
    20fe:	55 e4       	ldi	r21, 0x45	; 69
    2100:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	f8 01       	movw	r30, r16
    210a:	80 83       	st	Z, r24
    210c:	91 83       	std	Z+1, r25	; 0x01
    210e:	a2 83       	std	Z+2, r26	; 0x02
    2110:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2112:	fe 01       	movw	r30, r28
    2114:	e3 5d       	subi	r30, 0xD3	; 211
    2116:	fe 4f       	sbci	r31, 0xFE	; 254
    2118:	60 81       	ld	r22, Z
    211a:	71 81       	ldd	r23, Z+1	; 0x01
    211c:	82 81       	ldd	r24, Z+2	; 0x02
    211e:	93 81       	ldd	r25, Z+3	; 0x03
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	40 e8       	ldi	r20, 0x80	; 128
    2126:	5f e3       	ldi	r21, 0x3F	; 63
    2128:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
    212c:	88 23       	and	r24, r24
    212e:	44 f4       	brge	.+16     	; 0x2140 <main+0x21e>
		__ticks = 1;
    2130:	fe 01       	movw	r30, r28
    2132:	e5 5d       	subi	r30, 0xD5	; 213
    2134:	fe 4f       	sbci	r31, 0xFE	; 254
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	91 83       	std	Z+1, r25	; 0x01
    213c:	80 83       	st	Z, r24
    213e:	64 c0       	rjmp	.+200    	; 0x2208 <__stack+0x9>
	else if (__tmp > 65535)
    2140:	fe 01       	movw	r30, r28
    2142:	e3 5d       	subi	r30, 0xD3	; 211
    2144:	fe 4f       	sbci	r31, 0xFE	; 254
    2146:	60 81       	ld	r22, Z
    2148:	71 81       	ldd	r23, Z+1	; 0x01
    214a:	82 81       	ldd	r24, Z+2	; 0x02
    214c:	93 81       	ldd	r25, Z+3	; 0x03
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	3f ef       	ldi	r19, 0xFF	; 255
    2152:	4f e7       	ldi	r20, 0x7F	; 127
    2154:	57 e4       	ldi	r21, 0x47	; 71
    2156:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
    215a:	18 16       	cp	r1, r24
    215c:	0c f0       	brlt	.+2      	; 0x2160 <main+0x23e>
    215e:	43 c0       	rjmp	.+134    	; 0x21e6 <main+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2160:	fe 01       	movw	r30, r28
    2162:	ef 5c       	subi	r30, 0xCF	; 207
    2164:	fe 4f       	sbci	r31, 0xFE	; 254
    2166:	60 81       	ld	r22, Z
    2168:	71 81       	ldd	r23, Z+1	; 0x01
    216a:	82 81       	ldd	r24, Z+2	; 0x02
    216c:	93 81       	ldd	r25, Z+3	; 0x03
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	40 e2       	ldi	r20, 0x20	; 32
    2174:	51 e4       	ldi	r21, 0x41	; 65
    2176:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	8e 01       	movw	r16, r28
    2180:	05 5d       	subi	r16, 0xD5	; 213
    2182:	1e 4f       	sbci	r17, 0xFE	; 254
    2184:	bc 01       	movw	r22, r24
    2186:	cd 01       	movw	r24, r26
    2188:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	f8 01       	movw	r30, r16
    2192:	91 83       	std	Z+1, r25	; 0x01
    2194:	80 83       	st	Z, r24
    2196:	1f c0       	rjmp	.+62     	; 0x21d6 <main+0x2b4>
    2198:	fe 01       	movw	r30, r28
    219a:	e7 5d       	subi	r30, 0xD7	; 215
    219c:	fe 4f       	sbci	r31, 0xFE	; 254
    219e:	84 e1       	ldi	r24, 0x14	; 20
    21a0:	91 e0       	ldi	r25, 0x01	; 1
    21a2:	91 83       	std	Z+1, r25	; 0x01
    21a4:	80 83       	st	Z, r24
    21a6:	fe 01       	movw	r30, r28
    21a8:	e7 5d       	subi	r30, 0xD7	; 215
    21aa:	fe 4f       	sbci	r31, 0xFE	; 254
    21ac:	80 81       	ld	r24, Z
    21ae:	91 81       	ldd	r25, Z+1	; 0x01
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	f1 f7       	brne	.-4      	; 0x21b0 <main+0x28e>
    21b4:	fe 01       	movw	r30, r28
    21b6:	e7 5d       	subi	r30, 0xD7	; 215
    21b8:	fe 4f       	sbci	r31, 0xFE	; 254
    21ba:	91 83       	std	Z+1, r25	; 0x01
    21bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21be:	de 01       	movw	r26, r28
    21c0:	a5 5d       	subi	r26, 0xD5	; 213
    21c2:	be 4f       	sbci	r27, 0xFE	; 254
    21c4:	fe 01       	movw	r30, r28
    21c6:	e5 5d       	subi	r30, 0xD5	; 213
    21c8:	fe 4f       	sbci	r31, 0xFE	; 254
    21ca:	80 81       	ld	r24, Z
    21cc:	91 81       	ldd	r25, Z+1	; 0x01
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	11 96       	adiw	r26, 0x01	; 1
    21d2:	9c 93       	st	X, r25
    21d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d6:	fe 01       	movw	r30, r28
    21d8:	e5 5d       	subi	r30, 0xD5	; 213
    21da:	fe 4f       	sbci	r31, 0xFE	; 254
    21dc:	80 81       	ld	r24, Z
    21de:	91 81       	ldd	r25, Z+1	; 0x01
    21e0:	00 97       	sbiw	r24, 0x00	; 0
    21e2:	d1 f6       	brne	.-76     	; 0x2198 <main+0x276>
    21e4:	27 c0       	rjmp	.+78     	; 0x2234 <__stack+0x35>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e6:	8e 01       	movw	r16, r28
    21e8:	05 5d       	subi	r16, 0xD5	; 213
    21ea:	1e 4f       	sbci	r17, 0xFE	; 254
    21ec:	fe 01       	movw	r30, r28
    21ee:	e3 5d       	subi	r30, 0xD3	; 211
    21f0:	fe 4f       	sbci	r31, 0xFE	; 254
    21f2:	60 81       	ld	r22, Z
    21f4:	71 81       	ldd	r23, Z+1	; 0x01
    21f6:	82 81       	ldd	r24, Z+2	; 0x02
    21f8:	93 81       	ldd	r25, Z+3	; 0x03
    21fa:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	f8 01       	movw	r30, r16
    2204:	91 83       	std	Z+1, r25	; 0x01
    2206:	80 83       	st	Z, r24
    2208:	de 01       	movw	r26, r28
    220a:	a9 5d       	subi	r26, 0xD9	; 217
    220c:	be 4f       	sbci	r27, 0xFE	; 254
    220e:	fe 01       	movw	r30, r28
    2210:	e5 5d       	subi	r30, 0xD5	; 213
    2212:	fe 4f       	sbci	r31, 0xFE	; 254
    2214:	80 81       	ld	r24, Z
    2216:	91 81       	ldd	r25, Z+1	; 0x01
    2218:	8d 93       	st	X+, r24
    221a:	9c 93       	st	X, r25
    221c:	fe 01       	movw	r30, r28
    221e:	e9 5d       	subi	r30, 0xD9	; 217
    2220:	fe 4f       	sbci	r31, 0xFE	; 254
    2222:	80 81       	ld	r24, Z
    2224:	91 81       	ldd	r25, Z+1	; 0x01
    2226:	01 97       	sbiw	r24, 0x01	; 1
    2228:	f1 f7       	brne	.-4      	; 0x2226 <__stack+0x27>
    222a:	fe 01       	movw	r30, r28
    222c:	e9 5d       	subi	r30, 0xD9	; 217
    222e:	fe 4f       	sbci	r31, 0xFE	; 254
    2230:	91 83       	std	Z+1, r25	; 0x01
    2232:	80 83       	st	Z, r24
	_delay_ms(200);
	servo_3(85);
    2234:	85 e5       	ldi	r24, 0x55	; 85
    2236:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <servo_3>
	//_delay_ms(50);



	Left_Speed(148);
    223a:	84 e9       	ldi	r24, 0x94	; 148
    223c:	0e 94 ac 0b 	call	0x1758	; 0x1758 <Left_Speed>
	Right_Speed(160);
    2240:	80 ea       	ldi	r24, 0xA0	; 160
    2242:	0e 94 ba 0b 	call	0x1774	; 0x1774 <Right_Speed>
	FORWARD();
    2246:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <FORWARD>
{
	//BATT_V = ADC_Conversion(0);
	//BATT_Voltage = ((ADC_Conversion(0)*100)*0.07902) + 0.7;	//Prints Battery Voltage Status
	//lcd_print(1,1,BATT_Voltage,4);

		flag_rx = 1;
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	90 93 01 02 	sts	0x0201, r25
    2252:	80 93 00 02 	sts	0x0200, r24
		flag_turn = 0;
    2256:	10 92 0b 03 	sts	0x030B, r1
    225a:	10 92 0a 03 	sts	0x030A, r1
 		flag = 0;
    225e:	10 92 0d 03 	sts	0x030D, r1
    2262:	10 92 0c 03 	sts	0x030C, r1
 		r_count=0;
    2266:	10 92 0f 03 	sts	0x030F, r1
    226a:	10 92 0e 03 	sts	0x030E, r1
 

		flag_x = 0;
    226e:	10 92 11 03 	sts	0x0311, r1
    2272:	10 92 10 03 	sts	0x0310, r1



	
	
	sharp_left = ADC_Conversion(9);
    2276:	89 e0       	ldi	r24, 0x09	; 9
    2278:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    227c:	80 93 3c 03 	sts	0x033C, r24
	value_left = Sharp_GP2D12_estimation(sharp_left);
    2280:	80 91 3c 03 	lds	r24, 0x033C
    2284:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Sharp_GP2D12_estimation>
    2288:	90 93 42 03 	sts	0x0342, r25
    228c:	80 93 41 03 	sts	0x0341, r24
	lcd_print(2,1,value_left,3); 
    2290:	20 91 41 03 	lds	r18, 0x0341
    2294:	30 91 42 03 	lds	r19, 0x0342
    2298:	82 e0       	ldi	r24, 0x02	; 2
    229a:	61 e0       	ldi	r22, 0x01	; 1
    229c:	a9 01       	movw	r20, r18
    229e:	23 e0       	ldi	r18, 0x03	; 3
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
	
	sharp_right = ADC_Conversion(13);
    22a6:	8d e0       	ldi	r24, 0x0D	; 13
    22a8:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    22ac:	80 93 3b 03 	sts	0x033B, r24
	value_right = Sharp_GP2D12_estimation(sharp_right);
    22b0:	80 91 3b 03 	lds	r24, 0x033B
    22b4:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Sharp_GP2D12_estimation>
    22b8:	90 93 40 03 	sts	0x0340, r25
    22bc:	80 93 3f 03 	sts	0x033F, r24
	lcd_print(2,13,value_right,3);
    22c0:	20 91 3f 03 	lds	r18, 0x033F
    22c4:	30 91 40 03 	lds	r19, 0x0340
    22c8:	82 e0       	ldi	r24, 0x02	; 2
    22ca:	6d e0       	ldi	r22, 0x0D	; 13
    22cc:	a9 01       	movw	r20, r18
    22ce:	23 e0       	ldi	r18, 0x03	; 3
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>


	sharp_center_left=ADC_Conversion(10);
    22d6:	8a e0       	ldi	r24, 0x0A	; 10
    22d8:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    22dc:	80 93 35 03 	sts	0x0335, r24
	value_center_left=Sharp_GP2D12_estimation(sharp_center_left);
    22e0:	80 91 35 03 	lds	r24, 0x0335
    22e4:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Sharp_GP2D12_estimation>
    22e8:	90 93 4a 03 	sts	0x034A, r25
    22ec:	80 93 49 03 	sts	0x0349, r24
	lcd_print(1,1,value_center_left,3); 
    22f0:	20 91 49 03 	lds	r18, 0x0349
    22f4:	30 91 4a 03 	lds	r19, 0x034A
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	61 e0       	ldi	r22, 0x01	; 1
    22fc:	a9 01       	movw	r20, r18
    22fe:	23 e0       	ldi	r18, 0x03	; 3
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>

	sharp_center = ADC_Conversion(11);
    2306:	8b e0       	ldi	r24, 0x0B	; 11
    2308:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    230c:	80 93 19 03 	sts	0x0319, r24
	value_center = Sharp_GP2D12_estimation(sharp_center);
    2310:	80 91 19 03 	lds	r24, 0x0319
    2314:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Sharp_GP2D12_estimation>
    2318:	90 93 2a 03 	sts	0x032A, r25
    231c:	80 93 29 03 	sts	0x0329, r24
	lcd_print(1,7,value_center,3);
    2320:	20 91 29 03 	lds	r18, 0x0329
    2324:	30 91 2a 03 	lds	r19, 0x032A
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	67 e0       	ldi	r22, 0x07	; 7
    232c:	a9 01       	movw	r20, r18
    232e:	23 e0       	ldi	r18, 0x03	; 3
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
		



	
	white_1 = ADC_Conversion(1);
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    233c:	88 2f       	mov	r24, r24
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	a0 e0       	ldi	r26, 0x00	; 0
    2342:	b0 e0       	ldi	r27, 0x00	; 0
    2344:	bc 01       	movw	r22, r24
    2346:	cd 01       	movw	r24, r26
    2348:	0e 94 96 29 	call	0x532c	; 0x532c <__floatunsisf>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	80 93 36 03 	sts	0x0336, r24
    2354:	90 93 37 03 	sts	0x0337, r25
    2358:	a0 93 38 03 	sts	0x0338, r26
    235c:	b0 93 39 03 	sts	0x0339, r27
	//lcd_print(1,1,white_1,4);
	white_2 = ADC_Conversion(2);
    2360:	82 e0       	ldi	r24, 0x02	; 2
    2362:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    2366:	88 2f       	mov	r24, r24
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	a0 e0       	ldi	r26, 0x00	; 0
    236c:	b0 e0       	ldi	r27, 0x00	; 0
    236e:	bc 01       	movw	r22, r24
    2370:	cd 01       	movw	r24, r26
    2372:	0e 94 96 29 	call	0x532c	; 0x532c <__floatunsisf>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	80 93 45 03 	sts	0x0345, r24
    237e:	90 93 46 03 	sts	0x0346, r25
    2382:	a0 93 47 03 	sts	0x0347, r26
    2386:	b0 93 48 03 	sts	0x0348, r27
	//lcd_print(1,7,white_2,4);
	white_3 = ADC_Conversion(3);
    238a:	83 e0       	ldi	r24, 0x03	; 3
    238c:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    2390:	88 2f       	mov	r24, r24
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	a0 e0       	ldi	r26, 0x00	; 0
    2396:	b0 e0       	ldi	r27, 0x00	; 0
    2398:	bc 01       	movw	r22, r24
    239a:	cd 01       	movw	r24, r26
    239c:	0e 94 96 29 	call	0x532c	; 0x532c <__floatunsisf>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	80 93 13 03 	sts	0x0313, r24
    23a8:	90 93 14 03 	sts	0x0314, r25
    23ac:	a0 93 15 03 	sts	0x0315, r26
    23b0:	b0 93 16 03 	sts	0x0316, r27
	//lcd_print(1,13,white_3,4);
			
	if (white_1<30 || white_3<30)
    23b4:	80 91 36 03 	lds	r24, 0x0336
    23b8:	90 91 37 03 	lds	r25, 0x0337
    23bc:	a0 91 38 03 	lds	r26, 0x0338
    23c0:	b0 91 39 03 	lds	r27, 0x0339
    23c4:	bc 01       	movw	r22, r24
    23c6:	cd 01       	movw	r24, r26
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	40 ef       	ldi	r20, 0xF0	; 240
    23ce:	51 e4       	ldi	r21, 0x41	; 65
    23d0:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
    23d4:	88 23       	and	r24, r24
    23d6:	9c f0       	brlt	.+38     	; 0x23fe <__stack+0x1ff>
    23d8:	80 91 13 03 	lds	r24, 0x0313
    23dc:	90 91 14 03 	lds	r25, 0x0314
    23e0:	a0 91 15 03 	lds	r26, 0x0315
    23e4:	b0 91 16 03 	lds	r27, 0x0316
    23e8:	bc 01       	movw	r22, r24
    23ea:	cd 01       	movw	r24, r26
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	40 ef       	ldi	r20, 0xF0	; 240
    23f2:	51 e4       	ldi	r21, 0x41	; 65
    23f4:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
    23f8:	88 23       	and	r24, r24
    23fa:	0c f0       	brlt	.+2      	; 0x23fe <__stack+0x1ff>
    23fc:	eb c0       	rjmp	.+470    	; 0x25d4 <__stack+0x3d5>
	{
		sharp_left = ADC_Conversion(9);
    23fe:	89 e0       	ldi	r24, 0x09	; 9
    2400:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    2404:	80 93 3c 03 	sts	0x033C, r24
		value_left = Sharp_GP2D12_estimation(sharp_left);
    2408:	80 91 3c 03 	lds	r24, 0x033C
    240c:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Sharp_GP2D12_estimation>
    2410:	90 93 42 03 	sts	0x0342, r25
    2414:	80 93 41 03 	sts	0x0341, r24
	lcd_print(2,1,value_left,3); 
    2418:	20 91 41 03 	lds	r18, 0x0341
    241c:	30 91 42 03 	lds	r19, 0x0342
    2420:	82 e0       	ldi	r24, 0x02	; 2
    2422:	61 e0       	ldi	r22, 0x01	; 1
    2424:	a9 01       	movw	r20, r18
    2426:	23 e0       	ldi	r18, 0x03	; 3
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
	
	sharp_right = ADC_Conversion(13);
    242e:	8d e0       	ldi	r24, 0x0D	; 13
    2430:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    2434:	80 93 3b 03 	sts	0x033B, r24
	value_right = Sharp_GP2D12_estimation(sharp_right);
    2438:	80 91 3b 03 	lds	r24, 0x033B
    243c:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Sharp_GP2D12_estimation>
    2440:	90 93 40 03 	sts	0x0340, r25
    2444:	80 93 3f 03 	sts	0x033F, r24
	lcd_print(2,13,value_right,3);
    2448:	20 91 3f 03 	lds	r18, 0x033F
    244c:	30 91 40 03 	lds	r19, 0x0340
    2450:	82 e0       	ldi	r24, 0x02	; 2
    2452:	6d e0       	ldi	r22, 0x0D	; 13
    2454:	a9 01       	movw	r20, r18
    2456:	23 e0       	ldi	r18, 0x03	; 3
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>


	sharp_center_left=ADC_Conversion(10);
    245e:	8a e0       	ldi	r24, 0x0A	; 10
    2460:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    2464:	80 93 35 03 	sts	0x0335, r24
	value_center_left=Sharp_GP2D12_estimation(sharp_center_left);
    2468:	80 91 35 03 	lds	r24, 0x0335
    246c:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Sharp_GP2D12_estimation>
    2470:	90 93 4a 03 	sts	0x034A, r25
    2474:	80 93 49 03 	sts	0x0349, r24
	lcd_print(1,1,value_center_left,3); 
    2478:	20 91 49 03 	lds	r18, 0x0349
    247c:	30 91 4a 03 	lds	r19, 0x034A
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	61 e0       	ldi	r22, 0x01	; 1
    2484:	a9 01       	movw	r20, r18
    2486:	23 e0       	ldi	r18, 0x03	; 3
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>

	sharp_center = ADC_Conversion(11);
    248e:	8b e0       	ldi	r24, 0x0B	; 11
    2490:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    2494:	80 93 19 03 	sts	0x0319, r24
	value_center = Sharp_GP2D12_estimation(sharp_center);
    2498:	80 91 19 03 	lds	r24, 0x0319
    249c:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Sharp_GP2D12_estimation>
    24a0:	90 93 2a 03 	sts	0x032A, r25
    24a4:	80 93 29 03 	sts	0x0329, r24
	lcd_print(1,7,value_center,3);
    24a8:	20 91 29 03 	lds	r18, 0x0329
    24ac:	30 91 2a 03 	lds	r19, 0x032A
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	67 e0       	ldi	r22, 0x07	; 7
    24b4:	a9 01       	movw	r20, r18
    24b6:	23 e0       	ldi	r18, 0x03	; 3
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
				
		white_1 = ADC_Conversion(1);
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    24c4:	88 2f       	mov	r24, r24
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	a0 e0       	ldi	r26, 0x00	; 0
    24ca:	b0 e0       	ldi	r27, 0x00	; 0
    24cc:	bc 01       	movw	r22, r24
    24ce:	cd 01       	movw	r24, r26
    24d0:	0e 94 96 29 	call	0x532c	; 0x532c <__floatunsisf>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	80 93 36 03 	sts	0x0336, r24
    24dc:	90 93 37 03 	sts	0x0337, r25
    24e0:	a0 93 38 03 	sts	0x0338, r26
    24e4:	b0 93 39 03 	sts	0x0339, r27
		//lcd_print(1,1,white_1,4);
		white_2 = ADC_Conversion(2);
    24e8:	82 e0       	ldi	r24, 0x02	; 2
    24ea:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    24ee:	88 2f       	mov	r24, r24
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	a0 e0       	ldi	r26, 0x00	; 0
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	bc 01       	movw	r22, r24
    24f8:	cd 01       	movw	r24, r26
    24fa:	0e 94 96 29 	call	0x532c	; 0x532c <__floatunsisf>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	80 93 45 03 	sts	0x0345, r24
    2506:	90 93 46 03 	sts	0x0346, r25
    250a:	a0 93 47 03 	sts	0x0347, r26
    250e:	b0 93 48 03 	sts	0x0348, r27
		//lcd_print(1,7,white_2,4);
		white_3 = ADC_Conversion(3);
    2512:	83 e0       	ldi	r24, 0x03	; 3
    2514:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    2518:	88 2f       	mov	r24, r24
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	a0 e0       	ldi	r26, 0x00	; 0
    251e:	b0 e0       	ldi	r27, 0x00	; 0
    2520:	bc 01       	movw	r22, r24
    2522:	cd 01       	movw	r24, r26
    2524:	0e 94 96 29 	call	0x532c	; 0x532c <__floatunsisf>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	80 93 13 03 	sts	0x0313, r24
    2530:	90 93 14 03 	sts	0x0314, r25
    2534:	a0 93 15 03 	sts	0x0315, r26
    2538:	b0 93 16 03 	sts	0x0316, r27
		//lcd_print(1,13,white_3,4);

		FORWARD();
    253c:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <FORWARD>
		if(flag%2 == 0)
    2540:	80 91 0c 03 	lds	r24, 0x030C
    2544:	90 91 0d 03 	lds	r25, 0x030D
    2548:	81 70       	andi	r24, 0x01	; 1
    254a:	90 70       	andi	r25, 0x00	; 0
    254c:	00 97       	sbiw	r24, 0x00	; 0
    254e:	e9 f4       	brne	.+58     	; 0x258a <__stack+0x38b>
		{
		REVERSE ();
    2550:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <REVERSE>
		LINEAR_DISTANCE(150);
    2554:	86 e9       	ldi	r24, 0x96	; 150
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LINEAR_DISTANCE>
		STOP();
    255c:	0e 94 31 0c 	call	0x1862	; 0x1862 <STOP>

			RIGHT_TURN();
    2560:	0e 94 10 0c 	call	0x1820	; 0x1820 <RIGHT_TURN>
			ANGLE_ROTATE(90);
    2564:	8a e5       	ldi	r24, 0x5A	; 90
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	0e 94 75 0c 	call	0x18ea	; 0x18ea <ANGLE_ROTATE>
				
			FORWARD();
    256c:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <FORWARD>
			LINEAR_DISTANCE(250);
    2570:	8a ef       	ldi	r24, 0xFA	; 250
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LINEAR_DISTANCE>
						
			FORWARD();
    2578:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <FORWARD>
			RIGHT_TURN();
    257c:	0e 94 10 0c 	call	0x1820	; 0x1820 <RIGHT_TURN>
			ANGLE_ROTATE(90);
    2580:	8a e5       	ldi	r24, 0x5A	; 90
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	0e 94 75 0c 	call	0x18ea	; 0x18ea <ANGLE_ROTATE>
    2588:	1c c0       	rjmp	.+56     	; 0x25c2 <__stack+0x3c3>
		}
		else
		{
			REVERSE ();
    258a:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <REVERSE>
			LINEAR_DISTANCE(150);
    258e:	86 e9       	ldi	r24, 0x96	; 150
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LINEAR_DISTANCE>
			STOP();
    2596:	0e 94 31 0c 	call	0x1862	; 0x1862 <STOP>
			
			LEFT_TURN();
    259a:	0e 94 ef 0b 	call	0x17de	; 0x17de <LEFT_TURN>
			ANGLE_ROTATE(90);
    259e:	8a e5       	ldi	r24, 0x5A	; 90
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	0e 94 75 0c 	call	0x18ea	; 0x18ea <ANGLE_ROTATE>
					
			FORWARD();
    25a6:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <FORWARD>
			LINEAR_DISTANCE(250);
    25aa:	8a ef       	ldi	r24, 0xFA	; 250
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LINEAR_DISTANCE>
						
			FORWARD();
    25b2:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <FORWARD>
			LEFT_TURN();
    25b6:	0e 94 ef 0b 	call	0x17de	; 0x17de <LEFT_TURN>
			ANGLE_ROTATE(90);
    25ba:	8a e5       	ldi	r24, 0x5A	; 90
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	0e 94 75 0c 	call	0x18ea	; 0x18ea <ANGLE_ROTATE>
		}
		flag++;
    25c2:	80 91 0c 03 	lds	r24, 0x030C
    25c6:	90 91 0d 03 	lds	r25, 0x030D
    25ca:	01 96       	adiw	r24, 0x01	; 1
    25cc:	90 93 0d 03 	sts	0x030D, r25
    25d0:	80 93 0c 03 	sts	0x030C, r24
	}

	/* While object is not detected in the left or right sensors  */
	if (((value_left > 230) && (value_left < 270))|| ((value_right > 230) &&  (value_right < 270)))
    25d4:	80 91 41 03 	lds	r24, 0x0341
    25d8:	90 91 42 03 	lds	r25, 0x0342
    25dc:	87 3e       	cpi	r24, 0xE7	; 231
    25de:	91 05       	cpc	r25, r1
    25e0:	40 f0       	brcs	.+16     	; 0x25f2 <__stack+0x3f3>
    25e2:	80 91 41 03 	lds	r24, 0x0341
    25e6:	90 91 42 03 	lds	r25, 0x0342
    25ea:	f1 e0       	ldi	r31, 0x01	; 1
    25ec:	8e 30       	cpi	r24, 0x0E	; 14
    25ee:	9f 07       	cpc	r25, r31
    25f0:	98 f0       	brcs	.+38     	; 0x2618 <__stack+0x419>
    25f2:	80 91 3f 03 	lds	r24, 0x033F
    25f6:	90 91 40 03 	lds	r25, 0x0340
    25fa:	87 3e       	cpi	r24, 0xE7	; 231
    25fc:	91 05       	cpc	r25, r1
    25fe:	10 f4       	brcc	.+4      	; 0x2604 <__stack+0x405>
    2600:	0c 94 d4 24 	jmp	0x49a8	; 0x49a8 <__stack+0x27a9>
    2604:	80 91 3f 03 	lds	r24, 0x033F
    2608:	90 91 40 03 	lds	r25, 0x0340
    260c:	21 e0       	ldi	r18, 0x01	; 1
    260e:	8e 30       	cpi	r24, 0x0E	; 14
    2610:	92 07       	cpc	r25, r18
    2612:	10 f0       	brcs	.+4      	; 0x2618 <__stack+0x419>
    2614:	0c 94 d4 24 	jmp	0x49a8	; 0x49a8 <__stack+0x27a9>
	{
		STOP();
    2618:	0e 94 31 0c 	call	0x1862	; 0x1862 <STOP>
		count = 0;
    261c:	10 92 3e 03 	sts	0x033E, r1
    2620:	10 92 3d 03 	sts	0x033D, r1
		temp = 0;
    2624:	10 92 20 03 	sts	0x0320, r1
    2628:	10 92 1f 03 	sts	0x031F, r1
		/* Logic to turn and align */
		if (value_left < 270 && value_left > 230) 
    262c:	80 91 41 03 	lds	r24, 0x0341
    2630:	90 91 42 03 	lds	r25, 0x0342
    2634:	e1 e0       	ldi	r30, 0x01	; 1
    2636:	8e 30       	cpi	r24, 0x0E	; 14
    2638:	9e 07       	cpc	r25, r30
    263a:	08 f0       	brcs	.+2      	; 0x263e <__stack+0x43f>
    263c:	4a c2       	rjmp	.+1172   	; 0x2ad2 <__stack+0x8d3>
    263e:	80 91 41 03 	lds	r24, 0x0341
    2642:	90 91 42 03 	lds	r25, 0x0342
    2646:	87 3e       	cpi	r24, 0xE7	; 231
    2648:	91 05       	cpc	r25, r1
    264a:	08 f4       	brcc	.+2      	; 0x264e <__stack+0x44f>
    264c:	42 c2       	rjmp	.+1156   	; 0x2ad2 <__stack+0x8d3>
		{
			flag_turn=1;
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	90 93 0b 03 	sts	0x030B, r25
    2656:	80 93 0a 03 	sts	0x030A, r24
			temp = value_left;
    265a:	80 91 41 03 	lds	r24, 0x0341
    265e:	90 91 42 03 	lds	r25, 0x0342
    2662:	90 93 20 03 	sts	0x0320, r25
    2666:	80 93 1f 03 	sts	0x031F, r24
			FORWARD();
    266a:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <FORWARD>
			LEFT_TURN();
    266e:	0e 94 ef 0b 	call	0x17de	; 0x17de <LEFT_TURN>
			ANGLE_ROTATE(80);
    2672:	80 e5       	ldi	r24, 0x50	; 80
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	0e 94 75 0c 	call	0x18ea	; 0x18ea <ANGLE_ROTATE>

			sharp_center_left=ADC_Conversion(10);
    267a:	8a e0       	ldi	r24, 0x0A	; 10
    267c:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    2680:	80 93 35 03 	sts	0x0335, r24
			value_center_left=Sharp_GP2D12_estimation(sharp_center_left);
    2684:	80 91 35 03 	lds	r24, 0x0335
    2688:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Sharp_GP2D12_estimation>
    268c:	90 93 4a 03 	sts	0x034A, r25
    2690:	80 93 49 03 	sts	0x0349, r24
			lcd_print(1,1,value_center_left,3); 
    2694:	20 91 49 03 	lds	r18, 0x0349
    2698:	30 91 4a 03 	lds	r19, 0x034A
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	61 e0       	ldi	r22, 0x01	; 1
    26a0:	a9 01       	movw	r20, r18
    26a2:	23 e0       	ldi	r18, 0x03	; 3
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>

			sharp_center = ADC_Conversion(11);
    26aa:	8b e0       	ldi	r24, 0x0B	; 11
    26ac:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    26b0:	80 93 19 03 	sts	0x0319, r24
			value_center = Sharp_GP2D12_estimation(sharp_center);
    26b4:	80 91 19 03 	lds	r24, 0x0319
    26b8:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Sharp_GP2D12_estimation>
    26bc:	90 93 2a 03 	sts	0x032A, r25
    26c0:	80 93 29 03 	sts	0x0329, r24
			lcd_print(1,7,value_center,3);
    26c4:	20 91 29 03 	lds	r18, 0x0329
    26c8:	30 91 2a 03 	lds	r19, 0x032A
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	67 e0       	ldi	r22, 0x07	; 7
    26d0:	a9 01       	movw	r20, r18
    26d2:	23 e0       	ldi	r18, 0x03	; 3
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
		//	while( !((value_center_left <= (temp-100)) && (value_center <= (temp-100)) && (value_center < value_center_left)))
				
		backl:
			while(1)
			{
			if (((value_center_left <= (temp-40)) && (value_center <= (temp-40))) && (value_center < value_center_left))
    26da:	80 91 1f 03 	lds	r24, 0x031F
    26de:	90 91 20 03 	lds	r25, 0x0320
    26e2:	9c 01       	movw	r18, r24
    26e4:	28 52       	subi	r18, 0x28	; 40
    26e6:	30 40       	sbci	r19, 0x00	; 0
    26e8:	80 91 49 03 	lds	r24, 0x0349
    26ec:	90 91 4a 03 	lds	r25, 0x034A
    26f0:	28 17       	cp	r18, r24
    26f2:	39 07       	cpc	r19, r25
    26f4:	d0 f0       	brcs	.+52     	; 0x272a <__stack+0x52b>
    26f6:	80 91 1f 03 	lds	r24, 0x031F
    26fa:	90 91 20 03 	lds	r25, 0x0320
    26fe:	9c 01       	movw	r18, r24
    2700:	28 52       	subi	r18, 0x28	; 40
    2702:	30 40       	sbci	r19, 0x00	; 0
    2704:	80 91 29 03 	lds	r24, 0x0329
    2708:	90 91 2a 03 	lds	r25, 0x032A
    270c:	28 17       	cp	r18, r24
    270e:	39 07       	cpc	r19, r25
    2710:	60 f0       	brcs	.+24     	; 0x272a <__stack+0x52b>
    2712:	20 91 29 03 	lds	r18, 0x0329
    2716:	30 91 2a 03 	lds	r19, 0x032A
    271a:	80 91 49 03 	lds	r24, 0x0349
    271e:	90 91 4a 03 	lds	r25, 0x034A
    2722:	28 17       	cp	r18, r24
    2724:	39 07       	cpc	r19, r25
    2726:	08 f4       	brcc	.+2      	; 0x272a <__stack+0x52b>
    2728:	f3 c0       	rjmp	.+486    	; 0x2910 <__stack+0x711>
		}
			else
			{
			    
				
				count++;
    272a:	80 91 3d 03 	lds	r24, 0x033D
    272e:	90 91 3e 03 	lds	r25, 0x033E
    2732:	01 96       	adiw	r24, 0x01	; 1
    2734:	90 93 3e 03 	sts	0x033E, r25
    2738:	80 93 3d 03 	sts	0x033D, r24
				FORWARD();
    273c:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <FORWARD>
				LEFT_TURN_SOFT();
    2740:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <LEFT_TURN_SOFT>
    2744:	fe 01       	movw	r30, r28
    2746:	ed 5d       	subi	r30, 0xDD	; 221
    2748:	fe 4f       	sbci	r31, 0xFE	; 254
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	a8 ec       	ldi	r26, 0xC8	; 200
    2750:	b2 e4       	ldi	r27, 0x42	; 66
    2752:	80 83       	st	Z, r24
    2754:	91 83       	std	Z+1, r25	; 0x01
    2756:	a2 83       	std	Z+2, r26	; 0x02
    2758:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    275a:	8e 01       	movw	r16, r28
    275c:	01 5e       	subi	r16, 0xE1	; 225
    275e:	1e 4f       	sbci	r17, 0xFE	; 254
    2760:	fe 01       	movw	r30, r28
    2762:	ed 5d       	subi	r30, 0xDD	; 221
    2764:	fe 4f       	sbci	r31, 0xFE	; 254
    2766:	60 81       	ld	r22, Z
    2768:	71 81       	ldd	r23, Z+1	; 0x01
    276a:	82 81       	ldd	r24, Z+2	; 0x02
    276c:	93 81       	ldd	r25, Z+3	; 0x03
    276e:	2d ec       	ldi	r18, 0xCD	; 205
    2770:	3c ec       	ldi	r19, 0xCC	; 204
    2772:	4c e2       	ldi	r20, 0x2C	; 44
    2774:	55 e4       	ldi	r21, 0x45	; 69
    2776:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	f8 01       	movw	r30, r16
    2780:	80 83       	st	Z, r24
    2782:	91 83       	std	Z+1, r25	; 0x01
    2784:	a2 83       	std	Z+2, r26	; 0x02
    2786:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2788:	fe 01       	movw	r30, r28
    278a:	e1 5e       	subi	r30, 0xE1	; 225
    278c:	fe 4f       	sbci	r31, 0xFE	; 254
    278e:	60 81       	ld	r22, Z
    2790:	71 81       	ldd	r23, Z+1	; 0x01
    2792:	82 81       	ldd	r24, Z+2	; 0x02
    2794:	93 81       	ldd	r25, Z+3	; 0x03
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	40 e8       	ldi	r20, 0x80	; 128
    279c:	5f e3       	ldi	r21, 0x3F	; 63
    279e:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
    27a2:	88 23       	and	r24, r24
    27a4:	44 f4       	brge	.+16     	; 0x27b6 <__stack+0x5b7>
		__ticks = 1;
    27a6:	fe 01       	movw	r30, r28
    27a8:	e3 5e       	subi	r30, 0xE3	; 227
    27aa:	fe 4f       	sbci	r31, 0xFE	; 254
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	91 83       	std	Z+1, r25	; 0x01
    27b2:	80 83       	st	Z, r24
    27b4:	64 c0       	rjmp	.+200    	; 0x287e <__stack+0x67f>
	else if (__tmp > 65535)
    27b6:	fe 01       	movw	r30, r28
    27b8:	e1 5e       	subi	r30, 0xE1	; 225
    27ba:	fe 4f       	sbci	r31, 0xFE	; 254
    27bc:	60 81       	ld	r22, Z
    27be:	71 81       	ldd	r23, Z+1	; 0x01
    27c0:	82 81       	ldd	r24, Z+2	; 0x02
    27c2:	93 81       	ldd	r25, Z+3	; 0x03
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	3f ef       	ldi	r19, 0xFF	; 255
    27c8:	4f e7       	ldi	r20, 0x7F	; 127
    27ca:	57 e4       	ldi	r21, 0x47	; 71
    27cc:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
    27d0:	18 16       	cp	r1, r24
    27d2:	0c f0       	brlt	.+2      	; 0x27d6 <__stack+0x5d7>
    27d4:	43 c0       	rjmp	.+134    	; 0x285c <__stack+0x65d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d6:	fe 01       	movw	r30, r28
    27d8:	ed 5d       	subi	r30, 0xDD	; 221
    27da:	fe 4f       	sbci	r31, 0xFE	; 254
    27dc:	60 81       	ld	r22, Z
    27de:	71 81       	ldd	r23, Z+1	; 0x01
    27e0:	82 81       	ldd	r24, Z+2	; 0x02
    27e2:	93 81       	ldd	r25, Z+3	; 0x03
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	40 e2       	ldi	r20, 0x20	; 32
    27ea:	51 e4       	ldi	r21, 0x41	; 65
    27ec:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    27f0:	dc 01       	movw	r26, r24
    27f2:	cb 01       	movw	r24, r22
    27f4:	8e 01       	movw	r16, r28
    27f6:	03 5e       	subi	r16, 0xE3	; 227
    27f8:	1e 4f       	sbci	r17, 0xFE	; 254
    27fa:	bc 01       	movw	r22, r24
    27fc:	cd 01       	movw	r24, r26
    27fe:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	f8 01       	movw	r30, r16
    2808:	91 83       	std	Z+1, r25	; 0x01
    280a:	80 83       	st	Z, r24
    280c:	1f c0       	rjmp	.+62     	; 0x284c <__stack+0x64d>
    280e:	fe 01       	movw	r30, r28
    2810:	e5 5e       	subi	r30, 0xE5	; 229
    2812:	fe 4f       	sbci	r31, 0xFE	; 254
    2814:	84 e1       	ldi	r24, 0x14	; 20
    2816:	91 e0       	ldi	r25, 0x01	; 1
    2818:	91 83       	std	Z+1, r25	; 0x01
    281a:	80 83       	st	Z, r24
    281c:	fe 01       	movw	r30, r28
    281e:	e5 5e       	subi	r30, 0xE5	; 229
    2820:	fe 4f       	sbci	r31, 0xFE	; 254
    2822:	80 81       	ld	r24, Z
    2824:	91 81       	ldd	r25, Z+1	; 0x01
    2826:	01 97       	sbiw	r24, 0x01	; 1
    2828:	f1 f7       	brne	.-4      	; 0x2826 <__stack+0x627>
    282a:	fe 01       	movw	r30, r28
    282c:	e5 5e       	subi	r30, 0xE5	; 229
    282e:	fe 4f       	sbci	r31, 0xFE	; 254
    2830:	91 83       	std	Z+1, r25	; 0x01
    2832:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2834:	de 01       	movw	r26, r28
    2836:	a3 5e       	subi	r26, 0xE3	; 227
    2838:	be 4f       	sbci	r27, 0xFE	; 254
    283a:	fe 01       	movw	r30, r28
    283c:	e3 5e       	subi	r30, 0xE3	; 227
    283e:	fe 4f       	sbci	r31, 0xFE	; 254
    2840:	80 81       	ld	r24, Z
    2842:	91 81       	ldd	r25, Z+1	; 0x01
    2844:	01 97       	sbiw	r24, 0x01	; 1
    2846:	11 96       	adiw	r26, 0x01	; 1
    2848:	9c 93       	st	X, r25
    284a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    284c:	fe 01       	movw	r30, r28
    284e:	e3 5e       	subi	r30, 0xE3	; 227
    2850:	fe 4f       	sbci	r31, 0xFE	; 254
    2852:	80 81       	ld	r24, Z
    2854:	91 81       	ldd	r25, Z+1	; 0x01
    2856:	00 97       	sbiw	r24, 0x00	; 0
    2858:	d1 f6       	brne	.-76     	; 0x280e <__stack+0x60f>
    285a:	27 c0       	rjmp	.+78     	; 0x28aa <__stack+0x6ab>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    285c:	8e 01       	movw	r16, r28
    285e:	03 5e       	subi	r16, 0xE3	; 227
    2860:	1e 4f       	sbci	r17, 0xFE	; 254
    2862:	fe 01       	movw	r30, r28
    2864:	e1 5e       	subi	r30, 0xE1	; 225
    2866:	fe 4f       	sbci	r31, 0xFE	; 254
    2868:	60 81       	ld	r22, Z
    286a:	71 81       	ldd	r23, Z+1	; 0x01
    286c:	82 81       	ldd	r24, Z+2	; 0x02
    286e:	93 81       	ldd	r25, Z+3	; 0x03
    2870:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    2874:	dc 01       	movw	r26, r24
    2876:	cb 01       	movw	r24, r22
    2878:	f8 01       	movw	r30, r16
    287a:	91 83       	std	Z+1, r25	; 0x01
    287c:	80 83       	st	Z, r24
    287e:	de 01       	movw	r26, r28
    2880:	a7 5e       	subi	r26, 0xE7	; 231
    2882:	be 4f       	sbci	r27, 0xFE	; 254
    2884:	fe 01       	movw	r30, r28
    2886:	e3 5e       	subi	r30, 0xE3	; 227
    2888:	fe 4f       	sbci	r31, 0xFE	; 254
    288a:	80 81       	ld	r24, Z
    288c:	91 81       	ldd	r25, Z+1	; 0x01
    288e:	8d 93       	st	X+, r24
    2890:	9c 93       	st	X, r25
    2892:	fe 01       	movw	r30, r28
    2894:	e7 5e       	subi	r30, 0xE7	; 231
    2896:	fe 4f       	sbci	r31, 0xFE	; 254
    2898:	80 81       	ld	r24, Z
    289a:	91 81       	ldd	r25, Z+1	; 0x01
    289c:	01 97       	sbiw	r24, 0x01	; 1
    289e:	f1 f7       	brne	.-4      	; 0x289c <__stack+0x69d>
    28a0:	fe 01       	movw	r30, r28
    28a2:	e7 5e       	subi	r30, 0xE7	; 231
    28a4:	fe 4f       	sbci	r31, 0xFE	; 254
    28a6:	91 83       	std	Z+1, r25	; 0x01
    28a8:	80 83       	st	Z, r24
				_delay_ms(100);
				STOP();
    28aa:	0e 94 31 0c 	call	0x1862	; 0x1862 <STOP>

				sharp_center_left=ADC_Conversion(10);
    28ae:	8a e0       	ldi	r24, 0x0A	; 10
    28b0:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    28b4:	80 93 35 03 	sts	0x0335, r24
				value_center_left=Sharp_GP2D12_estimation(sharp_center_left);
    28b8:	80 91 35 03 	lds	r24, 0x0335
    28bc:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Sharp_GP2D12_estimation>
    28c0:	90 93 4a 03 	sts	0x034A, r25
    28c4:	80 93 49 03 	sts	0x0349, r24
				lcd_print(1,1,value_center_left,3); 
    28c8:	20 91 49 03 	lds	r18, 0x0349
    28cc:	30 91 4a 03 	lds	r19, 0x034A
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	61 e0       	ldi	r22, 0x01	; 1
    28d4:	a9 01       	movw	r20, r18
    28d6:	23 e0       	ldi	r18, 0x03	; 3
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>

				sharp_center = ADC_Conversion(11);
    28de:	8b e0       	ldi	r24, 0x0B	; 11
    28e0:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    28e4:	80 93 19 03 	sts	0x0319, r24
				value_center = Sharp_GP2D12_estimation(sharp_center);
    28e8:	80 91 19 03 	lds	r24, 0x0319
    28ec:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Sharp_GP2D12_estimation>
    28f0:	90 93 2a 03 	sts	0x032A, r25
    28f4:	80 93 29 03 	sts	0x0329, r24
				lcd_print(1,7,value_center,3);
    28f8:	20 91 29 03 	lds	r18, 0x0329
    28fc:	30 91 2a 03 	lds	r19, 0x032A
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	67 e0       	ldi	r22, 0x07	; 7
    2904:	a9 01       	movw	r20, r18
    2906:	23 e0       	ldi	r18, 0x03	; 3
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
    290e:	e5 ce       	rjmp	.-566    	; 0x26da <__stack+0x4db>

			}
			}

			STOP();
    2910:	0e 94 31 0c 	call	0x1862	; 0x1862 <STOP>
    2914:	fe 01       	movw	r30, r28
    2916:	eb 5e       	subi	r30, 0xEB	; 235
    2918:	fe 4f       	sbci	r31, 0xFE	; 254
    291a:	80 e0       	ldi	r24, 0x00	; 0
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	aa e7       	ldi	r26, 0x7A	; 122
    2920:	b4 e4       	ldi	r27, 0x44	; 68
    2922:	80 83       	st	Z, r24
    2924:	91 83       	std	Z+1, r25	; 0x01
    2926:	a2 83       	std	Z+2, r26	; 0x02
    2928:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    292a:	8e 01       	movw	r16, r28
    292c:	0f 5e       	subi	r16, 0xEF	; 239
    292e:	1e 4f       	sbci	r17, 0xFE	; 254
    2930:	fe 01       	movw	r30, r28
    2932:	eb 5e       	subi	r30, 0xEB	; 235
    2934:	fe 4f       	sbci	r31, 0xFE	; 254
    2936:	60 81       	ld	r22, Z
    2938:	71 81       	ldd	r23, Z+1	; 0x01
    293a:	82 81       	ldd	r24, Z+2	; 0x02
    293c:	93 81       	ldd	r25, Z+3	; 0x03
    293e:	2d ec       	ldi	r18, 0xCD	; 205
    2940:	3c ec       	ldi	r19, 0xCC	; 204
    2942:	4c e2       	ldi	r20, 0x2C	; 44
    2944:	55 e4       	ldi	r21, 0x45	; 69
    2946:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    294a:	dc 01       	movw	r26, r24
    294c:	cb 01       	movw	r24, r22
    294e:	f8 01       	movw	r30, r16
    2950:	80 83       	st	Z, r24
    2952:	91 83       	std	Z+1, r25	; 0x01
    2954:	a2 83       	std	Z+2, r26	; 0x02
    2956:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2958:	fe 01       	movw	r30, r28
    295a:	ef 5e       	subi	r30, 0xEF	; 239
    295c:	fe 4f       	sbci	r31, 0xFE	; 254
    295e:	60 81       	ld	r22, Z
    2960:	71 81       	ldd	r23, Z+1	; 0x01
    2962:	82 81       	ldd	r24, Z+2	; 0x02
    2964:	93 81       	ldd	r25, Z+3	; 0x03
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	40 e8       	ldi	r20, 0x80	; 128
    296c:	5f e3       	ldi	r21, 0x3F	; 63
    296e:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
    2972:	88 23       	and	r24, r24
    2974:	44 f4       	brge	.+16     	; 0x2986 <__stack+0x787>
		__ticks = 1;
    2976:	fe 01       	movw	r30, r28
    2978:	e1 5f       	subi	r30, 0xF1	; 241
    297a:	fe 4f       	sbci	r31, 0xFE	; 254
    297c:	81 e0       	ldi	r24, 0x01	; 1
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	91 83       	std	Z+1, r25	; 0x01
    2982:	80 83       	st	Z, r24
    2984:	64 c0       	rjmp	.+200    	; 0x2a4e <__stack+0x84f>
	else if (__tmp > 65535)
    2986:	fe 01       	movw	r30, r28
    2988:	ef 5e       	subi	r30, 0xEF	; 239
    298a:	fe 4f       	sbci	r31, 0xFE	; 254
    298c:	60 81       	ld	r22, Z
    298e:	71 81       	ldd	r23, Z+1	; 0x01
    2990:	82 81       	ldd	r24, Z+2	; 0x02
    2992:	93 81       	ldd	r25, Z+3	; 0x03
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	3f ef       	ldi	r19, 0xFF	; 255
    2998:	4f e7       	ldi	r20, 0x7F	; 127
    299a:	57 e4       	ldi	r21, 0x47	; 71
    299c:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
    29a0:	18 16       	cp	r1, r24
    29a2:	0c f0       	brlt	.+2      	; 0x29a6 <__stack+0x7a7>
    29a4:	43 c0       	rjmp	.+134    	; 0x2a2c <__stack+0x82d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a6:	fe 01       	movw	r30, r28
    29a8:	eb 5e       	subi	r30, 0xEB	; 235
    29aa:	fe 4f       	sbci	r31, 0xFE	; 254
    29ac:	60 81       	ld	r22, Z
    29ae:	71 81       	ldd	r23, Z+1	; 0x01
    29b0:	82 81       	ldd	r24, Z+2	; 0x02
    29b2:	93 81       	ldd	r25, Z+3	; 0x03
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	40 e2       	ldi	r20, 0x20	; 32
    29ba:	51 e4       	ldi	r21, 0x41	; 65
    29bc:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	8e 01       	movw	r16, r28
    29c6:	01 5f       	subi	r16, 0xF1	; 241
    29c8:	1e 4f       	sbci	r17, 0xFE	; 254
    29ca:	bc 01       	movw	r22, r24
    29cc:	cd 01       	movw	r24, r26
    29ce:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    29d2:	dc 01       	movw	r26, r24
    29d4:	cb 01       	movw	r24, r22
    29d6:	f8 01       	movw	r30, r16
    29d8:	91 83       	std	Z+1, r25	; 0x01
    29da:	80 83       	st	Z, r24
    29dc:	1f c0       	rjmp	.+62     	; 0x2a1c <__stack+0x81d>
    29de:	fe 01       	movw	r30, r28
    29e0:	e3 5f       	subi	r30, 0xF3	; 243
    29e2:	fe 4f       	sbci	r31, 0xFE	; 254
    29e4:	84 e1       	ldi	r24, 0x14	; 20
    29e6:	91 e0       	ldi	r25, 0x01	; 1
    29e8:	91 83       	std	Z+1, r25	; 0x01
    29ea:	80 83       	st	Z, r24
    29ec:	fe 01       	movw	r30, r28
    29ee:	e3 5f       	subi	r30, 0xF3	; 243
    29f0:	fe 4f       	sbci	r31, 0xFE	; 254
    29f2:	80 81       	ld	r24, Z
    29f4:	91 81       	ldd	r25, Z+1	; 0x01
    29f6:	01 97       	sbiw	r24, 0x01	; 1
    29f8:	f1 f7       	brne	.-4      	; 0x29f6 <__stack+0x7f7>
    29fa:	fe 01       	movw	r30, r28
    29fc:	e3 5f       	subi	r30, 0xF3	; 243
    29fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2a00:	91 83       	std	Z+1, r25	; 0x01
    2a02:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a04:	de 01       	movw	r26, r28
    2a06:	a1 5f       	subi	r26, 0xF1	; 241
    2a08:	be 4f       	sbci	r27, 0xFE	; 254
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	e1 5f       	subi	r30, 0xF1	; 241
    2a0e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a10:	80 81       	ld	r24, Z
    2a12:	91 81       	ldd	r25, Z+1	; 0x01
    2a14:	01 97       	sbiw	r24, 0x01	; 1
    2a16:	11 96       	adiw	r26, 0x01	; 1
    2a18:	9c 93       	st	X, r25
    2a1a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a1c:	fe 01       	movw	r30, r28
    2a1e:	e1 5f       	subi	r30, 0xF1	; 241
    2a20:	fe 4f       	sbci	r31, 0xFE	; 254
    2a22:	80 81       	ld	r24, Z
    2a24:	91 81       	ldd	r25, Z+1	; 0x01
    2a26:	00 97       	sbiw	r24, 0x00	; 0
    2a28:	d1 f6       	brne	.-76     	; 0x29de <__stack+0x7df>
    2a2a:	28 c0       	rjmp	.+80     	; 0x2a7c <__stack+0x87d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a2c:	8e 01       	movw	r16, r28
    2a2e:	01 5f       	subi	r16, 0xF1	; 241
    2a30:	1e 4f       	sbci	r17, 0xFE	; 254
    2a32:	fe 01       	movw	r30, r28
    2a34:	ef 5e       	subi	r30, 0xEF	; 239
    2a36:	fe 4f       	sbci	r31, 0xFE	; 254
    2a38:	60 81       	ld	r22, Z
    2a3a:	71 81       	ldd	r23, Z+1	; 0x01
    2a3c:	82 81       	ldd	r24, Z+2	; 0x02
    2a3e:	93 81       	ldd	r25, Z+3	; 0x03
    2a40:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	f8 01       	movw	r30, r16
    2a4a:	91 83       	std	Z+1, r25	; 0x01
    2a4c:	80 83       	st	Z, r24
    2a4e:	de 01       	movw	r26, r28
    2a50:	a5 5f       	subi	r26, 0xF5	; 245
    2a52:	be 4f       	sbci	r27, 0xFE	; 254
    2a54:	fe 01       	movw	r30, r28
    2a56:	e1 5f       	subi	r30, 0xF1	; 241
    2a58:	fe 4f       	sbci	r31, 0xFE	; 254
    2a5a:	80 81       	ld	r24, Z
    2a5c:	91 81       	ldd	r25, Z+1	; 0x01
    2a5e:	11 96       	adiw	r26, 0x01	; 1
    2a60:	9c 93       	st	X, r25
    2a62:	8e 93       	st	-X, r24
    2a64:	fe 01       	movw	r30, r28
    2a66:	e5 5f       	subi	r30, 0xF5	; 245
    2a68:	fe 4f       	sbci	r31, 0xFE	; 254
    2a6a:	80 81       	ld	r24, Z
    2a6c:	91 81       	ldd	r25, Z+1	; 0x01
    2a6e:	01 97       	sbiw	r24, 0x01	; 1
    2a70:	f1 f7       	brne	.-4      	; 0x2a6e <__stack+0x86f>
    2a72:	fe 01       	movw	r30, r28
    2a74:	e5 5f       	subi	r30, 0xF5	; 245
    2a76:	fe 4f       	sbci	r31, 0xFE	; 254
    2a78:	91 83       	std	Z+1, r25	; 0x01
    2a7a:	80 83       	st	Z, r24
			_delay_ms(1000);
			if (((value_center_left <= (temp-40)) && (value_center <= (temp-40))) && (value_center < value_center_left))
    2a7c:	80 91 1f 03 	lds	r24, 0x031F
    2a80:	90 91 20 03 	lds	r25, 0x0320
    2a84:	9c 01       	movw	r18, r24
    2a86:	28 52       	subi	r18, 0x28	; 40
    2a88:	30 40       	sbci	r19, 0x00	; 0
    2a8a:	80 91 49 03 	lds	r24, 0x0349
    2a8e:	90 91 4a 03 	lds	r25, 0x034A
    2a92:	28 17       	cp	r18, r24
    2a94:	39 07       	cpc	r19, r25
    2a96:	08 f4       	brcc	.+2      	; 0x2a9a <__stack+0x89b>
    2a98:	20 ce       	rjmp	.-960    	; 0x26da <__stack+0x4db>
    2a9a:	80 91 1f 03 	lds	r24, 0x031F
    2a9e:	90 91 20 03 	lds	r25, 0x0320
    2aa2:	9c 01       	movw	r18, r24
    2aa4:	28 52       	subi	r18, 0x28	; 40
    2aa6:	30 40       	sbci	r19, 0x00	; 0
    2aa8:	80 91 29 03 	lds	r24, 0x0329
    2aac:	90 91 2a 03 	lds	r25, 0x032A
    2ab0:	28 17       	cp	r18, r24
    2ab2:	39 07       	cpc	r19, r25
    2ab4:	08 f4       	brcc	.+2      	; 0x2ab8 <__stack+0x8b9>
    2ab6:	11 ce       	rjmp	.-990    	; 0x26da <__stack+0x4db>
    2ab8:	20 91 29 03 	lds	r18, 0x0329
    2abc:	30 91 2a 03 	lds	r19, 0x032A
    2ac0:	80 91 49 03 	lds	r24, 0x0349
    2ac4:	90 91 4a 03 	lds	r25, 0x034A
    2ac8:	28 17       	cp	r18, r24
    2aca:	39 07       	cpc	r19, r25
    2acc:	08 f0       	brcs	.+2      	; 0x2ad0 <__stack+0x8d1>
    2ace:	05 ce       	rjmp	.-1014   	; 0x26da <__stack+0x4db>
    2ad0:	47 c2       	rjmp	.+1166   	; 0x2f60 <__stack+0xd61>
			else
			{
			goto backl;
			}
		}
		else if ((value_right < 270) && (value_right > 230))
    2ad2:	80 91 3f 03 	lds	r24, 0x033F
    2ad6:	90 91 40 03 	lds	r25, 0x0340
    2ada:	f1 e0       	ldi	r31, 0x01	; 1
    2adc:	8e 30       	cpi	r24, 0x0E	; 14
    2ade:	9f 07       	cpc	r25, r31
    2ae0:	08 f0       	brcs	.+2      	; 0x2ae4 <__stack+0x8e5>
    2ae2:	3e c2       	rjmp	.+1148   	; 0x2f60 <__stack+0xd61>
    2ae4:	80 91 3f 03 	lds	r24, 0x033F
    2ae8:	90 91 40 03 	lds	r25, 0x0340
    2aec:	87 3e       	cpi	r24, 0xE7	; 231
    2aee:	91 05       	cpc	r25, r1
    2af0:	08 f4       	brcc	.+2      	; 0x2af4 <__stack+0x8f5>
    2af2:	36 c2       	rjmp	.+1132   	; 0x2f60 <__stack+0xd61>
		{
			flag_turn=2;
    2af4:	82 e0       	ldi	r24, 0x02	; 2
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	90 93 0b 03 	sts	0x030B, r25
    2afc:	80 93 0a 03 	sts	0x030A, r24
			temp = value_right;
    2b00:	80 91 3f 03 	lds	r24, 0x033F
    2b04:	90 91 40 03 	lds	r25, 0x0340
    2b08:	90 93 20 03 	sts	0x0320, r25
    2b0c:	80 93 1f 03 	sts	0x031F, r24
			
			FORWARD();
    2b10:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <FORWARD>
			RIGHT_TURN();
    2b14:	0e 94 10 0c 	call	0x1820	; 0x1820 <RIGHT_TURN>
			ANGLE_ROTATE(80);
    2b18:	80 e5       	ldi	r24, 0x50	; 80
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	0e 94 75 0c 	call	0x18ea	; 0x18ea <ANGLE_ROTATE>
			/* Front IR On */
			sharp_center_left=ADC_Conversion(10);
    2b20:	8a e0       	ldi	r24, 0x0A	; 10
    2b22:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    2b26:	80 93 35 03 	sts	0x0335, r24
			value_center_left=Sharp_GP2D12_estimation(sharp_center_left);
    2b2a:	80 91 35 03 	lds	r24, 0x0335
    2b2e:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Sharp_GP2D12_estimation>
    2b32:	90 93 4a 03 	sts	0x034A, r25
    2b36:	80 93 49 03 	sts	0x0349, r24
			lcd_print(1,1,value_center_left,3); 
    2b3a:	20 91 49 03 	lds	r18, 0x0349
    2b3e:	30 91 4a 03 	lds	r19, 0x034A
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	61 e0       	ldi	r22, 0x01	; 1
    2b46:	a9 01       	movw	r20, r18
    2b48:	23 e0       	ldi	r18, 0x03	; 3
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>

			sharp_center = ADC_Conversion(11);
    2b50:	8b e0       	ldi	r24, 0x0B	; 11
    2b52:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    2b56:	80 93 19 03 	sts	0x0319, r24
			value_center = Sharp_GP2D12_estimation(sharp_center);
    2b5a:	80 91 19 03 	lds	r24, 0x0319
    2b5e:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Sharp_GP2D12_estimation>
    2b62:	90 93 2a 03 	sts	0x032A, r25
    2b66:	80 93 29 03 	sts	0x0329, r24
			lcd_print(1,7,value_center,3);
    2b6a:	20 91 29 03 	lds	r18, 0x0329
    2b6e:	30 91 2a 03 	lds	r19, 0x032A
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	67 e0       	ldi	r22, 0x07	; 7
    2b76:	a9 01       	movw	r20, r18
    2b78:	23 e0       	ldi	r18, 0x03	; 3
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
					//&& (value_center >= (temp-80)

			backr:
			while(1)
			{
			if ((value_center_left <= (temp-40)) && (value_center <= (temp-40)))
    2b80:	80 91 1f 03 	lds	r24, 0x031F
    2b84:	90 91 20 03 	lds	r25, 0x0320
    2b88:	9c 01       	movw	r18, r24
    2b8a:	28 52       	subi	r18, 0x28	; 40
    2b8c:	30 40       	sbci	r19, 0x00	; 0
    2b8e:	80 91 49 03 	lds	r24, 0x0349
    2b92:	90 91 4a 03 	lds	r25, 0x034A
    2b96:	28 17       	cp	r18, r24
    2b98:	39 07       	cpc	r19, r25
    2b9a:	78 f0       	brcs	.+30     	; 0x2bba <__stack+0x9bb>
    2b9c:	80 91 1f 03 	lds	r24, 0x031F
    2ba0:	90 91 20 03 	lds	r25, 0x0320
    2ba4:	9c 01       	movw	r18, r24
    2ba6:	28 52       	subi	r18, 0x28	; 40
    2ba8:	30 40       	sbci	r19, 0x00	; 0
    2baa:	80 91 29 03 	lds	r24, 0x0329
    2bae:	90 91 2a 03 	lds	r25, 0x032A
    2bb2:	28 17       	cp	r18, r24
    2bb4:	39 07       	cpc	r19, r25
    2bb6:	08 f0       	brcs	.+2      	; 0x2bba <__stack+0x9bb>
    2bb8:	f3 c0       	rjmp	.+486    	; 0x2da0 <__stack+0xba1>
				break;
			}

			else
			{
			    count++;
    2bba:	80 91 3d 03 	lds	r24, 0x033D
    2bbe:	90 91 3e 03 	lds	r25, 0x033E
    2bc2:	01 96       	adiw	r24, 0x01	; 1
    2bc4:	90 93 3e 03 	sts	0x033E, r25
    2bc8:	80 93 3d 03 	sts	0x033D, r24
				FORWARD();
    2bcc:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <FORWARD>
				RIGHT_TURN_SOFT();
    2bd0:	0e 94 1b 0c 	call	0x1836	; 0x1836 <RIGHT_TURN_SOFT>
    2bd4:	fe 01       	movw	r30, r28
    2bd6:	e9 5f       	subi	r30, 0xF9	; 249
    2bd8:	fe 4f       	sbci	r31, 0xFE	; 254
    2bda:	80 e0       	ldi	r24, 0x00	; 0
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	a8 ec       	ldi	r26, 0xC8	; 200
    2be0:	b2 e4       	ldi	r27, 0x42	; 66
    2be2:	80 83       	st	Z, r24
    2be4:	91 83       	std	Z+1, r25	; 0x01
    2be6:	a2 83       	std	Z+2, r26	; 0x02
    2be8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bea:	8e 01       	movw	r16, r28
    2bec:	0d 5f       	subi	r16, 0xFD	; 253
    2bee:	1e 4f       	sbci	r17, 0xFE	; 254
    2bf0:	fe 01       	movw	r30, r28
    2bf2:	e9 5f       	subi	r30, 0xF9	; 249
    2bf4:	fe 4f       	sbci	r31, 0xFE	; 254
    2bf6:	60 81       	ld	r22, Z
    2bf8:	71 81       	ldd	r23, Z+1	; 0x01
    2bfa:	82 81       	ldd	r24, Z+2	; 0x02
    2bfc:	93 81       	ldd	r25, Z+3	; 0x03
    2bfe:	2d ec       	ldi	r18, 0xCD	; 205
    2c00:	3c ec       	ldi	r19, 0xCC	; 204
    2c02:	4c e2       	ldi	r20, 0x2C	; 44
    2c04:	55 e4       	ldi	r21, 0x45	; 69
    2c06:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	cb 01       	movw	r24, r22
    2c0e:	f8 01       	movw	r30, r16
    2c10:	80 83       	st	Z, r24
    2c12:	91 83       	std	Z+1, r25	; 0x01
    2c14:	a2 83       	std	Z+2, r26	; 0x02
    2c16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c18:	fe 01       	movw	r30, r28
    2c1a:	ed 5f       	subi	r30, 0xFD	; 253
    2c1c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c1e:	60 81       	ld	r22, Z
    2c20:	71 81       	ldd	r23, Z+1	; 0x01
    2c22:	82 81       	ldd	r24, Z+2	; 0x02
    2c24:	93 81       	ldd	r25, Z+3	; 0x03
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	40 e8       	ldi	r20, 0x80	; 128
    2c2c:	5f e3       	ldi	r21, 0x3F	; 63
    2c2e:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
    2c32:	88 23       	and	r24, r24
    2c34:	44 f4       	brge	.+16     	; 0x2c46 <__stack+0xa47>
		__ticks = 1;
    2c36:	fe 01       	movw	r30, r28
    2c38:	ef 5f       	subi	r30, 0xFF	; 255
    2c3a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	91 83       	std	Z+1, r25	; 0x01
    2c42:	80 83       	st	Z, r24
    2c44:	64 c0       	rjmp	.+200    	; 0x2d0e <__stack+0xb0f>
	else if (__tmp > 65535)
    2c46:	fe 01       	movw	r30, r28
    2c48:	ed 5f       	subi	r30, 0xFD	; 253
    2c4a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c4c:	60 81       	ld	r22, Z
    2c4e:	71 81       	ldd	r23, Z+1	; 0x01
    2c50:	82 81       	ldd	r24, Z+2	; 0x02
    2c52:	93 81       	ldd	r25, Z+3	; 0x03
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	3f ef       	ldi	r19, 0xFF	; 255
    2c58:	4f e7       	ldi	r20, 0x7F	; 127
    2c5a:	57 e4       	ldi	r21, 0x47	; 71
    2c5c:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
    2c60:	18 16       	cp	r1, r24
    2c62:	0c f0       	brlt	.+2      	; 0x2c66 <__stack+0xa67>
    2c64:	43 c0       	rjmp	.+134    	; 0x2cec <__stack+0xaed>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c66:	fe 01       	movw	r30, r28
    2c68:	e9 5f       	subi	r30, 0xF9	; 249
    2c6a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c6c:	60 81       	ld	r22, Z
    2c6e:	71 81       	ldd	r23, Z+1	; 0x01
    2c70:	82 81       	ldd	r24, Z+2	; 0x02
    2c72:	93 81       	ldd	r25, Z+3	; 0x03
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	40 e2       	ldi	r20, 0x20	; 32
    2c7a:	51 e4       	ldi	r21, 0x41	; 65
    2c7c:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    2c80:	dc 01       	movw	r26, r24
    2c82:	cb 01       	movw	r24, r22
    2c84:	8e 01       	movw	r16, r28
    2c86:	0f 5f       	subi	r16, 0xFF	; 255
    2c88:	1e 4f       	sbci	r17, 0xFE	; 254
    2c8a:	bc 01       	movw	r22, r24
    2c8c:	cd 01       	movw	r24, r26
    2c8e:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    2c92:	dc 01       	movw	r26, r24
    2c94:	cb 01       	movw	r24, r22
    2c96:	f8 01       	movw	r30, r16
    2c98:	91 83       	std	Z+1, r25	; 0x01
    2c9a:	80 83       	st	Z, r24
    2c9c:	1f c0       	rjmp	.+62     	; 0x2cdc <__stack+0xadd>
    2c9e:	fe 01       	movw	r30, r28
    2ca0:	e1 50       	subi	r30, 0x01	; 1
    2ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca4:	84 e1       	ldi	r24, 0x14	; 20
    2ca6:	91 e0       	ldi	r25, 0x01	; 1
    2ca8:	91 83       	std	Z+1, r25	; 0x01
    2caa:	80 83       	st	Z, r24
    2cac:	fe 01       	movw	r30, r28
    2cae:	e1 50       	subi	r30, 0x01	; 1
    2cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb2:	80 81       	ld	r24, Z
    2cb4:	91 81       	ldd	r25, Z+1	; 0x01
    2cb6:	01 97       	sbiw	r24, 0x01	; 1
    2cb8:	f1 f7       	brne	.-4      	; 0x2cb6 <__stack+0xab7>
    2cba:	fe 01       	movw	r30, r28
    2cbc:	e1 50       	subi	r30, 0x01	; 1
    2cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc0:	91 83       	std	Z+1, r25	; 0x01
    2cc2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cc4:	de 01       	movw	r26, r28
    2cc6:	af 5f       	subi	r26, 0xFF	; 255
    2cc8:	be 4f       	sbci	r27, 0xFE	; 254
    2cca:	fe 01       	movw	r30, r28
    2ccc:	ef 5f       	subi	r30, 0xFF	; 255
    2cce:	fe 4f       	sbci	r31, 0xFE	; 254
    2cd0:	80 81       	ld	r24, Z
    2cd2:	91 81       	ldd	r25, Z+1	; 0x01
    2cd4:	01 97       	sbiw	r24, 0x01	; 1
    2cd6:	11 96       	adiw	r26, 0x01	; 1
    2cd8:	9c 93       	st	X, r25
    2cda:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cdc:	fe 01       	movw	r30, r28
    2cde:	ef 5f       	subi	r30, 0xFF	; 255
    2ce0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ce2:	80 81       	ld	r24, Z
    2ce4:	91 81       	ldd	r25, Z+1	; 0x01
    2ce6:	00 97       	sbiw	r24, 0x00	; 0
    2ce8:	d1 f6       	brne	.-76     	; 0x2c9e <__stack+0xa9f>
    2cea:	27 c0       	rjmp	.+78     	; 0x2d3a <__stack+0xb3b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cec:	8e 01       	movw	r16, r28
    2cee:	0f 5f       	subi	r16, 0xFF	; 255
    2cf0:	1e 4f       	sbci	r17, 0xFE	; 254
    2cf2:	fe 01       	movw	r30, r28
    2cf4:	ed 5f       	subi	r30, 0xFD	; 253
    2cf6:	fe 4f       	sbci	r31, 0xFE	; 254
    2cf8:	60 81       	ld	r22, Z
    2cfa:	71 81       	ldd	r23, Z+1	; 0x01
    2cfc:	82 81       	ldd	r24, Z+2	; 0x02
    2cfe:	93 81       	ldd	r25, Z+3	; 0x03
    2d00:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    2d04:	dc 01       	movw	r26, r24
    2d06:	cb 01       	movw	r24, r22
    2d08:	f8 01       	movw	r30, r16
    2d0a:	91 83       	std	Z+1, r25	; 0x01
    2d0c:	80 83       	st	Z, r24
    2d0e:	de 01       	movw	r26, r28
    2d10:	a3 50       	subi	r26, 0x03	; 3
    2d12:	bf 4f       	sbci	r27, 0xFF	; 255
    2d14:	fe 01       	movw	r30, r28
    2d16:	ef 5f       	subi	r30, 0xFF	; 255
    2d18:	fe 4f       	sbci	r31, 0xFE	; 254
    2d1a:	80 81       	ld	r24, Z
    2d1c:	91 81       	ldd	r25, Z+1	; 0x01
    2d1e:	8d 93       	st	X+, r24
    2d20:	9c 93       	st	X, r25
    2d22:	fe 01       	movw	r30, r28
    2d24:	e3 50       	subi	r30, 0x03	; 3
    2d26:	ff 4f       	sbci	r31, 0xFF	; 255
    2d28:	80 81       	ld	r24, Z
    2d2a:	91 81       	ldd	r25, Z+1	; 0x01
    2d2c:	01 97       	sbiw	r24, 0x01	; 1
    2d2e:	f1 f7       	brne	.-4      	; 0x2d2c <__stack+0xb2d>
    2d30:	fe 01       	movw	r30, r28
    2d32:	e3 50       	subi	r30, 0x03	; 3
    2d34:	ff 4f       	sbci	r31, 0xFF	; 255
    2d36:	91 83       	std	Z+1, r25	; 0x01
    2d38:	80 83       	st	Z, r24
				_delay_ms(100);
				STOP();
    2d3a:	0e 94 31 0c 	call	0x1862	; 0x1862 <STOP>


				sharp_center_left=ADC_Conversion(10);
    2d3e:	8a e0       	ldi	r24, 0x0A	; 10
    2d40:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    2d44:	80 93 35 03 	sts	0x0335, r24
				value_center_left=Sharp_GP2D12_estimation(sharp_center_left);
    2d48:	80 91 35 03 	lds	r24, 0x0335
    2d4c:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Sharp_GP2D12_estimation>
    2d50:	90 93 4a 03 	sts	0x034A, r25
    2d54:	80 93 49 03 	sts	0x0349, r24
				lcd_print(1,1,value_center_left,3); 
    2d58:	20 91 49 03 	lds	r18, 0x0349
    2d5c:	30 91 4a 03 	lds	r19, 0x034A
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	61 e0       	ldi	r22, 0x01	; 1
    2d64:	a9 01       	movw	r20, r18
    2d66:	23 e0       	ldi	r18, 0x03	; 3
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>

				sharp_center = ADC_Conversion(11);
    2d6e:	8b e0       	ldi	r24, 0x0B	; 11
    2d70:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    2d74:	80 93 19 03 	sts	0x0319, r24
				value_center = Sharp_GP2D12_estimation(sharp_center);
    2d78:	80 91 19 03 	lds	r24, 0x0319
    2d7c:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Sharp_GP2D12_estimation>
    2d80:	90 93 2a 03 	sts	0x032A, r25
    2d84:	80 93 29 03 	sts	0x0329, r24
				lcd_print(1,7,value_center,3);
    2d88:	20 91 29 03 	lds	r18, 0x0329
    2d8c:	30 91 2a 03 	lds	r19, 0x032A
    2d90:	81 e0       	ldi	r24, 0x01	; 1
    2d92:	67 e0       	ldi	r22, 0x07	; 7
    2d94:	a9 01       	movw	r20, r18
    2d96:	23 e0       	ldi	r18, 0x03	; 3
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
    2d9e:	f0 ce       	rjmp	.-544    	; 0x2b80 <__stack+0x981>
			}


			}
				
			STOP();
    2da0:	0e 94 31 0c 	call	0x1862	; 0x1862 <STOP>
    2da4:	fe 01       	movw	r30, r28
    2da6:	e7 50       	subi	r30, 0x07	; 7
    2da8:	ff 4f       	sbci	r31, 0xFF	; 255
    2daa:	80 e0       	ldi	r24, 0x00	; 0
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	aa e7       	ldi	r26, 0x7A	; 122
    2db0:	b4 e4       	ldi	r27, 0x44	; 68
    2db2:	80 83       	st	Z, r24
    2db4:	91 83       	std	Z+1, r25	; 0x01
    2db6:	a2 83       	std	Z+2, r26	; 0x02
    2db8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dba:	8e 01       	movw	r16, r28
    2dbc:	0b 50       	subi	r16, 0x0B	; 11
    2dbe:	1f 4f       	sbci	r17, 0xFF	; 255
    2dc0:	fe 01       	movw	r30, r28
    2dc2:	e7 50       	subi	r30, 0x07	; 7
    2dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc6:	60 81       	ld	r22, Z
    2dc8:	71 81       	ldd	r23, Z+1	; 0x01
    2dca:	82 81       	ldd	r24, Z+2	; 0x02
    2dcc:	93 81       	ldd	r25, Z+3	; 0x03
    2dce:	2d ec       	ldi	r18, 0xCD	; 205
    2dd0:	3c ec       	ldi	r19, 0xCC	; 204
    2dd2:	4c e2       	ldi	r20, 0x2C	; 44
    2dd4:	55 e4       	ldi	r21, 0x45	; 69
    2dd6:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    2dda:	dc 01       	movw	r26, r24
    2ddc:	cb 01       	movw	r24, r22
    2dde:	f8 01       	movw	r30, r16
    2de0:	80 83       	st	Z, r24
    2de2:	91 83       	std	Z+1, r25	; 0x01
    2de4:	a2 83       	std	Z+2, r26	; 0x02
    2de6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2de8:	fe 01       	movw	r30, r28
    2dea:	eb 50       	subi	r30, 0x0B	; 11
    2dec:	ff 4f       	sbci	r31, 0xFF	; 255
    2dee:	60 81       	ld	r22, Z
    2df0:	71 81       	ldd	r23, Z+1	; 0x01
    2df2:	82 81       	ldd	r24, Z+2	; 0x02
    2df4:	93 81       	ldd	r25, Z+3	; 0x03
    2df6:	20 e0       	ldi	r18, 0x00	; 0
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	40 e8       	ldi	r20, 0x80	; 128
    2dfc:	5f e3       	ldi	r21, 0x3F	; 63
    2dfe:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
    2e02:	88 23       	and	r24, r24
    2e04:	44 f4       	brge	.+16     	; 0x2e16 <__stack+0xc17>
		__ticks = 1;
    2e06:	fe 01       	movw	r30, r28
    2e08:	ed 50       	subi	r30, 0x0D	; 13
    2e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	91 83       	std	Z+1, r25	; 0x01
    2e12:	80 83       	st	Z, r24
    2e14:	64 c0       	rjmp	.+200    	; 0x2ede <__stack+0xcdf>
	else if (__tmp > 65535)
    2e16:	fe 01       	movw	r30, r28
    2e18:	eb 50       	subi	r30, 0x0B	; 11
    2e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1c:	60 81       	ld	r22, Z
    2e1e:	71 81       	ldd	r23, Z+1	; 0x01
    2e20:	82 81       	ldd	r24, Z+2	; 0x02
    2e22:	93 81       	ldd	r25, Z+3	; 0x03
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	3f ef       	ldi	r19, 0xFF	; 255
    2e28:	4f e7       	ldi	r20, 0x7F	; 127
    2e2a:	57 e4       	ldi	r21, 0x47	; 71
    2e2c:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
    2e30:	18 16       	cp	r1, r24
    2e32:	0c f0       	brlt	.+2      	; 0x2e36 <__stack+0xc37>
    2e34:	43 c0       	rjmp	.+134    	; 0x2ebc <__stack+0xcbd>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e36:	fe 01       	movw	r30, r28
    2e38:	e7 50       	subi	r30, 0x07	; 7
    2e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3c:	60 81       	ld	r22, Z
    2e3e:	71 81       	ldd	r23, Z+1	; 0x01
    2e40:	82 81       	ldd	r24, Z+2	; 0x02
    2e42:	93 81       	ldd	r25, Z+3	; 0x03
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	40 e2       	ldi	r20, 0x20	; 32
    2e4a:	51 e4       	ldi	r21, 0x41	; 65
    2e4c:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    2e50:	dc 01       	movw	r26, r24
    2e52:	cb 01       	movw	r24, r22
    2e54:	8e 01       	movw	r16, r28
    2e56:	0d 50       	subi	r16, 0x0D	; 13
    2e58:	1f 4f       	sbci	r17, 0xFF	; 255
    2e5a:	bc 01       	movw	r22, r24
    2e5c:	cd 01       	movw	r24, r26
    2e5e:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    2e62:	dc 01       	movw	r26, r24
    2e64:	cb 01       	movw	r24, r22
    2e66:	f8 01       	movw	r30, r16
    2e68:	91 83       	std	Z+1, r25	; 0x01
    2e6a:	80 83       	st	Z, r24
    2e6c:	1f c0       	rjmp	.+62     	; 0x2eac <__stack+0xcad>
    2e6e:	fe 01       	movw	r30, r28
    2e70:	ef 50       	subi	r30, 0x0F	; 15
    2e72:	ff 4f       	sbci	r31, 0xFF	; 255
    2e74:	84 e1       	ldi	r24, 0x14	; 20
    2e76:	91 e0       	ldi	r25, 0x01	; 1
    2e78:	91 83       	std	Z+1, r25	; 0x01
    2e7a:	80 83       	st	Z, r24
    2e7c:	fe 01       	movw	r30, r28
    2e7e:	ef 50       	subi	r30, 0x0F	; 15
    2e80:	ff 4f       	sbci	r31, 0xFF	; 255
    2e82:	80 81       	ld	r24, Z
    2e84:	91 81       	ldd	r25, Z+1	; 0x01
    2e86:	01 97       	sbiw	r24, 0x01	; 1
    2e88:	f1 f7       	brne	.-4      	; 0x2e86 <__stack+0xc87>
    2e8a:	fe 01       	movw	r30, r28
    2e8c:	ef 50       	subi	r30, 0x0F	; 15
    2e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e90:	91 83       	std	Z+1, r25	; 0x01
    2e92:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e94:	de 01       	movw	r26, r28
    2e96:	ad 50       	subi	r26, 0x0D	; 13
    2e98:	bf 4f       	sbci	r27, 0xFF	; 255
    2e9a:	fe 01       	movw	r30, r28
    2e9c:	ed 50       	subi	r30, 0x0D	; 13
    2e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea0:	80 81       	ld	r24, Z
    2ea2:	91 81       	ldd	r25, Z+1	; 0x01
    2ea4:	01 97       	sbiw	r24, 0x01	; 1
    2ea6:	11 96       	adiw	r26, 0x01	; 1
    2ea8:	9c 93       	st	X, r25
    2eaa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eac:	fe 01       	movw	r30, r28
    2eae:	ed 50       	subi	r30, 0x0D	; 13
    2eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb2:	80 81       	ld	r24, Z
    2eb4:	91 81       	ldd	r25, Z+1	; 0x01
    2eb6:	00 97       	sbiw	r24, 0x00	; 0
    2eb8:	d1 f6       	brne	.-76     	; 0x2e6e <__stack+0xc6f>
    2eba:	28 c0       	rjmp	.+80     	; 0x2f0c <__stack+0xd0d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ebc:	8e 01       	movw	r16, r28
    2ebe:	0d 50       	subi	r16, 0x0D	; 13
    2ec0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ec2:	fe 01       	movw	r30, r28
    2ec4:	eb 50       	subi	r30, 0x0B	; 11
    2ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec8:	60 81       	ld	r22, Z
    2eca:	71 81       	ldd	r23, Z+1	; 0x01
    2ecc:	82 81       	ldd	r24, Z+2	; 0x02
    2ece:	93 81       	ldd	r25, Z+3	; 0x03
    2ed0:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    2ed4:	dc 01       	movw	r26, r24
    2ed6:	cb 01       	movw	r24, r22
    2ed8:	f8 01       	movw	r30, r16
    2eda:	91 83       	std	Z+1, r25	; 0x01
    2edc:	80 83       	st	Z, r24
    2ede:	de 01       	movw	r26, r28
    2ee0:	a1 51       	subi	r26, 0x11	; 17
    2ee2:	bf 4f       	sbci	r27, 0xFF	; 255
    2ee4:	fe 01       	movw	r30, r28
    2ee6:	ed 50       	subi	r30, 0x0D	; 13
    2ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eea:	80 81       	ld	r24, Z
    2eec:	91 81       	ldd	r25, Z+1	; 0x01
    2eee:	11 96       	adiw	r26, 0x01	; 1
    2ef0:	9c 93       	st	X, r25
    2ef2:	8e 93       	st	-X, r24
    2ef4:	fe 01       	movw	r30, r28
    2ef6:	e1 51       	subi	r30, 0x11	; 17
    2ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    2efa:	80 81       	ld	r24, Z
    2efc:	91 81       	ldd	r25, Z+1	; 0x01
    2efe:	01 97       	sbiw	r24, 0x01	; 1
    2f00:	f1 f7       	brne	.-4      	; 0x2efe <__stack+0xcff>
    2f02:	fe 01       	movw	r30, r28
    2f04:	e1 51       	subi	r30, 0x11	; 17
    2f06:	ff 4f       	sbci	r31, 0xFF	; 255
    2f08:	91 83       	std	Z+1, r25	; 0x01
    2f0a:	80 83       	st	Z, r24
			_delay_ms(1000);
			if (((value_center_left <= (temp-40)) && (value_center <= (temp-40))) && (value_center < value_center_left))
    2f0c:	80 91 1f 03 	lds	r24, 0x031F
    2f10:	90 91 20 03 	lds	r25, 0x0320
    2f14:	9c 01       	movw	r18, r24
    2f16:	28 52       	subi	r18, 0x28	; 40
    2f18:	30 40       	sbci	r19, 0x00	; 0
    2f1a:	80 91 49 03 	lds	r24, 0x0349
    2f1e:	90 91 4a 03 	lds	r25, 0x034A
    2f22:	28 17       	cp	r18, r24
    2f24:	39 07       	cpc	r19, r25
    2f26:	08 f4       	brcc	.+2      	; 0x2f2a <__stack+0xd2b>
    2f28:	2b ce       	rjmp	.-938    	; 0x2b80 <__stack+0x981>
    2f2a:	80 91 1f 03 	lds	r24, 0x031F
    2f2e:	90 91 20 03 	lds	r25, 0x0320
    2f32:	9c 01       	movw	r18, r24
    2f34:	28 52       	subi	r18, 0x28	; 40
    2f36:	30 40       	sbci	r19, 0x00	; 0
    2f38:	80 91 29 03 	lds	r24, 0x0329
    2f3c:	90 91 2a 03 	lds	r25, 0x032A
    2f40:	28 17       	cp	r18, r24
    2f42:	39 07       	cpc	r19, r25
    2f44:	08 f4       	brcc	.+2      	; 0x2f48 <__stack+0xd49>
    2f46:	1c ce       	rjmp	.-968    	; 0x2b80 <__stack+0x981>
    2f48:	20 91 29 03 	lds	r18, 0x0329
    2f4c:	30 91 2a 03 	lds	r19, 0x032A
    2f50:	80 91 49 03 	lds	r24, 0x0349
    2f54:	90 91 4a 03 	lds	r25, 0x034A
    2f58:	28 17       	cp	r18, r24
    2f5a:	39 07       	cpc	r19, r25
    2f5c:	08 f0       	brcs	.+2      	; 0x2f60 <__stack+0xd61>
    2f5e:	10 ce       	rjmp	.-992    	; 0x2b80 <__stack+0x981>

		// Pick and Place

		// Settle at particular distance from object

		sharp_center = ADC_Conversion(11);
    2f60:	8b e0       	ldi	r24, 0x0B	; 11
    2f62:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    2f66:	80 93 19 03 	sts	0x0319, r24
		value_center = Sharp_GP2D12_estimation(sharp_center);
    2f6a:	80 91 19 03 	lds	r24, 0x0319
    2f6e:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Sharp_GP2D12_estimation>
    2f72:	90 93 2a 03 	sts	0x032A, r25
    2f76:	80 93 29 03 	sts	0x0329, r24
		lcd_print(1,7,value_center,3);
    2f7a:	20 91 29 03 	lds	r18, 0x0329
    2f7e:	30 91 2a 03 	lds	r19, 0x032A
    2f82:	81 e0       	ldi	r24, 0x01	; 1
    2f84:	67 e0       	ldi	r22, 0x07	; 7
    2f86:	a9 01       	movw	r20, r18
    2f88:	23 e0       	ldi	r18, 0x03	; 3
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>


		sharp_center_left=ADC_Conversion(10);
    2f90:	8a e0       	ldi	r24, 0x0A	; 10
    2f92:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    2f96:	80 93 35 03 	sts	0x0335, r24
				value_center_left=Sharp_GP2D12_estimation(sharp_center_left);
    2f9a:	80 91 35 03 	lds	r24, 0x0335
    2f9e:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Sharp_GP2D12_estimation>
    2fa2:	90 93 4a 03 	sts	0x034A, r25
    2fa6:	80 93 49 03 	sts	0x0349, r24
				lcd_print(1,1,value_center_left,3); 
    2faa:	20 91 49 03 	lds	r18, 0x0349
    2fae:	30 91 4a 03 	lds	r19, 0x034A
    2fb2:	81 e0       	ldi	r24, 0x01	; 1
    2fb4:	61 e0       	ldi	r22, 0x01	; 1
    2fb6:	a9 01       	movw	r20, r18
    2fb8:	23 e0       	ldi	r18, 0x03	; 3
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>

				if(value_center <= value_center_left)
    2fc0:	20 91 29 03 	lds	r18, 0x0329
    2fc4:	30 91 2a 03 	lds	r19, 0x032A
    2fc8:	80 91 49 03 	lds	r24, 0x0349
    2fcc:	90 91 4a 03 	lds	r25, 0x034A
    2fd0:	82 17       	cp	r24, r18
    2fd2:	93 07       	cpc	r25, r19
    2fd4:	58 f0       	brcs	.+22     	; 0x2fec <__stack+0xded>
				{
					temp1=value_center-82;
    2fd6:	80 91 29 03 	lds	r24, 0x0329
    2fda:	90 91 2a 03 	lds	r25, 0x032A
    2fde:	82 55       	subi	r24, 0x52	; 82
    2fe0:	90 40       	sbci	r25, 0x00	; 0
    2fe2:	90 93 28 03 	sts	0x0328, r25
    2fe6:	80 93 27 03 	sts	0x0327, r24
    2fea:	15 c0       	rjmp	.+42     	; 0x3016 <__stack+0xe17>
				}

				else if(value_center > value_center_left)
    2fec:	20 91 29 03 	lds	r18, 0x0329
    2ff0:	30 91 2a 03 	lds	r19, 0x032A
    2ff4:	80 91 49 03 	lds	r24, 0x0349
    2ff8:	90 91 4a 03 	lds	r25, 0x034A
    2ffc:	82 17       	cp	r24, r18
    2ffe:	93 07       	cpc	r25, r19
    3000:	50 f4       	brcc	.+20     	; 0x3016 <__stack+0xe17>
				{
					temp1=value_center_left-82;
    3002:	80 91 49 03 	lds	r24, 0x0349
    3006:	90 91 4a 03 	lds	r25, 0x034A
    300a:	82 55       	subi	r24, 0x52	; 82
    300c:	90 40       	sbci	r25, 0x00	; 0
    300e:	90 93 28 03 	sts	0x0328, r25
    3012:	80 93 27 03 	sts	0x0327, r24
				}

// instead of there should be 230 according to logic this is just to check
		if (value_center > 230 )
    3016:	80 91 29 03 	lds	r24, 0x0329
    301a:	90 91 2a 03 	lds	r25, 0x032A
    301e:	87 3e       	cpi	r24, 0xE7	; 231
    3020:	91 05       	cpc	r25, r1
    3022:	78 f0       	brcs	.+30     	; 0x3042 <__stack+0xe43>
	//	_delay_ms(50);
	//	STOP();
	/*	sharp_center = ADC_Conversion(11);
		value_center = Sharp_GP2D12_estimation(sharp_center);
		lcd_print(1,7,value_center,3);*/
		r_count=0;
    3024:	10 92 0f 03 	sts	0x030F, r1
    3028:	10 92 0e 03 	sts	0x030E, r1
		//temp1= value_center-92;
		FORWARD();
    302c:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <FORWARD>
		LINEAR_DISTANCE(temp1);
    3030:	80 91 27 03 	lds	r24, 0x0327
    3034:	90 91 28 03 	lds	r25, 0x0328
    3038:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LINEAR_DISTANCE>
		STOP();
    303c:	0e 94 31 0c 	call	0x1862	; 0x1862 <STOP>
    3040:	0e c0       	rjmp	.+28     	; 0x305e <__stack+0xe5f>
	{
		
		/*sharp_center = ADC_Conversion(11);
		value_center = Sharp_GP2D12_estimation(sharp_center);
		lcd_print(1,7,value_center,3);*/
		r_count=0;
    3042:	10 92 0f 03 	sts	0x030F, r1
    3046:	10 92 0e 03 	sts	0x030E, r1
		//temp1= value_center-92;
		FORWARD();
    304a:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <FORWARD>
		LINEAR_DISTANCE(temp1);
    304e:	80 91 27 03 	lds	r24, 0x0327
    3052:	90 91 28 03 	lds	r25, 0x0328
    3056:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LINEAR_DISTANCE>
		STOP();
    305a:	0e 94 31 0c 	call	0x1862	; 0x1862 <STOP>
//		{
		//FORWARD();
		//temp2= value_center-58;
		//LINEAR_DISTANCE(temp1);
		//STOP();
		rev_dis= temp1;
    305e:	80 91 27 03 	lds	r24, 0x0327
    3062:	90 91 28 03 	lds	r25, 0x0328
    3066:	90 93 26 03 	sts	0x0326, r25
    306a:	80 93 25 03 	sts	0x0325, r24





		flag_rx=0;
    306e:	10 92 01 02 	sts	0x0201, r1
    3072:	10 92 00 02 	sts	0x0200, r1
		flag_x=0;
    3076:	10 92 11 03 	sts	0x0311, r1
    307a:	10 92 10 03 	sts	0x0310, r1
while(flag_x == 0)
    307e:	80 91 10 03 	lds	r24, 0x0310
    3082:	90 91 11 03 	lds	r25, 0x0311
    3086:	00 97       	sbiw	r24, 0x00	; 0
    3088:	d1 f3       	breq	.-12     	; 0x307e <__stack+0xe7f>

		



			if (data == 'B')  //objects of larger area...to be kept on right
    308a:	80 91 3a 03 	lds	r24, 0x033A
    308e:	82 34       	cpi	r24, 0x42	; 66
    3090:	09 f0       	breq	.+2      	; 0x3094 <__stack+0xe95>
    3092:	0d c5       	rjmp	.+2586   	; 0x3aae <__stack+0x18af>
			{
	
				servo_3(85);
    3094:	85 e5       	ldi	r24, 0x55	; 85
    3096:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <servo_3>
    309a:	fe 01       	movw	r30, r28
    309c:	e5 51       	subi	r30, 0x15	; 21
    309e:	ff 4f       	sbci	r31, 0xFF	; 255
    30a0:	80 e0       	ldi	r24, 0x00	; 0
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	aa ef       	ldi	r26, 0xFA	; 250
    30a6:	b4 e4       	ldi	r27, 0x44	; 68
    30a8:	80 83       	st	Z, r24
    30aa:	91 83       	std	Z+1, r25	; 0x01
    30ac:	a2 83       	std	Z+2, r26	; 0x02
    30ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30b0:	8e 01       	movw	r16, r28
    30b2:	09 51       	subi	r16, 0x19	; 25
    30b4:	1f 4f       	sbci	r17, 0xFF	; 255
    30b6:	fe 01       	movw	r30, r28
    30b8:	e5 51       	subi	r30, 0x15	; 21
    30ba:	ff 4f       	sbci	r31, 0xFF	; 255
    30bc:	60 81       	ld	r22, Z
    30be:	71 81       	ldd	r23, Z+1	; 0x01
    30c0:	82 81       	ldd	r24, Z+2	; 0x02
    30c2:	93 81       	ldd	r25, Z+3	; 0x03
    30c4:	2d ec       	ldi	r18, 0xCD	; 205
    30c6:	3c ec       	ldi	r19, 0xCC	; 204
    30c8:	4c e2       	ldi	r20, 0x2C	; 44
    30ca:	55 e4       	ldi	r21, 0x45	; 69
    30cc:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    30d0:	dc 01       	movw	r26, r24
    30d2:	cb 01       	movw	r24, r22
    30d4:	f8 01       	movw	r30, r16
    30d6:	80 83       	st	Z, r24
    30d8:	91 83       	std	Z+1, r25	; 0x01
    30da:	a2 83       	std	Z+2, r26	; 0x02
    30dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30de:	fe 01       	movw	r30, r28
    30e0:	e9 51       	subi	r30, 0x19	; 25
    30e2:	ff 4f       	sbci	r31, 0xFF	; 255
    30e4:	60 81       	ld	r22, Z
    30e6:	71 81       	ldd	r23, Z+1	; 0x01
    30e8:	82 81       	ldd	r24, Z+2	; 0x02
    30ea:	93 81       	ldd	r25, Z+3	; 0x03
    30ec:	20 e0       	ldi	r18, 0x00	; 0
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	40 e8       	ldi	r20, 0x80	; 128
    30f2:	5f e3       	ldi	r21, 0x3F	; 63
    30f4:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
    30f8:	88 23       	and	r24, r24
    30fa:	44 f4       	brge	.+16     	; 0x310c <__stack+0xf0d>
		__ticks = 1;
    30fc:	fe 01       	movw	r30, r28
    30fe:	eb 51       	subi	r30, 0x1B	; 27
    3100:	ff 4f       	sbci	r31, 0xFF	; 255
    3102:	81 e0       	ldi	r24, 0x01	; 1
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	91 83       	std	Z+1, r25	; 0x01
    3108:	80 83       	st	Z, r24
    310a:	64 c0       	rjmp	.+200    	; 0x31d4 <__stack+0xfd5>
	else if (__tmp > 65535)
    310c:	fe 01       	movw	r30, r28
    310e:	e9 51       	subi	r30, 0x19	; 25
    3110:	ff 4f       	sbci	r31, 0xFF	; 255
    3112:	60 81       	ld	r22, Z
    3114:	71 81       	ldd	r23, Z+1	; 0x01
    3116:	82 81       	ldd	r24, Z+2	; 0x02
    3118:	93 81       	ldd	r25, Z+3	; 0x03
    311a:	20 e0       	ldi	r18, 0x00	; 0
    311c:	3f ef       	ldi	r19, 0xFF	; 255
    311e:	4f e7       	ldi	r20, 0x7F	; 127
    3120:	57 e4       	ldi	r21, 0x47	; 71
    3122:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
    3126:	18 16       	cp	r1, r24
    3128:	0c f0       	brlt	.+2      	; 0x312c <__stack+0xf2d>
    312a:	43 c0       	rjmp	.+134    	; 0x31b2 <__stack+0xfb3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    312c:	fe 01       	movw	r30, r28
    312e:	e5 51       	subi	r30, 0x15	; 21
    3130:	ff 4f       	sbci	r31, 0xFF	; 255
    3132:	60 81       	ld	r22, Z
    3134:	71 81       	ldd	r23, Z+1	; 0x01
    3136:	82 81       	ldd	r24, Z+2	; 0x02
    3138:	93 81       	ldd	r25, Z+3	; 0x03
    313a:	20 e0       	ldi	r18, 0x00	; 0
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	40 e2       	ldi	r20, 0x20	; 32
    3140:	51 e4       	ldi	r21, 0x41	; 65
    3142:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    3146:	dc 01       	movw	r26, r24
    3148:	cb 01       	movw	r24, r22
    314a:	8e 01       	movw	r16, r28
    314c:	0b 51       	subi	r16, 0x1B	; 27
    314e:	1f 4f       	sbci	r17, 0xFF	; 255
    3150:	bc 01       	movw	r22, r24
    3152:	cd 01       	movw	r24, r26
    3154:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    3158:	dc 01       	movw	r26, r24
    315a:	cb 01       	movw	r24, r22
    315c:	f8 01       	movw	r30, r16
    315e:	91 83       	std	Z+1, r25	; 0x01
    3160:	80 83       	st	Z, r24
    3162:	1f c0       	rjmp	.+62     	; 0x31a2 <__stack+0xfa3>
    3164:	fe 01       	movw	r30, r28
    3166:	ed 51       	subi	r30, 0x1D	; 29
    3168:	ff 4f       	sbci	r31, 0xFF	; 255
    316a:	84 e1       	ldi	r24, 0x14	; 20
    316c:	91 e0       	ldi	r25, 0x01	; 1
    316e:	91 83       	std	Z+1, r25	; 0x01
    3170:	80 83       	st	Z, r24
    3172:	fe 01       	movw	r30, r28
    3174:	ed 51       	subi	r30, 0x1D	; 29
    3176:	ff 4f       	sbci	r31, 0xFF	; 255
    3178:	80 81       	ld	r24, Z
    317a:	91 81       	ldd	r25, Z+1	; 0x01
    317c:	01 97       	sbiw	r24, 0x01	; 1
    317e:	f1 f7       	brne	.-4      	; 0x317c <__stack+0xf7d>
    3180:	fe 01       	movw	r30, r28
    3182:	ed 51       	subi	r30, 0x1D	; 29
    3184:	ff 4f       	sbci	r31, 0xFF	; 255
    3186:	91 83       	std	Z+1, r25	; 0x01
    3188:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    318a:	de 01       	movw	r26, r28
    318c:	ab 51       	subi	r26, 0x1B	; 27
    318e:	bf 4f       	sbci	r27, 0xFF	; 255
    3190:	fe 01       	movw	r30, r28
    3192:	eb 51       	subi	r30, 0x1B	; 27
    3194:	ff 4f       	sbci	r31, 0xFF	; 255
    3196:	80 81       	ld	r24, Z
    3198:	91 81       	ldd	r25, Z+1	; 0x01
    319a:	01 97       	sbiw	r24, 0x01	; 1
    319c:	11 96       	adiw	r26, 0x01	; 1
    319e:	9c 93       	st	X, r25
    31a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31a2:	fe 01       	movw	r30, r28
    31a4:	eb 51       	subi	r30, 0x1B	; 27
    31a6:	ff 4f       	sbci	r31, 0xFF	; 255
    31a8:	80 81       	ld	r24, Z
    31aa:	91 81       	ldd	r25, Z+1	; 0x01
    31ac:	00 97       	sbiw	r24, 0x00	; 0
    31ae:	d1 f6       	brne	.-76     	; 0x3164 <__stack+0xf65>
    31b0:	27 c0       	rjmp	.+78     	; 0x3200 <__stack+0x1001>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31b2:	8e 01       	movw	r16, r28
    31b4:	0b 51       	subi	r16, 0x1B	; 27
    31b6:	1f 4f       	sbci	r17, 0xFF	; 255
    31b8:	fe 01       	movw	r30, r28
    31ba:	e9 51       	subi	r30, 0x19	; 25
    31bc:	ff 4f       	sbci	r31, 0xFF	; 255
    31be:	60 81       	ld	r22, Z
    31c0:	71 81       	ldd	r23, Z+1	; 0x01
    31c2:	82 81       	ldd	r24, Z+2	; 0x02
    31c4:	93 81       	ldd	r25, Z+3	; 0x03
    31c6:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	f8 01       	movw	r30, r16
    31d0:	91 83       	std	Z+1, r25	; 0x01
    31d2:	80 83       	st	Z, r24
    31d4:	de 01       	movw	r26, r28
    31d6:	af 51       	subi	r26, 0x1F	; 31
    31d8:	bf 4f       	sbci	r27, 0xFF	; 255
    31da:	fe 01       	movw	r30, r28
    31dc:	eb 51       	subi	r30, 0x1B	; 27
    31de:	ff 4f       	sbci	r31, 0xFF	; 255
    31e0:	80 81       	ld	r24, Z
    31e2:	91 81       	ldd	r25, Z+1	; 0x01
    31e4:	8d 93       	st	X+, r24
    31e6:	9c 93       	st	X, r25
    31e8:	fe 01       	movw	r30, r28
    31ea:	ef 51       	subi	r30, 0x1F	; 31
    31ec:	ff 4f       	sbci	r31, 0xFF	; 255
    31ee:	80 81       	ld	r24, Z
    31f0:	91 81       	ldd	r25, Z+1	; 0x01
    31f2:	01 97       	sbiw	r24, 0x01	; 1
    31f4:	f1 f7       	brne	.-4      	; 0x31f2 <__stack+0xff3>
    31f6:	fe 01       	movw	r30, r28
    31f8:	ef 51       	subi	r30, 0x1F	; 31
    31fa:	ff 4f       	sbci	r31, 0xFF	; 255
    31fc:	91 83       	std	Z+1, r25	; 0x01
    31fe:	80 83       	st	Z, r24
				_delay_ms(2000);
				
				servo_2(105);
    3200:	89 e6       	ldi	r24, 0x69	; 105
    3202:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <servo_2>
    3206:	fe 01       	movw	r30, r28
    3208:	e3 52       	subi	r30, 0x23	; 35
    320a:	ff 4f       	sbci	r31, 0xFF	; 255
    320c:	80 e0       	ldi	r24, 0x00	; 0
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	aa ef       	ldi	r26, 0xFA	; 250
    3212:	b4 e4       	ldi	r27, 0x44	; 68
    3214:	80 83       	st	Z, r24
    3216:	91 83       	std	Z+1, r25	; 0x01
    3218:	a2 83       	std	Z+2, r26	; 0x02
    321a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    321c:	8e 01       	movw	r16, r28
    321e:	07 52       	subi	r16, 0x27	; 39
    3220:	1f 4f       	sbci	r17, 0xFF	; 255
    3222:	fe 01       	movw	r30, r28
    3224:	e3 52       	subi	r30, 0x23	; 35
    3226:	ff 4f       	sbci	r31, 0xFF	; 255
    3228:	60 81       	ld	r22, Z
    322a:	71 81       	ldd	r23, Z+1	; 0x01
    322c:	82 81       	ldd	r24, Z+2	; 0x02
    322e:	93 81       	ldd	r25, Z+3	; 0x03
    3230:	2d ec       	ldi	r18, 0xCD	; 205
    3232:	3c ec       	ldi	r19, 0xCC	; 204
    3234:	4c e2       	ldi	r20, 0x2C	; 44
    3236:	55 e4       	ldi	r21, 0x45	; 69
    3238:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    323c:	dc 01       	movw	r26, r24
    323e:	cb 01       	movw	r24, r22
    3240:	f8 01       	movw	r30, r16
    3242:	80 83       	st	Z, r24
    3244:	91 83       	std	Z+1, r25	; 0x01
    3246:	a2 83       	std	Z+2, r26	; 0x02
    3248:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    324a:	fe 01       	movw	r30, r28
    324c:	e7 52       	subi	r30, 0x27	; 39
    324e:	ff 4f       	sbci	r31, 0xFF	; 255
    3250:	60 81       	ld	r22, Z
    3252:	71 81       	ldd	r23, Z+1	; 0x01
    3254:	82 81       	ldd	r24, Z+2	; 0x02
    3256:	93 81       	ldd	r25, Z+3	; 0x03
    3258:	20 e0       	ldi	r18, 0x00	; 0
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	40 e8       	ldi	r20, 0x80	; 128
    325e:	5f e3       	ldi	r21, 0x3F	; 63
    3260:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
    3264:	88 23       	and	r24, r24
    3266:	44 f4       	brge	.+16     	; 0x3278 <__stack+0x1079>
		__ticks = 1;
    3268:	fe 01       	movw	r30, r28
    326a:	e9 52       	subi	r30, 0x29	; 41
    326c:	ff 4f       	sbci	r31, 0xFF	; 255
    326e:	81 e0       	ldi	r24, 0x01	; 1
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	91 83       	std	Z+1, r25	; 0x01
    3274:	80 83       	st	Z, r24
    3276:	64 c0       	rjmp	.+200    	; 0x3340 <__stack+0x1141>
	else if (__tmp > 65535)
    3278:	fe 01       	movw	r30, r28
    327a:	e7 52       	subi	r30, 0x27	; 39
    327c:	ff 4f       	sbci	r31, 0xFF	; 255
    327e:	60 81       	ld	r22, Z
    3280:	71 81       	ldd	r23, Z+1	; 0x01
    3282:	82 81       	ldd	r24, Z+2	; 0x02
    3284:	93 81       	ldd	r25, Z+3	; 0x03
    3286:	20 e0       	ldi	r18, 0x00	; 0
    3288:	3f ef       	ldi	r19, 0xFF	; 255
    328a:	4f e7       	ldi	r20, 0x7F	; 127
    328c:	57 e4       	ldi	r21, 0x47	; 71
    328e:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
    3292:	18 16       	cp	r1, r24
    3294:	0c f0       	brlt	.+2      	; 0x3298 <__stack+0x1099>
    3296:	43 c0       	rjmp	.+134    	; 0x331e <__stack+0x111f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3298:	fe 01       	movw	r30, r28
    329a:	e3 52       	subi	r30, 0x23	; 35
    329c:	ff 4f       	sbci	r31, 0xFF	; 255
    329e:	60 81       	ld	r22, Z
    32a0:	71 81       	ldd	r23, Z+1	; 0x01
    32a2:	82 81       	ldd	r24, Z+2	; 0x02
    32a4:	93 81       	ldd	r25, Z+3	; 0x03
    32a6:	20 e0       	ldi	r18, 0x00	; 0
    32a8:	30 e0       	ldi	r19, 0x00	; 0
    32aa:	40 e2       	ldi	r20, 0x20	; 32
    32ac:	51 e4       	ldi	r21, 0x41	; 65
    32ae:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    32b2:	dc 01       	movw	r26, r24
    32b4:	cb 01       	movw	r24, r22
    32b6:	8e 01       	movw	r16, r28
    32b8:	09 52       	subi	r16, 0x29	; 41
    32ba:	1f 4f       	sbci	r17, 0xFF	; 255
    32bc:	bc 01       	movw	r22, r24
    32be:	cd 01       	movw	r24, r26
    32c0:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    32c4:	dc 01       	movw	r26, r24
    32c6:	cb 01       	movw	r24, r22
    32c8:	f8 01       	movw	r30, r16
    32ca:	91 83       	std	Z+1, r25	; 0x01
    32cc:	80 83       	st	Z, r24
    32ce:	1f c0       	rjmp	.+62     	; 0x330e <__stack+0x110f>
    32d0:	fe 01       	movw	r30, r28
    32d2:	eb 52       	subi	r30, 0x2B	; 43
    32d4:	ff 4f       	sbci	r31, 0xFF	; 255
    32d6:	84 e1       	ldi	r24, 0x14	; 20
    32d8:	91 e0       	ldi	r25, 0x01	; 1
    32da:	91 83       	std	Z+1, r25	; 0x01
    32dc:	80 83       	st	Z, r24
    32de:	fe 01       	movw	r30, r28
    32e0:	eb 52       	subi	r30, 0x2B	; 43
    32e2:	ff 4f       	sbci	r31, 0xFF	; 255
    32e4:	80 81       	ld	r24, Z
    32e6:	91 81       	ldd	r25, Z+1	; 0x01
    32e8:	01 97       	sbiw	r24, 0x01	; 1
    32ea:	f1 f7       	brne	.-4      	; 0x32e8 <__stack+0x10e9>
    32ec:	fe 01       	movw	r30, r28
    32ee:	eb 52       	subi	r30, 0x2B	; 43
    32f0:	ff 4f       	sbci	r31, 0xFF	; 255
    32f2:	91 83       	std	Z+1, r25	; 0x01
    32f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32f6:	de 01       	movw	r26, r28
    32f8:	a9 52       	subi	r26, 0x29	; 41
    32fa:	bf 4f       	sbci	r27, 0xFF	; 255
    32fc:	fe 01       	movw	r30, r28
    32fe:	e9 52       	subi	r30, 0x29	; 41
    3300:	ff 4f       	sbci	r31, 0xFF	; 255
    3302:	80 81       	ld	r24, Z
    3304:	91 81       	ldd	r25, Z+1	; 0x01
    3306:	01 97       	sbiw	r24, 0x01	; 1
    3308:	11 96       	adiw	r26, 0x01	; 1
    330a:	9c 93       	st	X, r25
    330c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    330e:	fe 01       	movw	r30, r28
    3310:	e9 52       	subi	r30, 0x29	; 41
    3312:	ff 4f       	sbci	r31, 0xFF	; 255
    3314:	80 81       	ld	r24, Z
    3316:	91 81       	ldd	r25, Z+1	; 0x01
    3318:	00 97       	sbiw	r24, 0x00	; 0
    331a:	d1 f6       	brne	.-76     	; 0x32d0 <__stack+0x10d1>
    331c:	27 c0       	rjmp	.+78     	; 0x336c <__stack+0x116d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    331e:	8e 01       	movw	r16, r28
    3320:	09 52       	subi	r16, 0x29	; 41
    3322:	1f 4f       	sbci	r17, 0xFF	; 255
    3324:	fe 01       	movw	r30, r28
    3326:	e7 52       	subi	r30, 0x27	; 39
    3328:	ff 4f       	sbci	r31, 0xFF	; 255
    332a:	60 81       	ld	r22, Z
    332c:	71 81       	ldd	r23, Z+1	; 0x01
    332e:	82 81       	ldd	r24, Z+2	; 0x02
    3330:	93 81       	ldd	r25, Z+3	; 0x03
    3332:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    3336:	dc 01       	movw	r26, r24
    3338:	cb 01       	movw	r24, r22
    333a:	f8 01       	movw	r30, r16
    333c:	91 83       	std	Z+1, r25	; 0x01
    333e:	80 83       	st	Z, r24
    3340:	de 01       	movw	r26, r28
    3342:	ad 52       	subi	r26, 0x2D	; 45
    3344:	bf 4f       	sbci	r27, 0xFF	; 255
    3346:	fe 01       	movw	r30, r28
    3348:	e9 52       	subi	r30, 0x29	; 41
    334a:	ff 4f       	sbci	r31, 0xFF	; 255
    334c:	80 81       	ld	r24, Z
    334e:	91 81       	ldd	r25, Z+1	; 0x01
    3350:	8d 93       	st	X+, r24
    3352:	9c 93       	st	X, r25
    3354:	fe 01       	movw	r30, r28
    3356:	ed 52       	subi	r30, 0x2D	; 45
    3358:	ff 4f       	sbci	r31, 0xFF	; 255
    335a:	80 81       	ld	r24, Z
    335c:	91 81       	ldd	r25, Z+1	; 0x01
    335e:	01 97       	sbiw	r24, 0x01	; 1
    3360:	f1 f7       	brne	.-4      	; 0x335e <__stack+0x115f>
    3362:	fe 01       	movw	r30, r28
    3364:	ed 52       	subi	r30, 0x2D	; 45
    3366:	ff 4f       	sbci	r31, 0xFF	; 255
    3368:	91 83       	std	Z+1, r25	; 0x01
    336a:	80 83       	st	Z, r24
				_delay_ms(2000);

				FORWARD();
    336c:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <FORWARD>
				LINEAR_DISTANCE(50);
    3370:	82 e3       	ldi	r24, 0x32	; 50
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LINEAR_DISTANCE>
				STOP();
    3378:	0e 94 31 0c 	call	0x1862	; 0x1862 <STOP>
				servo_1(0);
    337c:	80 e0       	ldi	r24, 0x00	; 0
    337e:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <servo_1>
    3382:	fe 01       	movw	r30, r28
    3384:	e1 53       	subi	r30, 0x31	; 49
    3386:	ff 4f       	sbci	r31, 0xFF	; 255
    3388:	80 e0       	ldi	r24, 0x00	; 0
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	aa ef       	ldi	r26, 0xFA	; 250
    338e:	b4 e4       	ldi	r27, 0x44	; 68
    3390:	80 83       	st	Z, r24
    3392:	91 83       	std	Z+1, r25	; 0x01
    3394:	a2 83       	std	Z+2, r26	; 0x02
    3396:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3398:	8e 01       	movw	r16, r28
    339a:	05 53       	subi	r16, 0x35	; 53
    339c:	1f 4f       	sbci	r17, 0xFF	; 255
    339e:	fe 01       	movw	r30, r28
    33a0:	e1 53       	subi	r30, 0x31	; 49
    33a2:	ff 4f       	sbci	r31, 0xFF	; 255
    33a4:	60 81       	ld	r22, Z
    33a6:	71 81       	ldd	r23, Z+1	; 0x01
    33a8:	82 81       	ldd	r24, Z+2	; 0x02
    33aa:	93 81       	ldd	r25, Z+3	; 0x03
    33ac:	2d ec       	ldi	r18, 0xCD	; 205
    33ae:	3c ec       	ldi	r19, 0xCC	; 204
    33b0:	4c e2       	ldi	r20, 0x2C	; 44
    33b2:	55 e4       	ldi	r21, 0x45	; 69
    33b4:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    33b8:	dc 01       	movw	r26, r24
    33ba:	cb 01       	movw	r24, r22
    33bc:	f8 01       	movw	r30, r16
    33be:	80 83       	st	Z, r24
    33c0:	91 83       	std	Z+1, r25	; 0x01
    33c2:	a2 83       	std	Z+2, r26	; 0x02
    33c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33c6:	fe 01       	movw	r30, r28
    33c8:	e5 53       	subi	r30, 0x35	; 53
    33ca:	ff 4f       	sbci	r31, 0xFF	; 255
    33cc:	60 81       	ld	r22, Z
    33ce:	71 81       	ldd	r23, Z+1	; 0x01
    33d0:	82 81       	ldd	r24, Z+2	; 0x02
    33d2:	93 81       	ldd	r25, Z+3	; 0x03
    33d4:	20 e0       	ldi	r18, 0x00	; 0
    33d6:	30 e0       	ldi	r19, 0x00	; 0
    33d8:	40 e8       	ldi	r20, 0x80	; 128
    33da:	5f e3       	ldi	r21, 0x3F	; 63
    33dc:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
    33e0:	88 23       	and	r24, r24
    33e2:	44 f4       	brge	.+16     	; 0x33f4 <__stack+0x11f5>
		__ticks = 1;
    33e4:	fe 01       	movw	r30, r28
    33e6:	e7 53       	subi	r30, 0x37	; 55
    33e8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ea:	81 e0       	ldi	r24, 0x01	; 1
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	91 83       	std	Z+1, r25	; 0x01
    33f0:	80 83       	st	Z, r24
    33f2:	64 c0       	rjmp	.+200    	; 0x34bc <__stack+0x12bd>
	else if (__tmp > 65535)
    33f4:	fe 01       	movw	r30, r28
    33f6:	e5 53       	subi	r30, 0x35	; 53
    33f8:	ff 4f       	sbci	r31, 0xFF	; 255
    33fa:	60 81       	ld	r22, Z
    33fc:	71 81       	ldd	r23, Z+1	; 0x01
    33fe:	82 81       	ldd	r24, Z+2	; 0x02
    3400:	93 81       	ldd	r25, Z+3	; 0x03
    3402:	20 e0       	ldi	r18, 0x00	; 0
    3404:	3f ef       	ldi	r19, 0xFF	; 255
    3406:	4f e7       	ldi	r20, 0x7F	; 127
    3408:	57 e4       	ldi	r21, 0x47	; 71
    340a:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
    340e:	18 16       	cp	r1, r24
    3410:	0c f0       	brlt	.+2      	; 0x3414 <__stack+0x1215>
    3412:	43 c0       	rjmp	.+134    	; 0x349a <__stack+0x129b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3414:	fe 01       	movw	r30, r28
    3416:	e1 53       	subi	r30, 0x31	; 49
    3418:	ff 4f       	sbci	r31, 0xFF	; 255
    341a:	60 81       	ld	r22, Z
    341c:	71 81       	ldd	r23, Z+1	; 0x01
    341e:	82 81       	ldd	r24, Z+2	; 0x02
    3420:	93 81       	ldd	r25, Z+3	; 0x03
    3422:	20 e0       	ldi	r18, 0x00	; 0
    3424:	30 e0       	ldi	r19, 0x00	; 0
    3426:	40 e2       	ldi	r20, 0x20	; 32
    3428:	51 e4       	ldi	r21, 0x41	; 65
    342a:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    342e:	dc 01       	movw	r26, r24
    3430:	cb 01       	movw	r24, r22
    3432:	8e 01       	movw	r16, r28
    3434:	07 53       	subi	r16, 0x37	; 55
    3436:	1f 4f       	sbci	r17, 0xFF	; 255
    3438:	bc 01       	movw	r22, r24
    343a:	cd 01       	movw	r24, r26
    343c:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    3440:	dc 01       	movw	r26, r24
    3442:	cb 01       	movw	r24, r22
    3444:	f8 01       	movw	r30, r16
    3446:	91 83       	std	Z+1, r25	; 0x01
    3448:	80 83       	st	Z, r24
    344a:	1f c0       	rjmp	.+62     	; 0x348a <__stack+0x128b>
    344c:	fe 01       	movw	r30, r28
    344e:	e9 53       	subi	r30, 0x39	; 57
    3450:	ff 4f       	sbci	r31, 0xFF	; 255
    3452:	84 e1       	ldi	r24, 0x14	; 20
    3454:	91 e0       	ldi	r25, 0x01	; 1
    3456:	91 83       	std	Z+1, r25	; 0x01
    3458:	80 83       	st	Z, r24
    345a:	fe 01       	movw	r30, r28
    345c:	e9 53       	subi	r30, 0x39	; 57
    345e:	ff 4f       	sbci	r31, 0xFF	; 255
    3460:	80 81       	ld	r24, Z
    3462:	91 81       	ldd	r25, Z+1	; 0x01
    3464:	01 97       	sbiw	r24, 0x01	; 1
    3466:	f1 f7       	brne	.-4      	; 0x3464 <__stack+0x1265>
    3468:	fe 01       	movw	r30, r28
    346a:	e9 53       	subi	r30, 0x39	; 57
    346c:	ff 4f       	sbci	r31, 0xFF	; 255
    346e:	91 83       	std	Z+1, r25	; 0x01
    3470:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3472:	de 01       	movw	r26, r28
    3474:	a7 53       	subi	r26, 0x37	; 55
    3476:	bf 4f       	sbci	r27, 0xFF	; 255
    3478:	fe 01       	movw	r30, r28
    347a:	e7 53       	subi	r30, 0x37	; 55
    347c:	ff 4f       	sbci	r31, 0xFF	; 255
    347e:	80 81       	ld	r24, Z
    3480:	91 81       	ldd	r25, Z+1	; 0x01
    3482:	01 97       	sbiw	r24, 0x01	; 1
    3484:	11 96       	adiw	r26, 0x01	; 1
    3486:	9c 93       	st	X, r25
    3488:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    348a:	fe 01       	movw	r30, r28
    348c:	e7 53       	subi	r30, 0x37	; 55
    348e:	ff 4f       	sbci	r31, 0xFF	; 255
    3490:	80 81       	ld	r24, Z
    3492:	91 81       	ldd	r25, Z+1	; 0x01
    3494:	00 97       	sbiw	r24, 0x00	; 0
    3496:	d1 f6       	brne	.-76     	; 0x344c <__stack+0x124d>
    3498:	27 c0       	rjmp	.+78     	; 0x34e8 <__stack+0x12e9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    349a:	8e 01       	movw	r16, r28
    349c:	07 53       	subi	r16, 0x37	; 55
    349e:	1f 4f       	sbci	r17, 0xFF	; 255
    34a0:	fe 01       	movw	r30, r28
    34a2:	e5 53       	subi	r30, 0x35	; 53
    34a4:	ff 4f       	sbci	r31, 0xFF	; 255
    34a6:	60 81       	ld	r22, Z
    34a8:	71 81       	ldd	r23, Z+1	; 0x01
    34aa:	82 81       	ldd	r24, Z+2	; 0x02
    34ac:	93 81       	ldd	r25, Z+3	; 0x03
    34ae:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    34b2:	dc 01       	movw	r26, r24
    34b4:	cb 01       	movw	r24, r22
    34b6:	f8 01       	movw	r30, r16
    34b8:	91 83       	std	Z+1, r25	; 0x01
    34ba:	80 83       	st	Z, r24
    34bc:	de 01       	movw	r26, r28
    34be:	ab 53       	subi	r26, 0x3B	; 59
    34c0:	bf 4f       	sbci	r27, 0xFF	; 255
    34c2:	fe 01       	movw	r30, r28
    34c4:	e7 53       	subi	r30, 0x37	; 55
    34c6:	ff 4f       	sbci	r31, 0xFF	; 255
    34c8:	80 81       	ld	r24, Z
    34ca:	91 81       	ldd	r25, Z+1	; 0x01
    34cc:	8d 93       	st	X+, r24
    34ce:	9c 93       	st	X, r25
    34d0:	fe 01       	movw	r30, r28
    34d2:	eb 53       	subi	r30, 0x3B	; 59
    34d4:	ff 4f       	sbci	r31, 0xFF	; 255
    34d6:	80 81       	ld	r24, Z
    34d8:	91 81       	ldd	r25, Z+1	; 0x01
    34da:	01 97       	sbiw	r24, 0x01	; 1
    34dc:	f1 f7       	brne	.-4      	; 0x34da <__stack+0x12db>
    34de:	fe 01       	movw	r30, r28
    34e0:	eb 53       	subi	r30, 0x3B	; 59
    34e2:	ff 4f       	sbci	r31, 0xFF	; 255
    34e4:	91 83       	std	Z+1, r25	; 0x01
    34e6:	80 83       	st	Z, r24
				_delay_ms(2000);
				servo_2(65);
    34e8:	81 e4       	ldi	r24, 0x41	; 65
    34ea:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <servo_2>
    34ee:	fe 01       	movw	r30, r28
    34f0:	ef 53       	subi	r30, 0x3F	; 63
    34f2:	ff 4f       	sbci	r31, 0xFF	; 255
    34f4:	80 e0       	ldi	r24, 0x00	; 0
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	aa ef       	ldi	r26, 0xFA	; 250
    34fa:	b4 e4       	ldi	r27, 0x44	; 68
    34fc:	80 83       	st	Z, r24
    34fe:	91 83       	std	Z+1, r25	; 0x01
    3500:	a2 83       	std	Z+2, r26	; 0x02
    3502:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3504:	8e 01       	movw	r16, r28
    3506:	03 54       	subi	r16, 0x43	; 67
    3508:	1f 4f       	sbci	r17, 0xFF	; 255
    350a:	fe 01       	movw	r30, r28
    350c:	ef 53       	subi	r30, 0x3F	; 63
    350e:	ff 4f       	sbci	r31, 0xFF	; 255
    3510:	60 81       	ld	r22, Z
    3512:	71 81       	ldd	r23, Z+1	; 0x01
    3514:	82 81       	ldd	r24, Z+2	; 0x02
    3516:	93 81       	ldd	r25, Z+3	; 0x03
    3518:	2d ec       	ldi	r18, 0xCD	; 205
    351a:	3c ec       	ldi	r19, 0xCC	; 204
    351c:	4c e2       	ldi	r20, 0x2C	; 44
    351e:	55 e4       	ldi	r21, 0x45	; 69
    3520:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    3524:	dc 01       	movw	r26, r24
    3526:	cb 01       	movw	r24, r22
    3528:	f8 01       	movw	r30, r16
    352a:	80 83       	st	Z, r24
    352c:	91 83       	std	Z+1, r25	; 0x01
    352e:	a2 83       	std	Z+2, r26	; 0x02
    3530:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3532:	fe 01       	movw	r30, r28
    3534:	e3 54       	subi	r30, 0x43	; 67
    3536:	ff 4f       	sbci	r31, 0xFF	; 255
    3538:	60 81       	ld	r22, Z
    353a:	71 81       	ldd	r23, Z+1	; 0x01
    353c:	82 81       	ldd	r24, Z+2	; 0x02
    353e:	93 81       	ldd	r25, Z+3	; 0x03
    3540:	20 e0       	ldi	r18, 0x00	; 0
    3542:	30 e0       	ldi	r19, 0x00	; 0
    3544:	40 e8       	ldi	r20, 0x80	; 128
    3546:	5f e3       	ldi	r21, 0x3F	; 63
    3548:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
    354c:	88 23       	and	r24, r24
    354e:	44 f4       	brge	.+16     	; 0x3560 <__stack+0x1361>
		__ticks = 1;
    3550:	fe 01       	movw	r30, r28
    3552:	e5 54       	subi	r30, 0x45	; 69
    3554:	ff 4f       	sbci	r31, 0xFF	; 255
    3556:	81 e0       	ldi	r24, 0x01	; 1
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	91 83       	std	Z+1, r25	; 0x01
    355c:	80 83       	st	Z, r24
    355e:	64 c0       	rjmp	.+200    	; 0x3628 <__stack+0x1429>
	else if (__tmp > 65535)
    3560:	fe 01       	movw	r30, r28
    3562:	e3 54       	subi	r30, 0x43	; 67
    3564:	ff 4f       	sbci	r31, 0xFF	; 255
    3566:	60 81       	ld	r22, Z
    3568:	71 81       	ldd	r23, Z+1	; 0x01
    356a:	82 81       	ldd	r24, Z+2	; 0x02
    356c:	93 81       	ldd	r25, Z+3	; 0x03
    356e:	20 e0       	ldi	r18, 0x00	; 0
    3570:	3f ef       	ldi	r19, 0xFF	; 255
    3572:	4f e7       	ldi	r20, 0x7F	; 127
    3574:	57 e4       	ldi	r21, 0x47	; 71
    3576:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
    357a:	18 16       	cp	r1, r24
    357c:	0c f0       	brlt	.+2      	; 0x3580 <__stack+0x1381>
    357e:	43 c0       	rjmp	.+134    	; 0x3606 <__stack+0x1407>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3580:	fe 01       	movw	r30, r28
    3582:	ef 53       	subi	r30, 0x3F	; 63
    3584:	ff 4f       	sbci	r31, 0xFF	; 255
    3586:	60 81       	ld	r22, Z
    3588:	71 81       	ldd	r23, Z+1	; 0x01
    358a:	82 81       	ldd	r24, Z+2	; 0x02
    358c:	93 81       	ldd	r25, Z+3	; 0x03
    358e:	20 e0       	ldi	r18, 0x00	; 0
    3590:	30 e0       	ldi	r19, 0x00	; 0
    3592:	40 e2       	ldi	r20, 0x20	; 32
    3594:	51 e4       	ldi	r21, 0x41	; 65
    3596:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    359a:	dc 01       	movw	r26, r24
    359c:	cb 01       	movw	r24, r22
    359e:	8e 01       	movw	r16, r28
    35a0:	05 54       	subi	r16, 0x45	; 69
    35a2:	1f 4f       	sbci	r17, 0xFF	; 255
    35a4:	bc 01       	movw	r22, r24
    35a6:	cd 01       	movw	r24, r26
    35a8:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    35ac:	dc 01       	movw	r26, r24
    35ae:	cb 01       	movw	r24, r22
    35b0:	f8 01       	movw	r30, r16
    35b2:	91 83       	std	Z+1, r25	; 0x01
    35b4:	80 83       	st	Z, r24
    35b6:	1f c0       	rjmp	.+62     	; 0x35f6 <__stack+0x13f7>
    35b8:	fe 01       	movw	r30, r28
    35ba:	e7 54       	subi	r30, 0x47	; 71
    35bc:	ff 4f       	sbci	r31, 0xFF	; 255
    35be:	84 e1       	ldi	r24, 0x14	; 20
    35c0:	91 e0       	ldi	r25, 0x01	; 1
    35c2:	91 83       	std	Z+1, r25	; 0x01
    35c4:	80 83       	st	Z, r24
    35c6:	fe 01       	movw	r30, r28
    35c8:	e7 54       	subi	r30, 0x47	; 71
    35ca:	ff 4f       	sbci	r31, 0xFF	; 255
    35cc:	80 81       	ld	r24, Z
    35ce:	91 81       	ldd	r25, Z+1	; 0x01
    35d0:	01 97       	sbiw	r24, 0x01	; 1
    35d2:	f1 f7       	brne	.-4      	; 0x35d0 <__stack+0x13d1>
    35d4:	fe 01       	movw	r30, r28
    35d6:	e7 54       	subi	r30, 0x47	; 71
    35d8:	ff 4f       	sbci	r31, 0xFF	; 255
    35da:	91 83       	std	Z+1, r25	; 0x01
    35dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35de:	de 01       	movw	r26, r28
    35e0:	a5 54       	subi	r26, 0x45	; 69
    35e2:	bf 4f       	sbci	r27, 0xFF	; 255
    35e4:	fe 01       	movw	r30, r28
    35e6:	e5 54       	subi	r30, 0x45	; 69
    35e8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ea:	80 81       	ld	r24, Z
    35ec:	91 81       	ldd	r25, Z+1	; 0x01
    35ee:	01 97       	sbiw	r24, 0x01	; 1
    35f0:	11 96       	adiw	r26, 0x01	; 1
    35f2:	9c 93       	st	X, r25
    35f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35f6:	fe 01       	movw	r30, r28
    35f8:	e5 54       	subi	r30, 0x45	; 69
    35fa:	ff 4f       	sbci	r31, 0xFF	; 255
    35fc:	80 81       	ld	r24, Z
    35fe:	91 81       	ldd	r25, Z+1	; 0x01
    3600:	00 97       	sbiw	r24, 0x00	; 0
    3602:	d1 f6       	brne	.-76     	; 0x35b8 <__stack+0x13b9>
    3604:	27 c0       	rjmp	.+78     	; 0x3654 <__stack+0x1455>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3606:	8e 01       	movw	r16, r28
    3608:	05 54       	subi	r16, 0x45	; 69
    360a:	1f 4f       	sbci	r17, 0xFF	; 255
    360c:	fe 01       	movw	r30, r28
    360e:	e3 54       	subi	r30, 0x43	; 67
    3610:	ff 4f       	sbci	r31, 0xFF	; 255
    3612:	60 81       	ld	r22, Z
    3614:	71 81       	ldd	r23, Z+1	; 0x01
    3616:	82 81       	ldd	r24, Z+2	; 0x02
    3618:	93 81       	ldd	r25, Z+3	; 0x03
    361a:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    361e:	dc 01       	movw	r26, r24
    3620:	cb 01       	movw	r24, r22
    3622:	f8 01       	movw	r30, r16
    3624:	91 83       	std	Z+1, r25	; 0x01
    3626:	80 83       	st	Z, r24
    3628:	de 01       	movw	r26, r28
    362a:	a9 54       	subi	r26, 0x49	; 73
    362c:	bf 4f       	sbci	r27, 0xFF	; 255
    362e:	fe 01       	movw	r30, r28
    3630:	e5 54       	subi	r30, 0x45	; 69
    3632:	ff 4f       	sbci	r31, 0xFF	; 255
    3634:	80 81       	ld	r24, Z
    3636:	91 81       	ldd	r25, Z+1	; 0x01
    3638:	8d 93       	st	X+, r24
    363a:	9c 93       	st	X, r25
    363c:	fe 01       	movw	r30, r28
    363e:	e9 54       	subi	r30, 0x49	; 73
    3640:	ff 4f       	sbci	r31, 0xFF	; 255
    3642:	80 81       	ld	r24, Z
    3644:	91 81       	ldd	r25, Z+1	; 0x01
    3646:	01 97       	sbiw	r24, 0x01	; 1
    3648:	f1 f7       	brne	.-4      	; 0x3646 <__stack+0x1447>
    364a:	fe 01       	movw	r30, r28
    364c:	e9 54       	subi	r30, 0x49	; 73
    364e:	ff 4f       	sbci	r31, 0xFF	; 255
    3650:	91 83       	std	Z+1, r25	; 0x01
    3652:	80 83       	st	Z, r24
				_delay_ms(2000);
				servo_3(30);//// logic to sort the object still to be included to left
    3654:	8e e1       	ldi	r24, 0x1E	; 30
    3656:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <servo_3>
    365a:	fe 01       	movw	r30, r28
    365c:	ed 54       	subi	r30, 0x4D	; 77
    365e:	ff 4f       	sbci	r31, 0xFF	; 255
    3660:	80 e0       	ldi	r24, 0x00	; 0
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	aa ef       	ldi	r26, 0xFA	; 250
    3666:	b4 e4       	ldi	r27, 0x44	; 68
    3668:	80 83       	st	Z, r24
    366a:	91 83       	std	Z+1, r25	; 0x01
    366c:	a2 83       	std	Z+2, r26	; 0x02
    366e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3670:	8e 01       	movw	r16, r28
    3672:	01 55       	subi	r16, 0x51	; 81
    3674:	1f 4f       	sbci	r17, 0xFF	; 255
    3676:	fe 01       	movw	r30, r28
    3678:	ed 54       	subi	r30, 0x4D	; 77
    367a:	ff 4f       	sbci	r31, 0xFF	; 255
    367c:	60 81       	ld	r22, Z
    367e:	71 81       	ldd	r23, Z+1	; 0x01
    3680:	82 81       	ldd	r24, Z+2	; 0x02
    3682:	93 81       	ldd	r25, Z+3	; 0x03
    3684:	2d ec       	ldi	r18, 0xCD	; 205
    3686:	3c ec       	ldi	r19, 0xCC	; 204
    3688:	4c e2       	ldi	r20, 0x2C	; 44
    368a:	55 e4       	ldi	r21, 0x45	; 69
    368c:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    3690:	dc 01       	movw	r26, r24
    3692:	cb 01       	movw	r24, r22
    3694:	f8 01       	movw	r30, r16
    3696:	80 83       	st	Z, r24
    3698:	91 83       	std	Z+1, r25	; 0x01
    369a:	a2 83       	std	Z+2, r26	; 0x02
    369c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    369e:	fe 01       	movw	r30, r28
    36a0:	e1 55       	subi	r30, 0x51	; 81
    36a2:	ff 4f       	sbci	r31, 0xFF	; 255
    36a4:	60 81       	ld	r22, Z
    36a6:	71 81       	ldd	r23, Z+1	; 0x01
    36a8:	82 81       	ldd	r24, Z+2	; 0x02
    36aa:	93 81       	ldd	r25, Z+3	; 0x03
    36ac:	20 e0       	ldi	r18, 0x00	; 0
    36ae:	30 e0       	ldi	r19, 0x00	; 0
    36b0:	40 e8       	ldi	r20, 0x80	; 128
    36b2:	5f e3       	ldi	r21, 0x3F	; 63
    36b4:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
    36b8:	88 23       	and	r24, r24
    36ba:	44 f4       	brge	.+16     	; 0x36cc <__stack+0x14cd>
		__ticks = 1;
    36bc:	fe 01       	movw	r30, r28
    36be:	e3 55       	subi	r30, 0x53	; 83
    36c0:	ff 4f       	sbci	r31, 0xFF	; 255
    36c2:	81 e0       	ldi	r24, 0x01	; 1
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	91 83       	std	Z+1, r25	; 0x01
    36c8:	80 83       	st	Z, r24
    36ca:	64 c0       	rjmp	.+200    	; 0x3794 <__stack+0x1595>
	else if (__tmp > 65535)
    36cc:	fe 01       	movw	r30, r28
    36ce:	e1 55       	subi	r30, 0x51	; 81
    36d0:	ff 4f       	sbci	r31, 0xFF	; 255
    36d2:	60 81       	ld	r22, Z
    36d4:	71 81       	ldd	r23, Z+1	; 0x01
    36d6:	82 81       	ldd	r24, Z+2	; 0x02
    36d8:	93 81       	ldd	r25, Z+3	; 0x03
    36da:	20 e0       	ldi	r18, 0x00	; 0
    36dc:	3f ef       	ldi	r19, 0xFF	; 255
    36de:	4f e7       	ldi	r20, 0x7F	; 127
    36e0:	57 e4       	ldi	r21, 0x47	; 71
    36e2:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
    36e6:	18 16       	cp	r1, r24
    36e8:	0c f0       	brlt	.+2      	; 0x36ec <__stack+0x14ed>
    36ea:	43 c0       	rjmp	.+134    	; 0x3772 <__stack+0x1573>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36ec:	fe 01       	movw	r30, r28
    36ee:	ed 54       	subi	r30, 0x4D	; 77
    36f0:	ff 4f       	sbci	r31, 0xFF	; 255
    36f2:	60 81       	ld	r22, Z
    36f4:	71 81       	ldd	r23, Z+1	; 0x01
    36f6:	82 81       	ldd	r24, Z+2	; 0x02
    36f8:	93 81       	ldd	r25, Z+3	; 0x03
    36fa:	20 e0       	ldi	r18, 0x00	; 0
    36fc:	30 e0       	ldi	r19, 0x00	; 0
    36fe:	40 e2       	ldi	r20, 0x20	; 32
    3700:	51 e4       	ldi	r21, 0x41	; 65
    3702:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    3706:	dc 01       	movw	r26, r24
    3708:	cb 01       	movw	r24, r22
    370a:	8e 01       	movw	r16, r28
    370c:	03 55       	subi	r16, 0x53	; 83
    370e:	1f 4f       	sbci	r17, 0xFF	; 255
    3710:	bc 01       	movw	r22, r24
    3712:	cd 01       	movw	r24, r26
    3714:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    3718:	dc 01       	movw	r26, r24
    371a:	cb 01       	movw	r24, r22
    371c:	f8 01       	movw	r30, r16
    371e:	91 83       	std	Z+1, r25	; 0x01
    3720:	80 83       	st	Z, r24
    3722:	1f c0       	rjmp	.+62     	; 0x3762 <__stack+0x1563>
    3724:	fe 01       	movw	r30, r28
    3726:	e5 55       	subi	r30, 0x55	; 85
    3728:	ff 4f       	sbci	r31, 0xFF	; 255
    372a:	84 e1       	ldi	r24, 0x14	; 20
    372c:	91 e0       	ldi	r25, 0x01	; 1
    372e:	91 83       	std	Z+1, r25	; 0x01
    3730:	80 83       	st	Z, r24
    3732:	fe 01       	movw	r30, r28
    3734:	e5 55       	subi	r30, 0x55	; 85
    3736:	ff 4f       	sbci	r31, 0xFF	; 255
    3738:	80 81       	ld	r24, Z
    373a:	91 81       	ldd	r25, Z+1	; 0x01
    373c:	01 97       	sbiw	r24, 0x01	; 1
    373e:	f1 f7       	brne	.-4      	; 0x373c <__stack+0x153d>
    3740:	fe 01       	movw	r30, r28
    3742:	e5 55       	subi	r30, 0x55	; 85
    3744:	ff 4f       	sbci	r31, 0xFF	; 255
    3746:	91 83       	std	Z+1, r25	; 0x01
    3748:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    374a:	de 01       	movw	r26, r28
    374c:	a3 55       	subi	r26, 0x53	; 83
    374e:	bf 4f       	sbci	r27, 0xFF	; 255
    3750:	fe 01       	movw	r30, r28
    3752:	e3 55       	subi	r30, 0x53	; 83
    3754:	ff 4f       	sbci	r31, 0xFF	; 255
    3756:	80 81       	ld	r24, Z
    3758:	91 81       	ldd	r25, Z+1	; 0x01
    375a:	01 97       	sbiw	r24, 0x01	; 1
    375c:	11 96       	adiw	r26, 0x01	; 1
    375e:	9c 93       	st	X, r25
    3760:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3762:	fe 01       	movw	r30, r28
    3764:	e3 55       	subi	r30, 0x53	; 83
    3766:	ff 4f       	sbci	r31, 0xFF	; 255
    3768:	80 81       	ld	r24, Z
    376a:	91 81       	ldd	r25, Z+1	; 0x01
    376c:	00 97       	sbiw	r24, 0x00	; 0
    376e:	d1 f6       	brne	.-76     	; 0x3724 <__stack+0x1525>
    3770:	27 c0       	rjmp	.+78     	; 0x37c0 <__stack+0x15c1>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3772:	8e 01       	movw	r16, r28
    3774:	03 55       	subi	r16, 0x53	; 83
    3776:	1f 4f       	sbci	r17, 0xFF	; 255
    3778:	fe 01       	movw	r30, r28
    377a:	e1 55       	subi	r30, 0x51	; 81
    377c:	ff 4f       	sbci	r31, 0xFF	; 255
    377e:	60 81       	ld	r22, Z
    3780:	71 81       	ldd	r23, Z+1	; 0x01
    3782:	82 81       	ldd	r24, Z+2	; 0x02
    3784:	93 81       	ldd	r25, Z+3	; 0x03
    3786:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    378a:	dc 01       	movw	r26, r24
    378c:	cb 01       	movw	r24, r22
    378e:	f8 01       	movw	r30, r16
    3790:	91 83       	std	Z+1, r25	; 0x01
    3792:	80 83       	st	Z, r24
    3794:	de 01       	movw	r26, r28
    3796:	a7 55       	subi	r26, 0x57	; 87
    3798:	bf 4f       	sbci	r27, 0xFF	; 255
    379a:	fe 01       	movw	r30, r28
    379c:	e3 55       	subi	r30, 0x53	; 83
    379e:	ff 4f       	sbci	r31, 0xFF	; 255
    37a0:	80 81       	ld	r24, Z
    37a2:	91 81       	ldd	r25, Z+1	; 0x01
    37a4:	8d 93       	st	X+, r24
    37a6:	9c 93       	st	X, r25
    37a8:	fe 01       	movw	r30, r28
    37aa:	e7 55       	subi	r30, 0x57	; 87
    37ac:	ff 4f       	sbci	r31, 0xFF	; 255
    37ae:	80 81       	ld	r24, Z
    37b0:	91 81       	ldd	r25, Z+1	; 0x01
    37b2:	01 97       	sbiw	r24, 0x01	; 1
    37b4:	f1 f7       	brne	.-4      	; 0x37b2 <__stack+0x15b3>
    37b6:	fe 01       	movw	r30, r28
    37b8:	e7 55       	subi	r30, 0x57	; 87
    37ba:	ff 4f       	sbci	r31, 0xFF	; 255
    37bc:	91 83       	std	Z+1, r25	; 0x01
    37be:	80 83       	st	Z, r24
				_delay_ms(2000);
				servo_1(180);
    37c0:	84 eb       	ldi	r24, 0xB4	; 180
    37c2:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <servo_1>
    37c6:	fe 01       	movw	r30, r28
    37c8:	eb 55       	subi	r30, 0x5B	; 91
    37ca:	ff 4f       	sbci	r31, 0xFF	; 255
    37cc:	80 e0       	ldi	r24, 0x00	; 0
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	aa ef       	ldi	r26, 0xFA	; 250
    37d2:	b4 e4       	ldi	r27, 0x44	; 68
    37d4:	80 83       	st	Z, r24
    37d6:	91 83       	std	Z+1, r25	; 0x01
    37d8:	a2 83       	std	Z+2, r26	; 0x02
    37da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37dc:	8e 01       	movw	r16, r28
    37de:	0f 55       	subi	r16, 0x5F	; 95
    37e0:	1f 4f       	sbci	r17, 0xFF	; 255
    37e2:	fe 01       	movw	r30, r28
    37e4:	eb 55       	subi	r30, 0x5B	; 91
    37e6:	ff 4f       	sbci	r31, 0xFF	; 255
    37e8:	60 81       	ld	r22, Z
    37ea:	71 81       	ldd	r23, Z+1	; 0x01
    37ec:	82 81       	ldd	r24, Z+2	; 0x02
    37ee:	93 81       	ldd	r25, Z+3	; 0x03
    37f0:	2d ec       	ldi	r18, 0xCD	; 205
    37f2:	3c ec       	ldi	r19, 0xCC	; 204
    37f4:	4c e2       	ldi	r20, 0x2C	; 44
    37f6:	55 e4       	ldi	r21, 0x45	; 69
    37f8:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    37fc:	dc 01       	movw	r26, r24
    37fe:	cb 01       	movw	r24, r22
    3800:	f8 01       	movw	r30, r16
    3802:	80 83       	st	Z, r24
    3804:	91 83       	std	Z+1, r25	; 0x01
    3806:	a2 83       	std	Z+2, r26	; 0x02
    3808:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    380a:	fe 01       	movw	r30, r28
    380c:	ef 55       	subi	r30, 0x5F	; 95
    380e:	ff 4f       	sbci	r31, 0xFF	; 255
    3810:	60 81       	ld	r22, Z
    3812:	71 81       	ldd	r23, Z+1	; 0x01
    3814:	82 81       	ldd	r24, Z+2	; 0x02
    3816:	93 81       	ldd	r25, Z+3	; 0x03
    3818:	20 e0       	ldi	r18, 0x00	; 0
    381a:	30 e0       	ldi	r19, 0x00	; 0
    381c:	40 e8       	ldi	r20, 0x80	; 128
    381e:	5f e3       	ldi	r21, 0x3F	; 63
    3820:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
    3824:	88 23       	and	r24, r24
    3826:	44 f4       	brge	.+16     	; 0x3838 <__stack+0x1639>
		__ticks = 1;
    3828:	fe 01       	movw	r30, r28
    382a:	e1 56       	subi	r30, 0x61	; 97
    382c:	ff 4f       	sbci	r31, 0xFF	; 255
    382e:	81 e0       	ldi	r24, 0x01	; 1
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	91 83       	std	Z+1, r25	; 0x01
    3834:	80 83       	st	Z, r24
    3836:	64 c0       	rjmp	.+200    	; 0x3900 <__stack+0x1701>
	else if (__tmp > 65535)
    3838:	fe 01       	movw	r30, r28
    383a:	ef 55       	subi	r30, 0x5F	; 95
    383c:	ff 4f       	sbci	r31, 0xFF	; 255
    383e:	60 81       	ld	r22, Z
    3840:	71 81       	ldd	r23, Z+1	; 0x01
    3842:	82 81       	ldd	r24, Z+2	; 0x02
    3844:	93 81       	ldd	r25, Z+3	; 0x03
    3846:	20 e0       	ldi	r18, 0x00	; 0
    3848:	3f ef       	ldi	r19, 0xFF	; 255
    384a:	4f e7       	ldi	r20, 0x7F	; 127
    384c:	57 e4       	ldi	r21, 0x47	; 71
    384e:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
    3852:	18 16       	cp	r1, r24
    3854:	0c f0       	brlt	.+2      	; 0x3858 <__stack+0x1659>
    3856:	43 c0       	rjmp	.+134    	; 0x38de <__stack+0x16df>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3858:	fe 01       	movw	r30, r28
    385a:	eb 55       	subi	r30, 0x5B	; 91
    385c:	ff 4f       	sbci	r31, 0xFF	; 255
    385e:	60 81       	ld	r22, Z
    3860:	71 81       	ldd	r23, Z+1	; 0x01
    3862:	82 81       	ldd	r24, Z+2	; 0x02
    3864:	93 81       	ldd	r25, Z+3	; 0x03
    3866:	20 e0       	ldi	r18, 0x00	; 0
    3868:	30 e0       	ldi	r19, 0x00	; 0
    386a:	40 e2       	ldi	r20, 0x20	; 32
    386c:	51 e4       	ldi	r21, 0x41	; 65
    386e:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    3872:	dc 01       	movw	r26, r24
    3874:	cb 01       	movw	r24, r22
    3876:	8e 01       	movw	r16, r28
    3878:	01 56       	subi	r16, 0x61	; 97
    387a:	1f 4f       	sbci	r17, 0xFF	; 255
    387c:	bc 01       	movw	r22, r24
    387e:	cd 01       	movw	r24, r26
    3880:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    3884:	dc 01       	movw	r26, r24
    3886:	cb 01       	movw	r24, r22
    3888:	f8 01       	movw	r30, r16
    388a:	91 83       	std	Z+1, r25	; 0x01
    388c:	80 83       	st	Z, r24
    388e:	1f c0       	rjmp	.+62     	; 0x38ce <__stack+0x16cf>
    3890:	fe 01       	movw	r30, r28
    3892:	e3 56       	subi	r30, 0x63	; 99
    3894:	ff 4f       	sbci	r31, 0xFF	; 255
    3896:	84 e1       	ldi	r24, 0x14	; 20
    3898:	91 e0       	ldi	r25, 0x01	; 1
    389a:	91 83       	std	Z+1, r25	; 0x01
    389c:	80 83       	st	Z, r24
    389e:	fe 01       	movw	r30, r28
    38a0:	e3 56       	subi	r30, 0x63	; 99
    38a2:	ff 4f       	sbci	r31, 0xFF	; 255
    38a4:	80 81       	ld	r24, Z
    38a6:	91 81       	ldd	r25, Z+1	; 0x01
    38a8:	01 97       	sbiw	r24, 0x01	; 1
    38aa:	f1 f7       	brne	.-4      	; 0x38a8 <__stack+0x16a9>
    38ac:	fe 01       	movw	r30, r28
    38ae:	e3 56       	subi	r30, 0x63	; 99
    38b0:	ff 4f       	sbci	r31, 0xFF	; 255
    38b2:	91 83       	std	Z+1, r25	; 0x01
    38b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38b6:	de 01       	movw	r26, r28
    38b8:	a1 56       	subi	r26, 0x61	; 97
    38ba:	bf 4f       	sbci	r27, 0xFF	; 255
    38bc:	fe 01       	movw	r30, r28
    38be:	e1 56       	subi	r30, 0x61	; 97
    38c0:	ff 4f       	sbci	r31, 0xFF	; 255
    38c2:	80 81       	ld	r24, Z
    38c4:	91 81       	ldd	r25, Z+1	; 0x01
    38c6:	01 97       	sbiw	r24, 0x01	; 1
    38c8:	11 96       	adiw	r26, 0x01	; 1
    38ca:	9c 93       	st	X, r25
    38cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38ce:	fe 01       	movw	r30, r28
    38d0:	e1 56       	subi	r30, 0x61	; 97
    38d2:	ff 4f       	sbci	r31, 0xFF	; 255
    38d4:	80 81       	ld	r24, Z
    38d6:	91 81       	ldd	r25, Z+1	; 0x01
    38d8:	00 97       	sbiw	r24, 0x00	; 0
    38da:	d1 f6       	brne	.-76     	; 0x3890 <__stack+0x1691>
    38dc:	27 c0       	rjmp	.+78     	; 0x392c <__stack+0x172d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38de:	8e 01       	movw	r16, r28
    38e0:	01 56       	subi	r16, 0x61	; 97
    38e2:	1f 4f       	sbci	r17, 0xFF	; 255
    38e4:	fe 01       	movw	r30, r28
    38e6:	ef 55       	subi	r30, 0x5F	; 95
    38e8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ea:	60 81       	ld	r22, Z
    38ec:	71 81       	ldd	r23, Z+1	; 0x01
    38ee:	82 81       	ldd	r24, Z+2	; 0x02
    38f0:	93 81       	ldd	r25, Z+3	; 0x03
    38f2:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    38f6:	dc 01       	movw	r26, r24
    38f8:	cb 01       	movw	r24, r22
    38fa:	f8 01       	movw	r30, r16
    38fc:	91 83       	std	Z+1, r25	; 0x01
    38fe:	80 83       	st	Z, r24
    3900:	de 01       	movw	r26, r28
    3902:	a5 56       	subi	r26, 0x65	; 101
    3904:	bf 4f       	sbci	r27, 0xFF	; 255
    3906:	fe 01       	movw	r30, r28
    3908:	e1 56       	subi	r30, 0x61	; 97
    390a:	ff 4f       	sbci	r31, 0xFF	; 255
    390c:	80 81       	ld	r24, Z
    390e:	91 81       	ldd	r25, Z+1	; 0x01
    3910:	8d 93       	st	X+, r24
    3912:	9c 93       	st	X, r25
    3914:	fe 01       	movw	r30, r28
    3916:	e5 56       	subi	r30, 0x65	; 101
    3918:	ff 4f       	sbci	r31, 0xFF	; 255
    391a:	80 81       	ld	r24, Z
    391c:	91 81       	ldd	r25, Z+1	; 0x01
    391e:	01 97       	sbiw	r24, 0x01	; 1
    3920:	f1 f7       	brne	.-4      	; 0x391e <__stack+0x171f>
    3922:	fe 01       	movw	r30, r28
    3924:	e5 56       	subi	r30, 0x65	; 101
    3926:	ff 4f       	sbci	r31, 0xFF	; 255
    3928:	91 83       	std	Z+1, r25	; 0x01
    392a:	80 83       	st	Z, r24
				_delay_ms(2000);
				servo_3(85);
    392c:	85 e5       	ldi	r24, 0x55	; 85
    392e:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <servo_3>
    3932:	fe 01       	movw	r30, r28
    3934:	e9 56       	subi	r30, 0x69	; 105
    3936:	ff 4f       	sbci	r31, 0xFF	; 255
    3938:	80 e0       	ldi	r24, 0x00	; 0
    393a:	90 e0       	ldi	r25, 0x00	; 0
    393c:	aa ef       	ldi	r26, 0xFA	; 250
    393e:	b4 e4       	ldi	r27, 0x44	; 68
    3940:	80 83       	st	Z, r24
    3942:	91 83       	std	Z+1, r25	; 0x01
    3944:	a2 83       	std	Z+2, r26	; 0x02
    3946:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3948:	8e 01       	movw	r16, r28
    394a:	0d 56       	subi	r16, 0x6D	; 109
    394c:	1f 4f       	sbci	r17, 0xFF	; 255
    394e:	fe 01       	movw	r30, r28
    3950:	e9 56       	subi	r30, 0x69	; 105
    3952:	ff 4f       	sbci	r31, 0xFF	; 255
    3954:	60 81       	ld	r22, Z
    3956:	71 81       	ldd	r23, Z+1	; 0x01
    3958:	82 81       	ldd	r24, Z+2	; 0x02
    395a:	93 81       	ldd	r25, Z+3	; 0x03
    395c:	2d ec       	ldi	r18, 0xCD	; 205
    395e:	3c ec       	ldi	r19, 0xCC	; 204
    3960:	4c e2       	ldi	r20, 0x2C	; 44
    3962:	55 e4       	ldi	r21, 0x45	; 69
    3964:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    3968:	dc 01       	movw	r26, r24
    396a:	cb 01       	movw	r24, r22
    396c:	f8 01       	movw	r30, r16
    396e:	80 83       	st	Z, r24
    3970:	91 83       	std	Z+1, r25	; 0x01
    3972:	a2 83       	std	Z+2, r26	; 0x02
    3974:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3976:	fe 01       	movw	r30, r28
    3978:	ed 56       	subi	r30, 0x6D	; 109
    397a:	ff 4f       	sbci	r31, 0xFF	; 255
    397c:	60 81       	ld	r22, Z
    397e:	71 81       	ldd	r23, Z+1	; 0x01
    3980:	82 81       	ldd	r24, Z+2	; 0x02
    3982:	93 81       	ldd	r25, Z+3	; 0x03
    3984:	20 e0       	ldi	r18, 0x00	; 0
    3986:	30 e0       	ldi	r19, 0x00	; 0
    3988:	40 e8       	ldi	r20, 0x80	; 128
    398a:	5f e3       	ldi	r21, 0x3F	; 63
    398c:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
    3990:	88 23       	and	r24, r24
    3992:	44 f4       	brge	.+16     	; 0x39a4 <__stack+0x17a5>
		__ticks = 1;
    3994:	fe 01       	movw	r30, r28
    3996:	ef 56       	subi	r30, 0x6F	; 111
    3998:	ff 4f       	sbci	r31, 0xFF	; 255
    399a:	81 e0       	ldi	r24, 0x01	; 1
    399c:	90 e0       	ldi	r25, 0x00	; 0
    399e:	91 83       	std	Z+1, r25	; 0x01
    39a0:	80 83       	st	Z, r24
    39a2:	64 c0       	rjmp	.+200    	; 0x3a6c <__stack+0x186d>
	else if (__tmp > 65535)
    39a4:	fe 01       	movw	r30, r28
    39a6:	ed 56       	subi	r30, 0x6D	; 109
    39a8:	ff 4f       	sbci	r31, 0xFF	; 255
    39aa:	60 81       	ld	r22, Z
    39ac:	71 81       	ldd	r23, Z+1	; 0x01
    39ae:	82 81       	ldd	r24, Z+2	; 0x02
    39b0:	93 81       	ldd	r25, Z+3	; 0x03
    39b2:	20 e0       	ldi	r18, 0x00	; 0
    39b4:	3f ef       	ldi	r19, 0xFF	; 255
    39b6:	4f e7       	ldi	r20, 0x7F	; 127
    39b8:	57 e4       	ldi	r21, 0x47	; 71
    39ba:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
    39be:	18 16       	cp	r1, r24
    39c0:	0c f0       	brlt	.+2      	; 0x39c4 <__stack+0x17c5>
    39c2:	43 c0       	rjmp	.+134    	; 0x3a4a <__stack+0x184b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39c4:	fe 01       	movw	r30, r28
    39c6:	e9 56       	subi	r30, 0x69	; 105
    39c8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ca:	60 81       	ld	r22, Z
    39cc:	71 81       	ldd	r23, Z+1	; 0x01
    39ce:	82 81       	ldd	r24, Z+2	; 0x02
    39d0:	93 81       	ldd	r25, Z+3	; 0x03
    39d2:	20 e0       	ldi	r18, 0x00	; 0
    39d4:	30 e0       	ldi	r19, 0x00	; 0
    39d6:	40 e2       	ldi	r20, 0x20	; 32
    39d8:	51 e4       	ldi	r21, 0x41	; 65
    39da:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    39de:	dc 01       	movw	r26, r24
    39e0:	cb 01       	movw	r24, r22
    39e2:	8e 01       	movw	r16, r28
    39e4:	0f 56       	subi	r16, 0x6F	; 111
    39e6:	1f 4f       	sbci	r17, 0xFF	; 255
    39e8:	bc 01       	movw	r22, r24
    39ea:	cd 01       	movw	r24, r26
    39ec:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    39f0:	dc 01       	movw	r26, r24
    39f2:	cb 01       	movw	r24, r22
    39f4:	f8 01       	movw	r30, r16
    39f6:	91 83       	std	Z+1, r25	; 0x01
    39f8:	80 83       	st	Z, r24
    39fa:	1f c0       	rjmp	.+62     	; 0x3a3a <__stack+0x183b>
    39fc:	fe 01       	movw	r30, r28
    39fe:	e1 57       	subi	r30, 0x71	; 113
    3a00:	ff 4f       	sbci	r31, 0xFF	; 255
    3a02:	84 e1       	ldi	r24, 0x14	; 20
    3a04:	91 e0       	ldi	r25, 0x01	; 1
    3a06:	91 83       	std	Z+1, r25	; 0x01
    3a08:	80 83       	st	Z, r24
    3a0a:	fe 01       	movw	r30, r28
    3a0c:	e1 57       	subi	r30, 0x71	; 113
    3a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a10:	80 81       	ld	r24, Z
    3a12:	91 81       	ldd	r25, Z+1	; 0x01
    3a14:	01 97       	sbiw	r24, 0x01	; 1
    3a16:	f1 f7       	brne	.-4      	; 0x3a14 <__stack+0x1815>
    3a18:	fe 01       	movw	r30, r28
    3a1a:	e1 57       	subi	r30, 0x71	; 113
    3a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1e:	91 83       	std	Z+1, r25	; 0x01
    3a20:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a22:	de 01       	movw	r26, r28
    3a24:	af 56       	subi	r26, 0x6F	; 111
    3a26:	bf 4f       	sbci	r27, 0xFF	; 255
    3a28:	fe 01       	movw	r30, r28
    3a2a:	ef 56       	subi	r30, 0x6F	; 111
    3a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2e:	80 81       	ld	r24, Z
    3a30:	91 81       	ldd	r25, Z+1	; 0x01
    3a32:	01 97       	sbiw	r24, 0x01	; 1
    3a34:	11 96       	adiw	r26, 0x01	; 1
    3a36:	9c 93       	st	X, r25
    3a38:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a3a:	fe 01       	movw	r30, r28
    3a3c:	ef 56       	subi	r30, 0x6F	; 111
    3a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a40:	80 81       	ld	r24, Z
    3a42:	91 81       	ldd	r25, Z+1	; 0x01
    3a44:	00 97       	sbiw	r24, 0x00	; 0
    3a46:	d1 f6       	brne	.-76     	; 0x39fc <__stack+0x17fd>
    3a48:	27 c0       	rjmp	.+78     	; 0x3a98 <__stack+0x1899>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a4a:	8e 01       	movw	r16, r28
    3a4c:	0f 56       	subi	r16, 0x6F	; 111
    3a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    3a50:	fe 01       	movw	r30, r28
    3a52:	ed 56       	subi	r30, 0x6D	; 109
    3a54:	ff 4f       	sbci	r31, 0xFF	; 255
    3a56:	60 81       	ld	r22, Z
    3a58:	71 81       	ldd	r23, Z+1	; 0x01
    3a5a:	82 81       	ldd	r24, Z+2	; 0x02
    3a5c:	93 81       	ldd	r25, Z+3	; 0x03
    3a5e:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    3a62:	dc 01       	movw	r26, r24
    3a64:	cb 01       	movw	r24, r22
    3a66:	f8 01       	movw	r30, r16
    3a68:	91 83       	std	Z+1, r25	; 0x01
    3a6a:	80 83       	st	Z, r24
    3a6c:	de 01       	movw	r26, r28
    3a6e:	a3 57       	subi	r26, 0x73	; 115
    3a70:	bf 4f       	sbci	r27, 0xFF	; 255
    3a72:	fe 01       	movw	r30, r28
    3a74:	ef 56       	subi	r30, 0x6F	; 111
    3a76:	ff 4f       	sbci	r31, 0xFF	; 255
    3a78:	80 81       	ld	r24, Z
    3a7a:	91 81       	ldd	r25, Z+1	; 0x01
    3a7c:	8d 93       	st	X+, r24
    3a7e:	9c 93       	st	X, r25
    3a80:	fe 01       	movw	r30, r28
    3a82:	e3 57       	subi	r30, 0x73	; 115
    3a84:	ff 4f       	sbci	r31, 0xFF	; 255
    3a86:	80 81       	ld	r24, Z
    3a88:	91 81       	ldd	r25, Z+1	; 0x01
    3a8a:	01 97       	sbiw	r24, 0x01	; 1
    3a8c:	f1 f7       	brne	.-4      	; 0x3a8a <__stack+0x188b>
    3a8e:	fe 01       	movw	r30, r28
    3a90:	e3 57       	subi	r30, 0x73	; 115
    3a92:	ff 4f       	sbci	r31, 0xFF	; 255
    3a94:	91 83       	std	Z+1, r25	; 0x01
    3a96:	80 83       	st	Z, r24
				_delay_ms(2000);

				REVERSE();
    3a98:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <REVERSE>
				LINEAR_DISTANCE(rev_dis);
    3a9c:	80 91 25 03 	lds	r24, 0x0325
    3aa0:	90 91 26 03 	lds	r25, 0x0326
    3aa4:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LINEAR_DISTANCE>
				STOP();
    3aa8:	0e 94 31 0c 	call	0x1862	; 0x1862 <STOP>
    3aac:	3a c5       	rjmp	.+2676   	; 0x4522 <__stack+0x2323>
	

		
		} 

	else if (data== 'C') // object of smaller area to be kept on left
    3aae:	80 91 3a 03 	lds	r24, 0x033A
    3ab2:	83 34       	cpi	r24, 0x43	; 67
    3ab4:	09 f0       	breq	.+2      	; 0x3ab8 <__stack+0x18b9>
    3ab6:	35 c5       	rjmp	.+2666   	; 0x4522 <__stack+0x2323>
		{
				
	
				servo_3(85);
    3ab8:	85 e5       	ldi	r24, 0x55	; 85
    3aba:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <servo_3>
    3abe:	fe 01       	movw	r30, r28
    3ac0:	e7 57       	subi	r30, 0x77	; 119
    3ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac4:	80 e0       	ldi	r24, 0x00	; 0
    3ac6:	90 e0       	ldi	r25, 0x00	; 0
    3ac8:	aa ef       	ldi	r26, 0xFA	; 250
    3aca:	b4 e4       	ldi	r27, 0x44	; 68
    3acc:	80 83       	st	Z, r24
    3ace:	91 83       	std	Z+1, r25	; 0x01
    3ad0:	a2 83       	std	Z+2, r26	; 0x02
    3ad2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ad4:	8e 01       	movw	r16, r28
    3ad6:	0b 57       	subi	r16, 0x7B	; 123
    3ad8:	1f 4f       	sbci	r17, 0xFF	; 255
    3ada:	fe 01       	movw	r30, r28
    3adc:	e7 57       	subi	r30, 0x77	; 119
    3ade:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae0:	60 81       	ld	r22, Z
    3ae2:	71 81       	ldd	r23, Z+1	; 0x01
    3ae4:	82 81       	ldd	r24, Z+2	; 0x02
    3ae6:	93 81       	ldd	r25, Z+3	; 0x03
    3ae8:	2d ec       	ldi	r18, 0xCD	; 205
    3aea:	3c ec       	ldi	r19, 0xCC	; 204
    3aec:	4c e2       	ldi	r20, 0x2C	; 44
    3aee:	55 e4       	ldi	r21, 0x45	; 69
    3af0:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    3af4:	dc 01       	movw	r26, r24
    3af6:	cb 01       	movw	r24, r22
    3af8:	f8 01       	movw	r30, r16
    3afa:	80 83       	st	Z, r24
    3afc:	91 83       	std	Z+1, r25	; 0x01
    3afe:	a2 83       	std	Z+2, r26	; 0x02
    3b00:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b02:	fe 01       	movw	r30, r28
    3b04:	eb 57       	subi	r30, 0x7B	; 123
    3b06:	ff 4f       	sbci	r31, 0xFF	; 255
    3b08:	60 81       	ld	r22, Z
    3b0a:	71 81       	ldd	r23, Z+1	; 0x01
    3b0c:	82 81       	ldd	r24, Z+2	; 0x02
    3b0e:	93 81       	ldd	r25, Z+3	; 0x03
    3b10:	20 e0       	ldi	r18, 0x00	; 0
    3b12:	30 e0       	ldi	r19, 0x00	; 0
    3b14:	40 e8       	ldi	r20, 0x80	; 128
    3b16:	5f e3       	ldi	r21, 0x3F	; 63
    3b18:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
    3b1c:	88 23       	and	r24, r24
    3b1e:	44 f4       	brge	.+16     	; 0x3b30 <__stack+0x1931>
		__ticks = 1;
    3b20:	fe 01       	movw	r30, r28
    3b22:	ed 57       	subi	r30, 0x7D	; 125
    3b24:	ff 4f       	sbci	r31, 0xFF	; 255
    3b26:	81 e0       	ldi	r24, 0x01	; 1
    3b28:	90 e0       	ldi	r25, 0x00	; 0
    3b2a:	91 83       	std	Z+1, r25	; 0x01
    3b2c:	80 83       	st	Z, r24
    3b2e:	64 c0       	rjmp	.+200    	; 0x3bf8 <__stack+0x19f9>
	else if (__tmp > 65535)
    3b30:	fe 01       	movw	r30, r28
    3b32:	eb 57       	subi	r30, 0x7B	; 123
    3b34:	ff 4f       	sbci	r31, 0xFF	; 255
    3b36:	60 81       	ld	r22, Z
    3b38:	71 81       	ldd	r23, Z+1	; 0x01
    3b3a:	82 81       	ldd	r24, Z+2	; 0x02
    3b3c:	93 81       	ldd	r25, Z+3	; 0x03
    3b3e:	20 e0       	ldi	r18, 0x00	; 0
    3b40:	3f ef       	ldi	r19, 0xFF	; 255
    3b42:	4f e7       	ldi	r20, 0x7F	; 127
    3b44:	57 e4       	ldi	r21, 0x47	; 71
    3b46:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
    3b4a:	18 16       	cp	r1, r24
    3b4c:	0c f0       	brlt	.+2      	; 0x3b50 <__stack+0x1951>
    3b4e:	43 c0       	rjmp	.+134    	; 0x3bd6 <__stack+0x19d7>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b50:	fe 01       	movw	r30, r28
    3b52:	e7 57       	subi	r30, 0x77	; 119
    3b54:	ff 4f       	sbci	r31, 0xFF	; 255
    3b56:	60 81       	ld	r22, Z
    3b58:	71 81       	ldd	r23, Z+1	; 0x01
    3b5a:	82 81       	ldd	r24, Z+2	; 0x02
    3b5c:	93 81       	ldd	r25, Z+3	; 0x03
    3b5e:	20 e0       	ldi	r18, 0x00	; 0
    3b60:	30 e0       	ldi	r19, 0x00	; 0
    3b62:	40 e2       	ldi	r20, 0x20	; 32
    3b64:	51 e4       	ldi	r21, 0x41	; 65
    3b66:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    3b6a:	dc 01       	movw	r26, r24
    3b6c:	cb 01       	movw	r24, r22
    3b6e:	8e 01       	movw	r16, r28
    3b70:	0d 57       	subi	r16, 0x7D	; 125
    3b72:	1f 4f       	sbci	r17, 0xFF	; 255
    3b74:	bc 01       	movw	r22, r24
    3b76:	cd 01       	movw	r24, r26
    3b78:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    3b7c:	dc 01       	movw	r26, r24
    3b7e:	cb 01       	movw	r24, r22
    3b80:	f8 01       	movw	r30, r16
    3b82:	91 83       	std	Z+1, r25	; 0x01
    3b84:	80 83       	st	Z, r24
    3b86:	1f c0       	rjmp	.+62     	; 0x3bc6 <__stack+0x19c7>
    3b88:	fe 01       	movw	r30, r28
    3b8a:	ef 57       	subi	r30, 0x7F	; 127
    3b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8e:	84 e1       	ldi	r24, 0x14	; 20
    3b90:	91 e0       	ldi	r25, 0x01	; 1
    3b92:	91 83       	std	Z+1, r25	; 0x01
    3b94:	80 83       	st	Z, r24
    3b96:	fe 01       	movw	r30, r28
    3b98:	ef 57       	subi	r30, 0x7F	; 127
    3b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9c:	80 81       	ld	r24, Z
    3b9e:	91 81       	ldd	r25, Z+1	; 0x01
    3ba0:	01 97       	sbiw	r24, 0x01	; 1
    3ba2:	f1 f7       	brne	.-4      	; 0x3ba0 <__stack+0x19a1>
    3ba4:	fe 01       	movw	r30, r28
    3ba6:	ef 57       	subi	r30, 0x7F	; 127
    3ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    3baa:	91 83       	std	Z+1, r25	; 0x01
    3bac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bae:	de 01       	movw	r26, r28
    3bb0:	ad 57       	subi	r26, 0x7D	; 125
    3bb2:	bf 4f       	sbci	r27, 0xFF	; 255
    3bb4:	fe 01       	movw	r30, r28
    3bb6:	ed 57       	subi	r30, 0x7D	; 125
    3bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bba:	80 81       	ld	r24, Z
    3bbc:	91 81       	ldd	r25, Z+1	; 0x01
    3bbe:	01 97       	sbiw	r24, 0x01	; 1
    3bc0:	11 96       	adiw	r26, 0x01	; 1
    3bc2:	9c 93       	st	X, r25
    3bc4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bc6:	fe 01       	movw	r30, r28
    3bc8:	ed 57       	subi	r30, 0x7D	; 125
    3bca:	ff 4f       	sbci	r31, 0xFF	; 255
    3bcc:	80 81       	ld	r24, Z
    3bce:	91 81       	ldd	r25, Z+1	; 0x01
    3bd0:	00 97       	sbiw	r24, 0x00	; 0
    3bd2:	d1 f6       	brne	.-76     	; 0x3b88 <__stack+0x1989>
    3bd4:	27 c0       	rjmp	.+78     	; 0x3c24 <__stack+0x1a25>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bd6:	8e 01       	movw	r16, r28
    3bd8:	0d 57       	subi	r16, 0x7D	; 125
    3bda:	1f 4f       	sbci	r17, 0xFF	; 255
    3bdc:	fe 01       	movw	r30, r28
    3bde:	eb 57       	subi	r30, 0x7B	; 123
    3be0:	ff 4f       	sbci	r31, 0xFF	; 255
    3be2:	60 81       	ld	r22, Z
    3be4:	71 81       	ldd	r23, Z+1	; 0x01
    3be6:	82 81       	ldd	r24, Z+2	; 0x02
    3be8:	93 81       	ldd	r25, Z+3	; 0x03
    3bea:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    3bee:	dc 01       	movw	r26, r24
    3bf0:	cb 01       	movw	r24, r22
    3bf2:	f8 01       	movw	r30, r16
    3bf4:	91 83       	std	Z+1, r25	; 0x01
    3bf6:	80 83       	st	Z, r24
    3bf8:	de 01       	movw	r26, r28
    3bfa:	a1 58       	subi	r26, 0x81	; 129
    3bfc:	bf 4f       	sbci	r27, 0xFF	; 255
    3bfe:	fe 01       	movw	r30, r28
    3c00:	ed 57       	subi	r30, 0x7D	; 125
    3c02:	ff 4f       	sbci	r31, 0xFF	; 255
    3c04:	80 81       	ld	r24, Z
    3c06:	91 81       	ldd	r25, Z+1	; 0x01
    3c08:	8d 93       	st	X+, r24
    3c0a:	9c 93       	st	X, r25
    3c0c:	fe 01       	movw	r30, r28
    3c0e:	e1 58       	subi	r30, 0x81	; 129
    3c10:	ff 4f       	sbci	r31, 0xFF	; 255
    3c12:	80 81       	ld	r24, Z
    3c14:	91 81       	ldd	r25, Z+1	; 0x01
    3c16:	01 97       	sbiw	r24, 0x01	; 1
    3c18:	f1 f7       	brne	.-4      	; 0x3c16 <__stack+0x1a17>
    3c1a:	fe 01       	movw	r30, r28
    3c1c:	e1 58       	subi	r30, 0x81	; 129
    3c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c20:	91 83       	std	Z+1, r25	; 0x01
    3c22:	80 83       	st	Z, r24
				_delay_ms(2000);
				
				servo_2(105);
    3c24:	89 e6       	ldi	r24, 0x69	; 105
    3c26:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <servo_2>
    3c2a:	fe 01       	movw	r30, r28
    3c2c:	e5 58       	subi	r30, 0x85	; 133
    3c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c30:	80 e0       	ldi	r24, 0x00	; 0
    3c32:	90 e0       	ldi	r25, 0x00	; 0
    3c34:	aa ef       	ldi	r26, 0xFA	; 250
    3c36:	b4 e4       	ldi	r27, 0x44	; 68
    3c38:	80 83       	st	Z, r24
    3c3a:	91 83       	std	Z+1, r25	; 0x01
    3c3c:	a2 83       	std	Z+2, r26	; 0x02
    3c3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c40:	8e 01       	movw	r16, r28
    3c42:	09 58       	subi	r16, 0x89	; 137
    3c44:	1f 4f       	sbci	r17, 0xFF	; 255
    3c46:	fe 01       	movw	r30, r28
    3c48:	e5 58       	subi	r30, 0x85	; 133
    3c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c4c:	60 81       	ld	r22, Z
    3c4e:	71 81       	ldd	r23, Z+1	; 0x01
    3c50:	82 81       	ldd	r24, Z+2	; 0x02
    3c52:	93 81       	ldd	r25, Z+3	; 0x03
    3c54:	2d ec       	ldi	r18, 0xCD	; 205
    3c56:	3c ec       	ldi	r19, 0xCC	; 204
    3c58:	4c e2       	ldi	r20, 0x2C	; 44
    3c5a:	55 e4       	ldi	r21, 0x45	; 69
    3c5c:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    3c60:	dc 01       	movw	r26, r24
    3c62:	cb 01       	movw	r24, r22
    3c64:	f8 01       	movw	r30, r16
    3c66:	80 83       	st	Z, r24
    3c68:	91 83       	std	Z+1, r25	; 0x01
    3c6a:	a2 83       	std	Z+2, r26	; 0x02
    3c6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c6e:	fe 01       	movw	r30, r28
    3c70:	e9 58       	subi	r30, 0x89	; 137
    3c72:	ff 4f       	sbci	r31, 0xFF	; 255
    3c74:	60 81       	ld	r22, Z
    3c76:	71 81       	ldd	r23, Z+1	; 0x01
    3c78:	82 81       	ldd	r24, Z+2	; 0x02
    3c7a:	93 81       	ldd	r25, Z+3	; 0x03
    3c7c:	20 e0       	ldi	r18, 0x00	; 0
    3c7e:	30 e0       	ldi	r19, 0x00	; 0
    3c80:	40 e8       	ldi	r20, 0x80	; 128
    3c82:	5f e3       	ldi	r21, 0x3F	; 63
    3c84:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
    3c88:	88 23       	and	r24, r24
    3c8a:	44 f4       	brge	.+16     	; 0x3c9c <__stack+0x1a9d>
		__ticks = 1;
    3c8c:	fe 01       	movw	r30, r28
    3c8e:	eb 58       	subi	r30, 0x8B	; 139
    3c90:	ff 4f       	sbci	r31, 0xFF	; 255
    3c92:	81 e0       	ldi	r24, 0x01	; 1
    3c94:	90 e0       	ldi	r25, 0x00	; 0
    3c96:	91 83       	std	Z+1, r25	; 0x01
    3c98:	80 83       	st	Z, r24
    3c9a:	64 c0       	rjmp	.+200    	; 0x3d64 <__stack+0x1b65>
	else if (__tmp > 65535)
    3c9c:	fe 01       	movw	r30, r28
    3c9e:	e9 58       	subi	r30, 0x89	; 137
    3ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca2:	60 81       	ld	r22, Z
    3ca4:	71 81       	ldd	r23, Z+1	; 0x01
    3ca6:	82 81       	ldd	r24, Z+2	; 0x02
    3ca8:	93 81       	ldd	r25, Z+3	; 0x03
    3caa:	20 e0       	ldi	r18, 0x00	; 0
    3cac:	3f ef       	ldi	r19, 0xFF	; 255
    3cae:	4f e7       	ldi	r20, 0x7F	; 127
    3cb0:	57 e4       	ldi	r21, 0x47	; 71
    3cb2:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
    3cb6:	18 16       	cp	r1, r24
    3cb8:	0c f0       	brlt	.+2      	; 0x3cbc <__stack+0x1abd>
    3cba:	43 c0       	rjmp	.+134    	; 0x3d42 <__stack+0x1b43>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cbc:	fe 01       	movw	r30, r28
    3cbe:	e5 58       	subi	r30, 0x85	; 133
    3cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc2:	60 81       	ld	r22, Z
    3cc4:	71 81       	ldd	r23, Z+1	; 0x01
    3cc6:	82 81       	ldd	r24, Z+2	; 0x02
    3cc8:	93 81       	ldd	r25, Z+3	; 0x03
    3cca:	20 e0       	ldi	r18, 0x00	; 0
    3ccc:	30 e0       	ldi	r19, 0x00	; 0
    3cce:	40 e2       	ldi	r20, 0x20	; 32
    3cd0:	51 e4       	ldi	r21, 0x41	; 65
    3cd2:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    3cd6:	dc 01       	movw	r26, r24
    3cd8:	cb 01       	movw	r24, r22
    3cda:	8e 01       	movw	r16, r28
    3cdc:	0b 58       	subi	r16, 0x8B	; 139
    3cde:	1f 4f       	sbci	r17, 0xFF	; 255
    3ce0:	bc 01       	movw	r22, r24
    3ce2:	cd 01       	movw	r24, r26
    3ce4:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    3ce8:	dc 01       	movw	r26, r24
    3cea:	cb 01       	movw	r24, r22
    3cec:	f8 01       	movw	r30, r16
    3cee:	91 83       	std	Z+1, r25	; 0x01
    3cf0:	80 83       	st	Z, r24
    3cf2:	1f c0       	rjmp	.+62     	; 0x3d32 <__stack+0x1b33>
    3cf4:	fe 01       	movw	r30, r28
    3cf6:	ed 58       	subi	r30, 0x8D	; 141
    3cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfa:	84 e1       	ldi	r24, 0x14	; 20
    3cfc:	91 e0       	ldi	r25, 0x01	; 1
    3cfe:	91 83       	std	Z+1, r25	; 0x01
    3d00:	80 83       	st	Z, r24
    3d02:	fe 01       	movw	r30, r28
    3d04:	ed 58       	subi	r30, 0x8D	; 141
    3d06:	ff 4f       	sbci	r31, 0xFF	; 255
    3d08:	80 81       	ld	r24, Z
    3d0a:	91 81       	ldd	r25, Z+1	; 0x01
    3d0c:	01 97       	sbiw	r24, 0x01	; 1
    3d0e:	f1 f7       	brne	.-4      	; 0x3d0c <__stack+0x1b0d>
    3d10:	fe 01       	movw	r30, r28
    3d12:	ed 58       	subi	r30, 0x8D	; 141
    3d14:	ff 4f       	sbci	r31, 0xFF	; 255
    3d16:	91 83       	std	Z+1, r25	; 0x01
    3d18:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d1a:	de 01       	movw	r26, r28
    3d1c:	ab 58       	subi	r26, 0x8B	; 139
    3d1e:	bf 4f       	sbci	r27, 0xFF	; 255
    3d20:	fe 01       	movw	r30, r28
    3d22:	eb 58       	subi	r30, 0x8B	; 139
    3d24:	ff 4f       	sbci	r31, 0xFF	; 255
    3d26:	80 81       	ld	r24, Z
    3d28:	91 81       	ldd	r25, Z+1	; 0x01
    3d2a:	01 97       	sbiw	r24, 0x01	; 1
    3d2c:	11 96       	adiw	r26, 0x01	; 1
    3d2e:	9c 93       	st	X, r25
    3d30:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d32:	fe 01       	movw	r30, r28
    3d34:	eb 58       	subi	r30, 0x8B	; 139
    3d36:	ff 4f       	sbci	r31, 0xFF	; 255
    3d38:	80 81       	ld	r24, Z
    3d3a:	91 81       	ldd	r25, Z+1	; 0x01
    3d3c:	00 97       	sbiw	r24, 0x00	; 0
    3d3e:	d1 f6       	brne	.-76     	; 0x3cf4 <__stack+0x1af5>
    3d40:	27 c0       	rjmp	.+78     	; 0x3d90 <__stack+0x1b91>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d42:	8e 01       	movw	r16, r28
    3d44:	0b 58       	subi	r16, 0x8B	; 139
    3d46:	1f 4f       	sbci	r17, 0xFF	; 255
    3d48:	fe 01       	movw	r30, r28
    3d4a:	e9 58       	subi	r30, 0x89	; 137
    3d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4e:	60 81       	ld	r22, Z
    3d50:	71 81       	ldd	r23, Z+1	; 0x01
    3d52:	82 81       	ldd	r24, Z+2	; 0x02
    3d54:	93 81       	ldd	r25, Z+3	; 0x03
    3d56:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    3d5a:	dc 01       	movw	r26, r24
    3d5c:	cb 01       	movw	r24, r22
    3d5e:	f8 01       	movw	r30, r16
    3d60:	91 83       	std	Z+1, r25	; 0x01
    3d62:	80 83       	st	Z, r24
    3d64:	de 01       	movw	r26, r28
    3d66:	af 58       	subi	r26, 0x8F	; 143
    3d68:	bf 4f       	sbci	r27, 0xFF	; 255
    3d6a:	fe 01       	movw	r30, r28
    3d6c:	eb 58       	subi	r30, 0x8B	; 139
    3d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d70:	80 81       	ld	r24, Z
    3d72:	91 81       	ldd	r25, Z+1	; 0x01
    3d74:	8d 93       	st	X+, r24
    3d76:	9c 93       	st	X, r25
    3d78:	fe 01       	movw	r30, r28
    3d7a:	ef 58       	subi	r30, 0x8F	; 143
    3d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d7e:	80 81       	ld	r24, Z
    3d80:	91 81       	ldd	r25, Z+1	; 0x01
    3d82:	01 97       	sbiw	r24, 0x01	; 1
    3d84:	f1 f7       	brne	.-4      	; 0x3d82 <__stack+0x1b83>
    3d86:	fe 01       	movw	r30, r28
    3d88:	ef 58       	subi	r30, 0x8F	; 143
    3d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8c:	91 83       	std	Z+1, r25	; 0x01
    3d8e:	80 83       	st	Z, r24
				_delay_ms(2000);
				
				FORWARD();
    3d90:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <FORWARD>
				LINEAR_DISTANCE(50);
    3d94:	82 e3       	ldi	r24, 0x32	; 50
    3d96:	90 e0       	ldi	r25, 0x00	; 0
    3d98:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LINEAR_DISTANCE>
				STOP();
    3d9c:	0e 94 31 0c 	call	0x1862	; 0x1862 <STOP>

				servo_1(0);
    3da0:	80 e0       	ldi	r24, 0x00	; 0
    3da2:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <servo_1>
    3da6:	fe 01       	movw	r30, r28
    3da8:	e3 59       	subi	r30, 0x93	; 147
    3daa:	ff 4f       	sbci	r31, 0xFF	; 255
    3dac:	80 e0       	ldi	r24, 0x00	; 0
    3dae:	90 e0       	ldi	r25, 0x00	; 0
    3db0:	aa ef       	ldi	r26, 0xFA	; 250
    3db2:	b4 e4       	ldi	r27, 0x44	; 68
    3db4:	80 83       	st	Z, r24
    3db6:	91 83       	std	Z+1, r25	; 0x01
    3db8:	a2 83       	std	Z+2, r26	; 0x02
    3dba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dbc:	8e 01       	movw	r16, r28
    3dbe:	07 59       	subi	r16, 0x97	; 151
    3dc0:	1f 4f       	sbci	r17, 0xFF	; 255
    3dc2:	fe 01       	movw	r30, r28
    3dc4:	e3 59       	subi	r30, 0x93	; 147
    3dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc8:	60 81       	ld	r22, Z
    3dca:	71 81       	ldd	r23, Z+1	; 0x01
    3dcc:	82 81       	ldd	r24, Z+2	; 0x02
    3dce:	93 81       	ldd	r25, Z+3	; 0x03
    3dd0:	2d ec       	ldi	r18, 0xCD	; 205
    3dd2:	3c ec       	ldi	r19, 0xCC	; 204
    3dd4:	4c e2       	ldi	r20, 0x2C	; 44
    3dd6:	55 e4       	ldi	r21, 0x45	; 69
    3dd8:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    3ddc:	dc 01       	movw	r26, r24
    3dde:	cb 01       	movw	r24, r22
    3de0:	f8 01       	movw	r30, r16
    3de2:	80 83       	st	Z, r24
    3de4:	91 83       	std	Z+1, r25	; 0x01
    3de6:	a2 83       	std	Z+2, r26	; 0x02
    3de8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3dea:	fe 01       	movw	r30, r28
    3dec:	e7 59       	subi	r30, 0x97	; 151
    3dee:	ff 4f       	sbci	r31, 0xFF	; 255
    3df0:	60 81       	ld	r22, Z
    3df2:	71 81       	ldd	r23, Z+1	; 0x01
    3df4:	82 81       	ldd	r24, Z+2	; 0x02
    3df6:	93 81       	ldd	r25, Z+3	; 0x03
    3df8:	20 e0       	ldi	r18, 0x00	; 0
    3dfa:	30 e0       	ldi	r19, 0x00	; 0
    3dfc:	40 e8       	ldi	r20, 0x80	; 128
    3dfe:	5f e3       	ldi	r21, 0x3F	; 63
    3e00:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
    3e04:	88 23       	and	r24, r24
    3e06:	44 f4       	brge	.+16     	; 0x3e18 <__stack+0x1c19>
		__ticks = 1;
    3e08:	fe 01       	movw	r30, r28
    3e0a:	e9 59       	subi	r30, 0x99	; 153
    3e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0e:	81 e0       	ldi	r24, 0x01	; 1
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	91 83       	std	Z+1, r25	; 0x01
    3e14:	80 83       	st	Z, r24
    3e16:	64 c0       	rjmp	.+200    	; 0x3ee0 <__stack+0x1ce1>
	else if (__tmp > 65535)
    3e18:	fe 01       	movw	r30, r28
    3e1a:	e7 59       	subi	r30, 0x97	; 151
    3e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1e:	60 81       	ld	r22, Z
    3e20:	71 81       	ldd	r23, Z+1	; 0x01
    3e22:	82 81       	ldd	r24, Z+2	; 0x02
    3e24:	93 81       	ldd	r25, Z+3	; 0x03
    3e26:	20 e0       	ldi	r18, 0x00	; 0
    3e28:	3f ef       	ldi	r19, 0xFF	; 255
    3e2a:	4f e7       	ldi	r20, 0x7F	; 127
    3e2c:	57 e4       	ldi	r21, 0x47	; 71
    3e2e:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
    3e32:	18 16       	cp	r1, r24
    3e34:	0c f0       	brlt	.+2      	; 0x3e38 <__stack+0x1c39>
    3e36:	43 c0       	rjmp	.+134    	; 0x3ebe <__stack+0x1cbf>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e38:	fe 01       	movw	r30, r28
    3e3a:	e3 59       	subi	r30, 0x93	; 147
    3e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3e:	60 81       	ld	r22, Z
    3e40:	71 81       	ldd	r23, Z+1	; 0x01
    3e42:	82 81       	ldd	r24, Z+2	; 0x02
    3e44:	93 81       	ldd	r25, Z+3	; 0x03
    3e46:	20 e0       	ldi	r18, 0x00	; 0
    3e48:	30 e0       	ldi	r19, 0x00	; 0
    3e4a:	40 e2       	ldi	r20, 0x20	; 32
    3e4c:	51 e4       	ldi	r21, 0x41	; 65
    3e4e:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    3e52:	dc 01       	movw	r26, r24
    3e54:	cb 01       	movw	r24, r22
    3e56:	8e 01       	movw	r16, r28
    3e58:	09 59       	subi	r16, 0x99	; 153
    3e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e5c:	bc 01       	movw	r22, r24
    3e5e:	cd 01       	movw	r24, r26
    3e60:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    3e64:	dc 01       	movw	r26, r24
    3e66:	cb 01       	movw	r24, r22
    3e68:	f8 01       	movw	r30, r16
    3e6a:	91 83       	std	Z+1, r25	; 0x01
    3e6c:	80 83       	st	Z, r24
    3e6e:	1f c0       	rjmp	.+62     	; 0x3eae <__stack+0x1caf>
    3e70:	fe 01       	movw	r30, r28
    3e72:	eb 59       	subi	r30, 0x9B	; 155
    3e74:	ff 4f       	sbci	r31, 0xFF	; 255
    3e76:	84 e1       	ldi	r24, 0x14	; 20
    3e78:	91 e0       	ldi	r25, 0x01	; 1
    3e7a:	91 83       	std	Z+1, r25	; 0x01
    3e7c:	80 83       	st	Z, r24
    3e7e:	fe 01       	movw	r30, r28
    3e80:	eb 59       	subi	r30, 0x9B	; 155
    3e82:	ff 4f       	sbci	r31, 0xFF	; 255
    3e84:	80 81       	ld	r24, Z
    3e86:	91 81       	ldd	r25, Z+1	; 0x01
    3e88:	01 97       	sbiw	r24, 0x01	; 1
    3e8a:	f1 f7       	brne	.-4      	; 0x3e88 <__stack+0x1c89>
    3e8c:	fe 01       	movw	r30, r28
    3e8e:	eb 59       	subi	r30, 0x9B	; 155
    3e90:	ff 4f       	sbci	r31, 0xFF	; 255
    3e92:	91 83       	std	Z+1, r25	; 0x01
    3e94:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e96:	de 01       	movw	r26, r28
    3e98:	a9 59       	subi	r26, 0x99	; 153
    3e9a:	bf 4f       	sbci	r27, 0xFF	; 255
    3e9c:	fe 01       	movw	r30, r28
    3e9e:	e9 59       	subi	r30, 0x99	; 153
    3ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea2:	80 81       	ld	r24, Z
    3ea4:	91 81       	ldd	r25, Z+1	; 0x01
    3ea6:	01 97       	sbiw	r24, 0x01	; 1
    3ea8:	11 96       	adiw	r26, 0x01	; 1
    3eaa:	9c 93       	st	X, r25
    3eac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3eae:	fe 01       	movw	r30, r28
    3eb0:	e9 59       	subi	r30, 0x99	; 153
    3eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb4:	80 81       	ld	r24, Z
    3eb6:	91 81       	ldd	r25, Z+1	; 0x01
    3eb8:	00 97       	sbiw	r24, 0x00	; 0
    3eba:	d1 f6       	brne	.-76     	; 0x3e70 <__stack+0x1c71>
    3ebc:	27 c0       	rjmp	.+78     	; 0x3f0c <__stack+0x1d0d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ebe:	8e 01       	movw	r16, r28
    3ec0:	09 59       	subi	r16, 0x99	; 153
    3ec2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ec4:	fe 01       	movw	r30, r28
    3ec6:	e7 59       	subi	r30, 0x97	; 151
    3ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eca:	60 81       	ld	r22, Z
    3ecc:	71 81       	ldd	r23, Z+1	; 0x01
    3ece:	82 81       	ldd	r24, Z+2	; 0x02
    3ed0:	93 81       	ldd	r25, Z+3	; 0x03
    3ed2:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    3ed6:	dc 01       	movw	r26, r24
    3ed8:	cb 01       	movw	r24, r22
    3eda:	f8 01       	movw	r30, r16
    3edc:	91 83       	std	Z+1, r25	; 0x01
    3ede:	80 83       	st	Z, r24
    3ee0:	de 01       	movw	r26, r28
    3ee2:	ad 59       	subi	r26, 0x9D	; 157
    3ee4:	bf 4f       	sbci	r27, 0xFF	; 255
    3ee6:	fe 01       	movw	r30, r28
    3ee8:	e9 59       	subi	r30, 0x99	; 153
    3eea:	ff 4f       	sbci	r31, 0xFF	; 255
    3eec:	80 81       	ld	r24, Z
    3eee:	91 81       	ldd	r25, Z+1	; 0x01
    3ef0:	8d 93       	st	X+, r24
    3ef2:	9c 93       	st	X, r25
    3ef4:	fe 01       	movw	r30, r28
    3ef6:	ed 59       	subi	r30, 0x9D	; 157
    3ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    3efa:	80 81       	ld	r24, Z
    3efc:	91 81       	ldd	r25, Z+1	; 0x01
    3efe:	01 97       	sbiw	r24, 0x01	; 1
    3f00:	f1 f7       	brne	.-4      	; 0x3efe <__stack+0x1cff>
    3f02:	fe 01       	movw	r30, r28
    3f04:	ed 59       	subi	r30, 0x9D	; 157
    3f06:	ff 4f       	sbci	r31, 0xFF	; 255
    3f08:	91 83       	std	Z+1, r25	; 0x01
    3f0a:	80 83       	st	Z, r24
				_delay_ms(2000);
				servo_2(65);
    3f0c:	81 e4       	ldi	r24, 0x41	; 65
    3f0e:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <servo_2>
    3f12:	fe 01       	movw	r30, r28
    3f14:	e1 5a       	subi	r30, 0xA1	; 161
    3f16:	ff 4f       	sbci	r31, 0xFF	; 255
    3f18:	80 e0       	ldi	r24, 0x00	; 0
    3f1a:	90 e0       	ldi	r25, 0x00	; 0
    3f1c:	aa ef       	ldi	r26, 0xFA	; 250
    3f1e:	b4 e4       	ldi	r27, 0x44	; 68
    3f20:	80 83       	st	Z, r24
    3f22:	91 83       	std	Z+1, r25	; 0x01
    3f24:	a2 83       	std	Z+2, r26	; 0x02
    3f26:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f28:	8e 01       	movw	r16, r28
    3f2a:	05 5a       	subi	r16, 0xA5	; 165
    3f2c:	1f 4f       	sbci	r17, 0xFF	; 255
    3f2e:	fe 01       	movw	r30, r28
    3f30:	e1 5a       	subi	r30, 0xA1	; 161
    3f32:	ff 4f       	sbci	r31, 0xFF	; 255
    3f34:	60 81       	ld	r22, Z
    3f36:	71 81       	ldd	r23, Z+1	; 0x01
    3f38:	82 81       	ldd	r24, Z+2	; 0x02
    3f3a:	93 81       	ldd	r25, Z+3	; 0x03
    3f3c:	2d ec       	ldi	r18, 0xCD	; 205
    3f3e:	3c ec       	ldi	r19, 0xCC	; 204
    3f40:	4c e2       	ldi	r20, 0x2C	; 44
    3f42:	55 e4       	ldi	r21, 0x45	; 69
    3f44:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    3f48:	dc 01       	movw	r26, r24
    3f4a:	cb 01       	movw	r24, r22
    3f4c:	f8 01       	movw	r30, r16
    3f4e:	80 83       	st	Z, r24
    3f50:	91 83       	std	Z+1, r25	; 0x01
    3f52:	a2 83       	std	Z+2, r26	; 0x02
    3f54:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f56:	fe 01       	movw	r30, r28
    3f58:	e5 5a       	subi	r30, 0xA5	; 165
    3f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5c:	60 81       	ld	r22, Z
    3f5e:	71 81       	ldd	r23, Z+1	; 0x01
    3f60:	82 81       	ldd	r24, Z+2	; 0x02
    3f62:	93 81       	ldd	r25, Z+3	; 0x03
    3f64:	20 e0       	ldi	r18, 0x00	; 0
    3f66:	30 e0       	ldi	r19, 0x00	; 0
    3f68:	40 e8       	ldi	r20, 0x80	; 128
    3f6a:	5f e3       	ldi	r21, 0x3F	; 63
    3f6c:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
    3f70:	88 23       	and	r24, r24
    3f72:	44 f4       	brge	.+16     	; 0x3f84 <__stack+0x1d85>
		__ticks = 1;
    3f74:	fe 01       	movw	r30, r28
    3f76:	e7 5a       	subi	r30, 0xA7	; 167
    3f78:	ff 4f       	sbci	r31, 0xFF	; 255
    3f7a:	81 e0       	ldi	r24, 0x01	; 1
    3f7c:	90 e0       	ldi	r25, 0x00	; 0
    3f7e:	91 83       	std	Z+1, r25	; 0x01
    3f80:	80 83       	st	Z, r24
    3f82:	64 c0       	rjmp	.+200    	; 0x404c <__stack+0x1e4d>
	else if (__tmp > 65535)
    3f84:	fe 01       	movw	r30, r28
    3f86:	e5 5a       	subi	r30, 0xA5	; 165
    3f88:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8a:	60 81       	ld	r22, Z
    3f8c:	71 81       	ldd	r23, Z+1	; 0x01
    3f8e:	82 81       	ldd	r24, Z+2	; 0x02
    3f90:	93 81       	ldd	r25, Z+3	; 0x03
    3f92:	20 e0       	ldi	r18, 0x00	; 0
    3f94:	3f ef       	ldi	r19, 0xFF	; 255
    3f96:	4f e7       	ldi	r20, 0x7F	; 127
    3f98:	57 e4       	ldi	r21, 0x47	; 71
    3f9a:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
    3f9e:	18 16       	cp	r1, r24
    3fa0:	0c f0       	brlt	.+2      	; 0x3fa4 <__stack+0x1da5>
    3fa2:	43 c0       	rjmp	.+134    	; 0x402a <__stack+0x1e2b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fa4:	fe 01       	movw	r30, r28
    3fa6:	e1 5a       	subi	r30, 0xA1	; 161
    3fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    3faa:	60 81       	ld	r22, Z
    3fac:	71 81       	ldd	r23, Z+1	; 0x01
    3fae:	82 81       	ldd	r24, Z+2	; 0x02
    3fb0:	93 81       	ldd	r25, Z+3	; 0x03
    3fb2:	20 e0       	ldi	r18, 0x00	; 0
    3fb4:	30 e0       	ldi	r19, 0x00	; 0
    3fb6:	40 e2       	ldi	r20, 0x20	; 32
    3fb8:	51 e4       	ldi	r21, 0x41	; 65
    3fba:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    3fbe:	dc 01       	movw	r26, r24
    3fc0:	cb 01       	movw	r24, r22
    3fc2:	8e 01       	movw	r16, r28
    3fc4:	07 5a       	subi	r16, 0xA7	; 167
    3fc6:	1f 4f       	sbci	r17, 0xFF	; 255
    3fc8:	bc 01       	movw	r22, r24
    3fca:	cd 01       	movw	r24, r26
    3fcc:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    3fd0:	dc 01       	movw	r26, r24
    3fd2:	cb 01       	movw	r24, r22
    3fd4:	f8 01       	movw	r30, r16
    3fd6:	91 83       	std	Z+1, r25	; 0x01
    3fd8:	80 83       	st	Z, r24
    3fda:	1f c0       	rjmp	.+62     	; 0x401a <__stack+0x1e1b>
    3fdc:	fe 01       	movw	r30, r28
    3fde:	e9 5a       	subi	r30, 0xA9	; 169
    3fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe2:	84 e1       	ldi	r24, 0x14	; 20
    3fe4:	91 e0       	ldi	r25, 0x01	; 1
    3fe6:	91 83       	std	Z+1, r25	; 0x01
    3fe8:	80 83       	st	Z, r24
    3fea:	fe 01       	movw	r30, r28
    3fec:	e9 5a       	subi	r30, 0xA9	; 169
    3fee:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff0:	80 81       	ld	r24, Z
    3ff2:	91 81       	ldd	r25, Z+1	; 0x01
    3ff4:	01 97       	sbiw	r24, 0x01	; 1
    3ff6:	f1 f7       	brne	.-4      	; 0x3ff4 <__stack+0x1df5>
    3ff8:	fe 01       	movw	r30, r28
    3ffa:	e9 5a       	subi	r30, 0xA9	; 169
    3ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ffe:	91 83       	std	Z+1, r25	; 0x01
    4000:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4002:	de 01       	movw	r26, r28
    4004:	a7 5a       	subi	r26, 0xA7	; 167
    4006:	bf 4f       	sbci	r27, 0xFF	; 255
    4008:	fe 01       	movw	r30, r28
    400a:	e7 5a       	subi	r30, 0xA7	; 167
    400c:	ff 4f       	sbci	r31, 0xFF	; 255
    400e:	80 81       	ld	r24, Z
    4010:	91 81       	ldd	r25, Z+1	; 0x01
    4012:	01 97       	sbiw	r24, 0x01	; 1
    4014:	11 96       	adiw	r26, 0x01	; 1
    4016:	9c 93       	st	X, r25
    4018:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    401a:	fe 01       	movw	r30, r28
    401c:	e7 5a       	subi	r30, 0xA7	; 167
    401e:	ff 4f       	sbci	r31, 0xFF	; 255
    4020:	80 81       	ld	r24, Z
    4022:	91 81       	ldd	r25, Z+1	; 0x01
    4024:	00 97       	sbiw	r24, 0x00	; 0
    4026:	d1 f6       	brne	.-76     	; 0x3fdc <__stack+0x1ddd>
    4028:	27 c0       	rjmp	.+78     	; 0x4078 <__stack+0x1e79>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    402a:	8e 01       	movw	r16, r28
    402c:	07 5a       	subi	r16, 0xA7	; 167
    402e:	1f 4f       	sbci	r17, 0xFF	; 255
    4030:	fe 01       	movw	r30, r28
    4032:	e5 5a       	subi	r30, 0xA5	; 165
    4034:	ff 4f       	sbci	r31, 0xFF	; 255
    4036:	60 81       	ld	r22, Z
    4038:	71 81       	ldd	r23, Z+1	; 0x01
    403a:	82 81       	ldd	r24, Z+2	; 0x02
    403c:	93 81       	ldd	r25, Z+3	; 0x03
    403e:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    4042:	dc 01       	movw	r26, r24
    4044:	cb 01       	movw	r24, r22
    4046:	f8 01       	movw	r30, r16
    4048:	91 83       	std	Z+1, r25	; 0x01
    404a:	80 83       	st	Z, r24
    404c:	de 01       	movw	r26, r28
    404e:	ab 5a       	subi	r26, 0xAB	; 171
    4050:	bf 4f       	sbci	r27, 0xFF	; 255
    4052:	fe 01       	movw	r30, r28
    4054:	e7 5a       	subi	r30, 0xA7	; 167
    4056:	ff 4f       	sbci	r31, 0xFF	; 255
    4058:	80 81       	ld	r24, Z
    405a:	91 81       	ldd	r25, Z+1	; 0x01
    405c:	8d 93       	st	X+, r24
    405e:	9c 93       	st	X, r25
    4060:	fe 01       	movw	r30, r28
    4062:	eb 5a       	subi	r30, 0xAB	; 171
    4064:	ff 4f       	sbci	r31, 0xFF	; 255
    4066:	80 81       	ld	r24, Z
    4068:	91 81       	ldd	r25, Z+1	; 0x01
    406a:	01 97       	sbiw	r24, 0x01	; 1
    406c:	f1 f7       	brne	.-4      	; 0x406a <__stack+0x1e6b>
    406e:	fe 01       	movw	r30, r28
    4070:	eb 5a       	subi	r30, 0xAB	; 171
    4072:	ff 4f       	sbci	r31, 0xFF	; 255
    4074:	91 83       	std	Z+1, r25	; 0x01
    4076:	80 83       	st	Z, r24
				_delay_ms(2000);
				servo_3(130);//// logic to sort the object still to be included to left
    4078:	82 e8       	ldi	r24, 0x82	; 130
    407a:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <servo_3>
    407e:	fe 01       	movw	r30, r28
    4080:	ef 5a       	subi	r30, 0xAF	; 175
    4082:	ff 4f       	sbci	r31, 0xFF	; 255
    4084:	80 e0       	ldi	r24, 0x00	; 0
    4086:	90 e0       	ldi	r25, 0x00	; 0
    4088:	aa ef       	ldi	r26, 0xFA	; 250
    408a:	b4 e4       	ldi	r27, 0x44	; 68
    408c:	80 83       	st	Z, r24
    408e:	91 83       	std	Z+1, r25	; 0x01
    4090:	a2 83       	std	Z+2, r26	; 0x02
    4092:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4094:	8e 01       	movw	r16, r28
    4096:	03 5b       	subi	r16, 0xB3	; 179
    4098:	1f 4f       	sbci	r17, 0xFF	; 255
    409a:	fe 01       	movw	r30, r28
    409c:	ef 5a       	subi	r30, 0xAF	; 175
    409e:	ff 4f       	sbci	r31, 0xFF	; 255
    40a0:	60 81       	ld	r22, Z
    40a2:	71 81       	ldd	r23, Z+1	; 0x01
    40a4:	82 81       	ldd	r24, Z+2	; 0x02
    40a6:	93 81       	ldd	r25, Z+3	; 0x03
    40a8:	2d ec       	ldi	r18, 0xCD	; 205
    40aa:	3c ec       	ldi	r19, 0xCC	; 204
    40ac:	4c e2       	ldi	r20, 0x2C	; 44
    40ae:	55 e4       	ldi	r21, 0x45	; 69
    40b0:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    40b4:	dc 01       	movw	r26, r24
    40b6:	cb 01       	movw	r24, r22
    40b8:	f8 01       	movw	r30, r16
    40ba:	80 83       	st	Z, r24
    40bc:	91 83       	std	Z+1, r25	; 0x01
    40be:	a2 83       	std	Z+2, r26	; 0x02
    40c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    40c2:	fe 01       	movw	r30, r28
    40c4:	e3 5b       	subi	r30, 0xB3	; 179
    40c6:	ff 4f       	sbci	r31, 0xFF	; 255
    40c8:	60 81       	ld	r22, Z
    40ca:	71 81       	ldd	r23, Z+1	; 0x01
    40cc:	82 81       	ldd	r24, Z+2	; 0x02
    40ce:	93 81       	ldd	r25, Z+3	; 0x03
    40d0:	20 e0       	ldi	r18, 0x00	; 0
    40d2:	30 e0       	ldi	r19, 0x00	; 0
    40d4:	40 e8       	ldi	r20, 0x80	; 128
    40d6:	5f e3       	ldi	r21, 0x3F	; 63
    40d8:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
    40dc:	88 23       	and	r24, r24
    40de:	44 f4       	brge	.+16     	; 0x40f0 <__stack+0x1ef1>
		__ticks = 1;
    40e0:	fe 01       	movw	r30, r28
    40e2:	e5 5b       	subi	r30, 0xB5	; 181
    40e4:	ff 4f       	sbci	r31, 0xFF	; 255
    40e6:	81 e0       	ldi	r24, 0x01	; 1
    40e8:	90 e0       	ldi	r25, 0x00	; 0
    40ea:	91 83       	std	Z+1, r25	; 0x01
    40ec:	80 83       	st	Z, r24
    40ee:	64 c0       	rjmp	.+200    	; 0x41b8 <__stack+0x1fb9>
	else if (__tmp > 65535)
    40f0:	fe 01       	movw	r30, r28
    40f2:	e3 5b       	subi	r30, 0xB3	; 179
    40f4:	ff 4f       	sbci	r31, 0xFF	; 255
    40f6:	60 81       	ld	r22, Z
    40f8:	71 81       	ldd	r23, Z+1	; 0x01
    40fa:	82 81       	ldd	r24, Z+2	; 0x02
    40fc:	93 81       	ldd	r25, Z+3	; 0x03
    40fe:	20 e0       	ldi	r18, 0x00	; 0
    4100:	3f ef       	ldi	r19, 0xFF	; 255
    4102:	4f e7       	ldi	r20, 0x7F	; 127
    4104:	57 e4       	ldi	r21, 0x47	; 71
    4106:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
    410a:	18 16       	cp	r1, r24
    410c:	0c f0       	brlt	.+2      	; 0x4110 <__stack+0x1f11>
    410e:	43 c0       	rjmp	.+134    	; 0x4196 <__stack+0x1f97>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4110:	fe 01       	movw	r30, r28
    4112:	ef 5a       	subi	r30, 0xAF	; 175
    4114:	ff 4f       	sbci	r31, 0xFF	; 255
    4116:	60 81       	ld	r22, Z
    4118:	71 81       	ldd	r23, Z+1	; 0x01
    411a:	82 81       	ldd	r24, Z+2	; 0x02
    411c:	93 81       	ldd	r25, Z+3	; 0x03
    411e:	20 e0       	ldi	r18, 0x00	; 0
    4120:	30 e0       	ldi	r19, 0x00	; 0
    4122:	40 e2       	ldi	r20, 0x20	; 32
    4124:	51 e4       	ldi	r21, 0x41	; 65
    4126:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    412a:	dc 01       	movw	r26, r24
    412c:	cb 01       	movw	r24, r22
    412e:	8e 01       	movw	r16, r28
    4130:	05 5b       	subi	r16, 0xB5	; 181
    4132:	1f 4f       	sbci	r17, 0xFF	; 255
    4134:	bc 01       	movw	r22, r24
    4136:	cd 01       	movw	r24, r26
    4138:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    413c:	dc 01       	movw	r26, r24
    413e:	cb 01       	movw	r24, r22
    4140:	f8 01       	movw	r30, r16
    4142:	91 83       	std	Z+1, r25	; 0x01
    4144:	80 83       	st	Z, r24
    4146:	1f c0       	rjmp	.+62     	; 0x4186 <__stack+0x1f87>
    4148:	fe 01       	movw	r30, r28
    414a:	e7 5b       	subi	r30, 0xB7	; 183
    414c:	ff 4f       	sbci	r31, 0xFF	; 255
    414e:	84 e1       	ldi	r24, 0x14	; 20
    4150:	91 e0       	ldi	r25, 0x01	; 1
    4152:	91 83       	std	Z+1, r25	; 0x01
    4154:	80 83       	st	Z, r24
    4156:	fe 01       	movw	r30, r28
    4158:	e7 5b       	subi	r30, 0xB7	; 183
    415a:	ff 4f       	sbci	r31, 0xFF	; 255
    415c:	80 81       	ld	r24, Z
    415e:	91 81       	ldd	r25, Z+1	; 0x01
    4160:	01 97       	sbiw	r24, 0x01	; 1
    4162:	f1 f7       	brne	.-4      	; 0x4160 <__stack+0x1f61>
    4164:	fe 01       	movw	r30, r28
    4166:	e7 5b       	subi	r30, 0xB7	; 183
    4168:	ff 4f       	sbci	r31, 0xFF	; 255
    416a:	91 83       	std	Z+1, r25	; 0x01
    416c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    416e:	de 01       	movw	r26, r28
    4170:	a5 5b       	subi	r26, 0xB5	; 181
    4172:	bf 4f       	sbci	r27, 0xFF	; 255
    4174:	fe 01       	movw	r30, r28
    4176:	e5 5b       	subi	r30, 0xB5	; 181
    4178:	ff 4f       	sbci	r31, 0xFF	; 255
    417a:	80 81       	ld	r24, Z
    417c:	91 81       	ldd	r25, Z+1	; 0x01
    417e:	01 97       	sbiw	r24, 0x01	; 1
    4180:	11 96       	adiw	r26, 0x01	; 1
    4182:	9c 93       	st	X, r25
    4184:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4186:	fe 01       	movw	r30, r28
    4188:	e5 5b       	subi	r30, 0xB5	; 181
    418a:	ff 4f       	sbci	r31, 0xFF	; 255
    418c:	80 81       	ld	r24, Z
    418e:	91 81       	ldd	r25, Z+1	; 0x01
    4190:	00 97       	sbiw	r24, 0x00	; 0
    4192:	d1 f6       	brne	.-76     	; 0x4148 <__stack+0x1f49>
    4194:	27 c0       	rjmp	.+78     	; 0x41e4 <__stack+0x1fe5>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4196:	8e 01       	movw	r16, r28
    4198:	05 5b       	subi	r16, 0xB5	; 181
    419a:	1f 4f       	sbci	r17, 0xFF	; 255
    419c:	fe 01       	movw	r30, r28
    419e:	e3 5b       	subi	r30, 0xB3	; 179
    41a0:	ff 4f       	sbci	r31, 0xFF	; 255
    41a2:	60 81       	ld	r22, Z
    41a4:	71 81       	ldd	r23, Z+1	; 0x01
    41a6:	82 81       	ldd	r24, Z+2	; 0x02
    41a8:	93 81       	ldd	r25, Z+3	; 0x03
    41aa:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    41ae:	dc 01       	movw	r26, r24
    41b0:	cb 01       	movw	r24, r22
    41b2:	f8 01       	movw	r30, r16
    41b4:	91 83       	std	Z+1, r25	; 0x01
    41b6:	80 83       	st	Z, r24
    41b8:	de 01       	movw	r26, r28
    41ba:	a9 5b       	subi	r26, 0xB9	; 185
    41bc:	bf 4f       	sbci	r27, 0xFF	; 255
    41be:	fe 01       	movw	r30, r28
    41c0:	e5 5b       	subi	r30, 0xB5	; 181
    41c2:	ff 4f       	sbci	r31, 0xFF	; 255
    41c4:	80 81       	ld	r24, Z
    41c6:	91 81       	ldd	r25, Z+1	; 0x01
    41c8:	8d 93       	st	X+, r24
    41ca:	9c 93       	st	X, r25
    41cc:	fe 01       	movw	r30, r28
    41ce:	e9 5b       	subi	r30, 0xB9	; 185
    41d0:	ff 4f       	sbci	r31, 0xFF	; 255
    41d2:	80 81       	ld	r24, Z
    41d4:	91 81       	ldd	r25, Z+1	; 0x01
    41d6:	01 97       	sbiw	r24, 0x01	; 1
    41d8:	f1 f7       	brne	.-4      	; 0x41d6 <__stack+0x1fd7>
    41da:	fe 01       	movw	r30, r28
    41dc:	e9 5b       	subi	r30, 0xB9	; 185
    41de:	ff 4f       	sbci	r31, 0xFF	; 255
    41e0:	91 83       	std	Z+1, r25	; 0x01
    41e2:	80 83       	st	Z, r24
				_delay_ms(2000);
				servo_1(180);
    41e4:	84 eb       	ldi	r24, 0xB4	; 180
    41e6:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <servo_1>
    41ea:	fe 01       	movw	r30, r28
    41ec:	ed 5b       	subi	r30, 0xBD	; 189
    41ee:	ff 4f       	sbci	r31, 0xFF	; 255
    41f0:	80 e0       	ldi	r24, 0x00	; 0
    41f2:	90 e0       	ldi	r25, 0x00	; 0
    41f4:	aa ef       	ldi	r26, 0xFA	; 250
    41f6:	b4 e4       	ldi	r27, 0x44	; 68
    41f8:	80 83       	st	Z, r24
    41fa:	91 83       	std	Z+1, r25	; 0x01
    41fc:	a2 83       	std	Z+2, r26	; 0x02
    41fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4200:	8e 01       	movw	r16, r28
    4202:	01 5c       	subi	r16, 0xC1	; 193
    4204:	1f 4f       	sbci	r17, 0xFF	; 255
    4206:	fe 01       	movw	r30, r28
    4208:	ed 5b       	subi	r30, 0xBD	; 189
    420a:	ff 4f       	sbci	r31, 0xFF	; 255
    420c:	60 81       	ld	r22, Z
    420e:	71 81       	ldd	r23, Z+1	; 0x01
    4210:	82 81       	ldd	r24, Z+2	; 0x02
    4212:	93 81       	ldd	r25, Z+3	; 0x03
    4214:	2d ec       	ldi	r18, 0xCD	; 205
    4216:	3c ec       	ldi	r19, 0xCC	; 204
    4218:	4c e2       	ldi	r20, 0x2C	; 44
    421a:	55 e4       	ldi	r21, 0x45	; 69
    421c:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    4220:	dc 01       	movw	r26, r24
    4222:	cb 01       	movw	r24, r22
    4224:	f8 01       	movw	r30, r16
    4226:	80 83       	st	Z, r24
    4228:	91 83       	std	Z+1, r25	; 0x01
    422a:	a2 83       	std	Z+2, r26	; 0x02
    422c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    422e:	fe 01       	movw	r30, r28
    4230:	ff 96       	adiw	r30, 0x3f	; 63
    4232:	60 81       	ld	r22, Z
    4234:	71 81       	ldd	r23, Z+1	; 0x01
    4236:	82 81       	ldd	r24, Z+2	; 0x02
    4238:	93 81       	ldd	r25, Z+3	; 0x03
    423a:	20 e0       	ldi	r18, 0x00	; 0
    423c:	30 e0       	ldi	r19, 0x00	; 0
    423e:	40 e8       	ldi	r20, 0x80	; 128
    4240:	5f e3       	ldi	r21, 0x3F	; 63
    4242:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
    4246:	88 23       	and	r24, r24
    4248:	2c f4       	brge	.+10     	; 0x4254 <__stack+0x2055>
		__ticks = 1;
    424a:	81 e0       	ldi	r24, 0x01	; 1
    424c:	90 e0       	ldi	r25, 0x00	; 0
    424e:	9e af       	std	Y+62, r25	; 0x3e
    4250:	8d af       	std	Y+61, r24	; 0x3d
    4252:	46 c0       	rjmp	.+140    	; 0x42e0 <__stack+0x20e1>
	else if (__tmp > 65535)
    4254:	fe 01       	movw	r30, r28
    4256:	ff 96       	adiw	r30, 0x3f	; 63
    4258:	60 81       	ld	r22, Z
    425a:	71 81       	ldd	r23, Z+1	; 0x01
    425c:	82 81       	ldd	r24, Z+2	; 0x02
    425e:	93 81       	ldd	r25, Z+3	; 0x03
    4260:	20 e0       	ldi	r18, 0x00	; 0
    4262:	3f ef       	ldi	r19, 0xFF	; 255
    4264:	4f e7       	ldi	r20, 0x7F	; 127
    4266:	57 e4       	ldi	r21, 0x47	; 71
    4268:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
    426c:	18 16       	cp	r1, r24
    426e:	64 f5       	brge	.+88     	; 0x42c8 <__stack+0x20c9>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4270:	fe 01       	movw	r30, r28
    4272:	ed 5b       	subi	r30, 0xBD	; 189
    4274:	ff 4f       	sbci	r31, 0xFF	; 255
    4276:	60 81       	ld	r22, Z
    4278:	71 81       	ldd	r23, Z+1	; 0x01
    427a:	82 81       	ldd	r24, Z+2	; 0x02
    427c:	93 81       	ldd	r25, Z+3	; 0x03
    427e:	20 e0       	ldi	r18, 0x00	; 0
    4280:	30 e0       	ldi	r19, 0x00	; 0
    4282:	40 e2       	ldi	r20, 0x20	; 32
    4284:	51 e4       	ldi	r21, 0x41	; 65
    4286:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    428a:	dc 01       	movw	r26, r24
    428c:	cb 01       	movw	r24, r22
    428e:	bc 01       	movw	r22, r24
    4290:	cd 01       	movw	r24, r26
    4292:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    4296:	dc 01       	movw	r26, r24
    4298:	cb 01       	movw	r24, r22
    429a:	9e af       	std	Y+62, r25	; 0x3e
    429c:	8d af       	std	Y+61, r24	; 0x3d
    429e:	0f c0       	rjmp	.+30     	; 0x42be <__stack+0x20bf>
    42a0:	84 e1       	ldi	r24, 0x14	; 20
    42a2:	91 e0       	ldi	r25, 0x01	; 1
    42a4:	9c af       	std	Y+60, r25	; 0x3c
    42a6:	8b af       	std	Y+59, r24	; 0x3b
    42a8:	8b ad       	ldd	r24, Y+59	; 0x3b
    42aa:	9c ad       	ldd	r25, Y+60	; 0x3c
    42ac:	01 97       	sbiw	r24, 0x01	; 1
    42ae:	f1 f7       	brne	.-4      	; 0x42ac <__stack+0x20ad>
    42b0:	9c af       	std	Y+60, r25	; 0x3c
    42b2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42b4:	8d ad       	ldd	r24, Y+61	; 0x3d
    42b6:	9e ad       	ldd	r25, Y+62	; 0x3e
    42b8:	01 97       	sbiw	r24, 0x01	; 1
    42ba:	9e af       	std	Y+62, r25	; 0x3e
    42bc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42be:	8d ad       	ldd	r24, Y+61	; 0x3d
    42c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    42c2:	00 97       	sbiw	r24, 0x00	; 0
    42c4:	69 f7       	brne	.-38     	; 0x42a0 <__stack+0x20a1>
    42c6:	16 c0       	rjmp	.+44     	; 0x42f4 <__stack+0x20f5>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42c8:	fe 01       	movw	r30, r28
    42ca:	ff 96       	adiw	r30, 0x3f	; 63
    42cc:	60 81       	ld	r22, Z
    42ce:	71 81       	ldd	r23, Z+1	; 0x01
    42d0:	82 81       	ldd	r24, Z+2	; 0x02
    42d2:	93 81       	ldd	r25, Z+3	; 0x03
    42d4:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    42d8:	dc 01       	movw	r26, r24
    42da:	cb 01       	movw	r24, r22
    42dc:	9e af       	std	Y+62, r25	; 0x3e
    42de:	8d af       	std	Y+61, r24	; 0x3d
    42e0:	8d ad       	ldd	r24, Y+61	; 0x3d
    42e2:	9e ad       	ldd	r25, Y+62	; 0x3e
    42e4:	9a af       	std	Y+58, r25	; 0x3a
    42e6:	89 af       	std	Y+57, r24	; 0x39
    42e8:	89 ad       	ldd	r24, Y+57	; 0x39
    42ea:	9a ad       	ldd	r25, Y+58	; 0x3a
    42ec:	01 97       	sbiw	r24, 0x01	; 1
    42ee:	f1 f7       	brne	.-4      	; 0x42ec <__stack+0x20ed>
    42f0:	9a af       	std	Y+58, r25	; 0x3a
    42f2:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(2000);
				servo_3(85);
    42f4:	85 e5       	ldi	r24, 0x55	; 85
    42f6:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <servo_3>
    42fa:	80 e0       	ldi	r24, 0x00	; 0
    42fc:	90 e0       	ldi	r25, 0x00	; 0
    42fe:	aa ef       	ldi	r26, 0xFA	; 250
    4300:	b4 e4       	ldi	r27, 0x44	; 68
    4302:	8d ab       	std	Y+53, r24	; 0x35
    4304:	9e ab       	std	Y+54, r25	; 0x36
    4306:	af ab       	std	Y+55, r26	; 0x37
    4308:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    430a:	6d a9       	ldd	r22, Y+53	; 0x35
    430c:	7e a9       	ldd	r23, Y+54	; 0x36
    430e:	8f a9       	ldd	r24, Y+55	; 0x37
    4310:	98 ad       	ldd	r25, Y+56	; 0x38
    4312:	2d ec       	ldi	r18, 0xCD	; 205
    4314:	3c ec       	ldi	r19, 0xCC	; 204
    4316:	4c e2       	ldi	r20, 0x2C	; 44
    4318:	55 e4       	ldi	r21, 0x45	; 69
    431a:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    431e:	dc 01       	movw	r26, r24
    4320:	cb 01       	movw	r24, r22
    4322:	89 ab       	std	Y+49, r24	; 0x31
    4324:	9a ab       	std	Y+50, r25	; 0x32
    4326:	ab ab       	std	Y+51, r26	; 0x33
    4328:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    432a:	69 a9       	ldd	r22, Y+49	; 0x31
    432c:	7a a9       	ldd	r23, Y+50	; 0x32
    432e:	8b a9       	ldd	r24, Y+51	; 0x33
    4330:	9c a9       	ldd	r25, Y+52	; 0x34
    4332:	20 e0       	ldi	r18, 0x00	; 0
    4334:	30 e0       	ldi	r19, 0x00	; 0
    4336:	40 e8       	ldi	r20, 0x80	; 128
    4338:	5f e3       	ldi	r21, 0x3F	; 63
    433a:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
    433e:	88 23       	and	r24, r24
    4340:	2c f4       	brge	.+10     	; 0x434c <__stack+0x214d>
		__ticks = 1;
    4342:	81 e0       	ldi	r24, 0x01	; 1
    4344:	90 e0       	ldi	r25, 0x00	; 0
    4346:	98 ab       	std	Y+48, r25	; 0x30
    4348:	8f a7       	std	Y+47, r24	; 0x2f
    434a:	3f c0       	rjmp	.+126    	; 0x43ca <__stack+0x21cb>
	else if (__tmp > 65535)
    434c:	69 a9       	ldd	r22, Y+49	; 0x31
    434e:	7a a9       	ldd	r23, Y+50	; 0x32
    4350:	8b a9       	ldd	r24, Y+51	; 0x33
    4352:	9c a9       	ldd	r25, Y+52	; 0x34
    4354:	20 e0       	ldi	r18, 0x00	; 0
    4356:	3f ef       	ldi	r19, 0xFF	; 255
    4358:	4f e7       	ldi	r20, 0x7F	; 127
    435a:	57 e4       	ldi	r21, 0x47	; 71
    435c:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
    4360:	18 16       	cp	r1, r24
    4362:	4c f5       	brge	.+82     	; 0x43b6 <__stack+0x21b7>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4364:	6d a9       	ldd	r22, Y+53	; 0x35
    4366:	7e a9       	ldd	r23, Y+54	; 0x36
    4368:	8f a9       	ldd	r24, Y+55	; 0x37
    436a:	98 ad       	ldd	r25, Y+56	; 0x38
    436c:	20 e0       	ldi	r18, 0x00	; 0
    436e:	30 e0       	ldi	r19, 0x00	; 0
    4370:	40 e2       	ldi	r20, 0x20	; 32
    4372:	51 e4       	ldi	r21, 0x41	; 65
    4374:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    4378:	dc 01       	movw	r26, r24
    437a:	cb 01       	movw	r24, r22
    437c:	bc 01       	movw	r22, r24
    437e:	cd 01       	movw	r24, r26
    4380:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    4384:	dc 01       	movw	r26, r24
    4386:	cb 01       	movw	r24, r22
    4388:	98 ab       	std	Y+48, r25	; 0x30
    438a:	8f a7       	std	Y+47, r24	; 0x2f
    438c:	0f c0       	rjmp	.+30     	; 0x43ac <__stack+0x21ad>
    438e:	84 e1       	ldi	r24, 0x14	; 20
    4390:	91 e0       	ldi	r25, 0x01	; 1
    4392:	9e a7       	std	Y+46, r25	; 0x2e
    4394:	8d a7       	std	Y+45, r24	; 0x2d
    4396:	8d a5       	ldd	r24, Y+45	; 0x2d
    4398:	9e a5       	ldd	r25, Y+46	; 0x2e
    439a:	01 97       	sbiw	r24, 0x01	; 1
    439c:	f1 f7       	brne	.-4      	; 0x439a <__stack+0x219b>
    439e:	9e a7       	std	Y+46, r25	; 0x2e
    43a0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    43a4:	98 a9       	ldd	r25, Y+48	; 0x30
    43a6:	01 97       	sbiw	r24, 0x01	; 1
    43a8:	98 ab       	std	Y+48, r25	; 0x30
    43aa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    43ae:	98 a9       	ldd	r25, Y+48	; 0x30
    43b0:	00 97       	sbiw	r24, 0x00	; 0
    43b2:	69 f7       	brne	.-38     	; 0x438e <__stack+0x218f>
    43b4:	14 c0       	rjmp	.+40     	; 0x43de <__stack+0x21df>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43b6:	69 a9       	ldd	r22, Y+49	; 0x31
    43b8:	7a a9       	ldd	r23, Y+50	; 0x32
    43ba:	8b a9       	ldd	r24, Y+51	; 0x33
    43bc:	9c a9       	ldd	r25, Y+52	; 0x34
    43be:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    43c2:	dc 01       	movw	r26, r24
    43c4:	cb 01       	movw	r24, r22
    43c6:	98 ab       	std	Y+48, r25	; 0x30
    43c8:	8f a7       	std	Y+47, r24	; 0x2f
    43ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    43cc:	98 a9       	ldd	r25, Y+48	; 0x30
    43ce:	9c a7       	std	Y+44, r25	; 0x2c
    43d0:	8b a7       	std	Y+43, r24	; 0x2b
    43d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    43d4:	9c a5       	ldd	r25, Y+44	; 0x2c
    43d6:	01 97       	sbiw	r24, 0x01	; 1
    43d8:	f1 f7       	brne	.-4      	; 0x43d6 <__stack+0x21d7>
    43da:	9c a7       	std	Y+44, r25	; 0x2c
    43dc:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(2000);

				REVERSE();
    43de:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <REVERSE>
				LINEAR_DISTANCE(rev_dis);
    43e2:	80 91 25 03 	lds	r24, 0x0325
    43e6:	90 91 26 03 	lds	r25, 0x0326
    43ea:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LINEAR_DISTANCE>
				STOP();
    43ee:	0e 94 31 0c 	call	0x1862	; 0x1862 <STOP>
    43f2:	97 c0       	rjmp	.+302    	; 0x4522 <__stack+0x2323>
		LINEAR_DISTANCE(50);
		STOP();*/

	while(r_count!=0)
		{
		REVERSE();
    43f4:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <REVERSE>
		r_count--;
    43f8:	80 91 0e 03 	lds	r24, 0x030E
    43fc:	90 91 0f 03 	lds	r25, 0x030F
    4400:	01 97       	sbiw	r24, 0x01	; 1
    4402:	90 93 0f 03 	sts	0x030F, r25
    4406:	80 93 0e 03 	sts	0x030E, r24
    440a:	80 e0       	ldi	r24, 0x00	; 0
    440c:	90 e0       	ldi	r25, 0x00	; 0
    440e:	a8 e4       	ldi	r26, 0x48	; 72
    4410:	b2 e4       	ldi	r27, 0x42	; 66
    4412:	8f a3       	std	Y+39, r24	; 0x27
    4414:	98 a7       	std	Y+40, r25	; 0x28
    4416:	a9 a7       	std	Y+41, r26	; 0x29
    4418:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    441a:	6f a1       	ldd	r22, Y+39	; 0x27
    441c:	78 a5       	ldd	r23, Y+40	; 0x28
    441e:	89 a5       	ldd	r24, Y+41	; 0x29
    4420:	9a a5       	ldd	r25, Y+42	; 0x2a
    4422:	2d ec       	ldi	r18, 0xCD	; 205
    4424:	3c ec       	ldi	r19, 0xCC	; 204
    4426:	4c e2       	ldi	r20, 0x2C	; 44
    4428:	55 e4       	ldi	r21, 0x45	; 69
    442a:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    442e:	dc 01       	movw	r26, r24
    4430:	cb 01       	movw	r24, r22
    4432:	8b a3       	std	Y+35, r24	; 0x23
    4434:	9c a3       	std	Y+36, r25	; 0x24
    4436:	ad a3       	std	Y+37, r26	; 0x25
    4438:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    443a:	6b a1       	ldd	r22, Y+35	; 0x23
    443c:	7c a1       	ldd	r23, Y+36	; 0x24
    443e:	8d a1       	ldd	r24, Y+37	; 0x25
    4440:	9e a1       	ldd	r25, Y+38	; 0x26
    4442:	20 e0       	ldi	r18, 0x00	; 0
    4444:	30 e0       	ldi	r19, 0x00	; 0
    4446:	40 e8       	ldi	r20, 0x80	; 128
    4448:	5f e3       	ldi	r21, 0x3F	; 63
    444a:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
    444e:	88 23       	and	r24, r24
    4450:	2c f4       	brge	.+10     	; 0x445c <__stack+0x225d>
		__ticks = 1;
    4452:	81 e0       	ldi	r24, 0x01	; 1
    4454:	90 e0       	ldi	r25, 0x00	; 0
    4456:	9a a3       	std	Y+34, r25	; 0x22
    4458:	89 a3       	std	Y+33, r24	; 0x21
    445a:	3f c0       	rjmp	.+126    	; 0x44da <__stack+0x22db>
	else if (__tmp > 65535)
    445c:	6b a1       	ldd	r22, Y+35	; 0x23
    445e:	7c a1       	ldd	r23, Y+36	; 0x24
    4460:	8d a1       	ldd	r24, Y+37	; 0x25
    4462:	9e a1       	ldd	r25, Y+38	; 0x26
    4464:	20 e0       	ldi	r18, 0x00	; 0
    4466:	3f ef       	ldi	r19, 0xFF	; 255
    4468:	4f e7       	ldi	r20, 0x7F	; 127
    446a:	57 e4       	ldi	r21, 0x47	; 71
    446c:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
    4470:	18 16       	cp	r1, r24
    4472:	4c f5       	brge	.+82     	; 0x44c6 <__stack+0x22c7>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4474:	6f a1       	ldd	r22, Y+39	; 0x27
    4476:	78 a5       	ldd	r23, Y+40	; 0x28
    4478:	89 a5       	ldd	r24, Y+41	; 0x29
    447a:	9a a5       	ldd	r25, Y+42	; 0x2a
    447c:	20 e0       	ldi	r18, 0x00	; 0
    447e:	30 e0       	ldi	r19, 0x00	; 0
    4480:	40 e2       	ldi	r20, 0x20	; 32
    4482:	51 e4       	ldi	r21, 0x41	; 65
    4484:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    4488:	dc 01       	movw	r26, r24
    448a:	cb 01       	movw	r24, r22
    448c:	bc 01       	movw	r22, r24
    448e:	cd 01       	movw	r24, r26
    4490:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    4494:	dc 01       	movw	r26, r24
    4496:	cb 01       	movw	r24, r22
    4498:	9a a3       	std	Y+34, r25	; 0x22
    449a:	89 a3       	std	Y+33, r24	; 0x21
    449c:	0f c0       	rjmp	.+30     	; 0x44bc <__stack+0x22bd>
    449e:	84 e1       	ldi	r24, 0x14	; 20
    44a0:	91 e0       	ldi	r25, 0x01	; 1
    44a2:	98 a3       	std	Y+32, r25	; 0x20
    44a4:	8f 8f       	std	Y+31, r24	; 0x1f
    44a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    44a8:	98 a1       	ldd	r25, Y+32	; 0x20
    44aa:	01 97       	sbiw	r24, 0x01	; 1
    44ac:	f1 f7       	brne	.-4      	; 0x44aa <__stack+0x22ab>
    44ae:	98 a3       	std	Y+32, r25	; 0x20
    44b0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44b2:	89 a1       	ldd	r24, Y+33	; 0x21
    44b4:	9a a1       	ldd	r25, Y+34	; 0x22
    44b6:	01 97       	sbiw	r24, 0x01	; 1
    44b8:	9a a3       	std	Y+34, r25	; 0x22
    44ba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44bc:	89 a1       	ldd	r24, Y+33	; 0x21
    44be:	9a a1       	ldd	r25, Y+34	; 0x22
    44c0:	00 97       	sbiw	r24, 0x00	; 0
    44c2:	69 f7       	brne	.-38     	; 0x449e <__stack+0x229f>
    44c4:	14 c0       	rjmp	.+40     	; 0x44ee <__stack+0x22ef>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44c6:	6b a1       	ldd	r22, Y+35	; 0x23
    44c8:	7c a1       	ldd	r23, Y+36	; 0x24
    44ca:	8d a1       	ldd	r24, Y+37	; 0x25
    44cc:	9e a1       	ldd	r25, Y+38	; 0x26
    44ce:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    44d2:	dc 01       	movw	r26, r24
    44d4:	cb 01       	movw	r24, r22
    44d6:	9a a3       	std	Y+34, r25	; 0x22
    44d8:	89 a3       	std	Y+33, r24	; 0x21
    44da:	89 a1       	ldd	r24, Y+33	; 0x21
    44dc:	9a a1       	ldd	r25, Y+34	; 0x22
    44de:	9e 8f       	std	Y+30, r25	; 0x1e
    44e0:	8d 8f       	std	Y+29, r24	; 0x1d
    44e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    44e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    44e6:	01 97       	sbiw	r24, 0x01	; 1
    44e8:	f1 f7       	brne	.-4      	; 0x44e6 <__stack+0x22e7>
    44ea:	9e 8f       	std	Y+30, r25	; 0x1e
    44ec:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		STOP();
    44ee:	0e 94 31 0c 	call	0x1862	; 0x1862 <STOP>
		sharp_center = ADC_Conversion(11);
    44f2:	8b e0       	ldi	r24, 0x0B	; 11
    44f4:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    44f8:	80 93 19 03 	sts	0x0319, r24
		value_center = Sharp_GP2D12_estimation(sharp_center); // MANditory but added just to provede same time lag
    44fc:	80 91 19 03 	lds	r24, 0x0319
    4500:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Sharp_GP2D12_estimation>
    4504:	90 93 2a 03 	sts	0x032A, r25
    4508:	80 93 29 03 	sts	0x0329, r24
		lcd_print(1,7,value_center,3);
    450c:	20 91 29 03 	lds	r18, 0x0329
    4510:	30 91 2a 03 	lds	r19, 0x032A
    4514:	81 e0       	ldi	r24, 0x01	; 1
    4516:	67 e0       	ldi	r22, 0x07	; 7
    4518:	a9 01       	movw	r20, r18
    451a:	23 e0       	ldi	r18, 0x03	; 3
    451c:	30 e0       	ldi	r19, 0x00	; 0
    451e:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
/*
			REVERSE();
		LINEAR_DISTANCE(50);
		STOP();*/

	while(r_count!=0)
    4522:	80 91 0e 03 	lds	r24, 0x030E
    4526:	90 91 0f 03 	lds	r25, 0x030F
    452a:	00 97       	sbiw	r24, 0x00	; 0
    452c:	09 f0       	breq	.+2      	; 0x4530 <__stack+0x2331>
    452e:	62 cf       	rjmp	.-316    	; 0x43f4 <__stack+0x21f5>



		// TO bring the bot to the same position wherein it started from, before detecting the object
	
		if(flag_turn == 1)   // If Left turn earlier falg == 1 and if right turn earlier flag == 2 else flag ==0
    4530:	80 91 0a 03 	lds	r24, 0x030A
    4534:	90 91 0b 03 	lds	r25, 0x030B
    4538:	81 30       	cpi	r24, 0x01	; 1
    453a:	91 05       	cpc	r25, r1
    453c:	09 f0       	breq	.+2      	; 0x4540 <__stack+0x2341>
    453e:	c6 c0       	rjmp	.+396    	; 0x46cc <__stack+0x24cd>
    4540:	b1 c0       	rjmp	.+354    	; 0x46a4 <__stack+0x24a5>
		{
			
			while(!(count == 0))
			{
				REVERSE();
    4542:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <REVERSE>
				RIGHT_REVERSE();
    4546:	0e 94 26 0c 	call	0x184c	; 0x184c <RIGHT_REVERSE>
				count--;
    454a:	80 91 3d 03 	lds	r24, 0x033D
    454e:	90 91 3e 03 	lds	r25, 0x033E
    4552:	01 97       	sbiw	r24, 0x01	; 1
    4554:	90 93 3e 03 	sts	0x033E, r25
    4558:	80 93 3d 03 	sts	0x033D, r24
    455c:	80 e0       	ldi	r24, 0x00	; 0
    455e:	90 e0       	ldi	r25, 0x00	; 0
    4560:	a8 e4       	ldi	r26, 0x48	; 72
    4562:	b2 e4       	ldi	r27, 0x42	; 66
    4564:	89 8f       	std	Y+25, r24	; 0x19
    4566:	9a 8f       	std	Y+26, r25	; 0x1a
    4568:	ab 8f       	std	Y+27, r26	; 0x1b
    456a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    456c:	69 8d       	ldd	r22, Y+25	; 0x19
    456e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4570:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4572:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4574:	2d ec       	ldi	r18, 0xCD	; 205
    4576:	3c ec       	ldi	r19, 0xCC	; 204
    4578:	4c e2       	ldi	r20, 0x2C	; 44
    457a:	55 e4       	ldi	r21, 0x45	; 69
    457c:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    4580:	dc 01       	movw	r26, r24
    4582:	cb 01       	movw	r24, r22
    4584:	8d 8b       	std	Y+21, r24	; 0x15
    4586:	9e 8b       	std	Y+22, r25	; 0x16
    4588:	af 8b       	std	Y+23, r26	; 0x17
    458a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    458c:	6d 89       	ldd	r22, Y+21	; 0x15
    458e:	7e 89       	ldd	r23, Y+22	; 0x16
    4590:	8f 89       	ldd	r24, Y+23	; 0x17
    4592:	98 8d       	ldd	r25, Y+24	; 0x18
    4594:	20 e0       	ldi	r18, 0x00	; 0
    4596:	30 e0       	ldi	r19, 0x00	; 0
    4598:	40 e8       	ldi	r20, 0x80	; 128
    459a:	5f e3       	ldi	r21, 0x3F	; 63
    459c:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
    45a0:	88 23       	and	r24, r24
    45a2:	2c f4       	brge	.+10     	; 0x45ae <__stack+0x23af>
		__ticks = 1;
    45a4:	81 e0       	ldi	r24, 0x01	; 1
    45a6:	90 e0       	ldi	r25, 0x00	; 0
    45a8:	9c 8b       	std	Y+20, r25	; 0x14
    45aa:	8b 8b       	std	Y+19, r24	; 0x13
    45ac:	3f c0       	rjmp	.+126    	; 0x462c <__stack+0x242d>
	else if (__tmp > 65535)
    45ae:	6d 89       	ldd	r22, Y+21	; 0x15
    45b0:	7e 89       	ldd	r23, Y+22	; 0x16
    45b2:	8f 89       	ldd	r24, Y+23	; 0x17
    45b4:	98 8d       	ldd	r25, Y+24	; 0x18
    45b6:	20 e0       	ldi	r18, 0x00	; 0
    45b8:	3f ef       	ldi	r19, 0xFF	; 255
    45ba:	4f e7       	ldi	r20, 0x7F	; 127
    45bc:	57 e4       	ldi	r21, 0x47	; 71
    45be:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
    45c2:	18 16       	cp	r1, r24
    45c4:	4c f5       	brge	.+82     	; 0x4618 <__stack+0x2419>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45c6:	69 8d       	ldd	r22, Y+25	; 0x19
    45c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45ce:	20 e0       	ldi	r18, 0x00	; 0
    45d0:	30 e0       	ldi	r19, 0x00	; 0
    45d2:	40 e2       	ldi	r20, 0x20	; 32
    45d4:	51 e4       	ldi	r21, 0x41	; 65
    45d6:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    45da:	dc 01       	movw	r26, r24
    45dc:	cb 01       	movw	r24, r22
    45de:	bc 01       	movw	r22, r24
    45e0:	cd 01       	movw	r24, r26
    45e2:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    45e6:	dc 01       	movw	r26, r24
    45e8:	cb 01       	movw	r24, r22
    45ea:	9c 8b       	std	Y+20, r25	; 0x14
    45ec:	8b 8b       	std	Y+19, r24	; 0x13
    45ee:	0f c0       	rjmp	.+30     	; 0x460e <__stack+0x240f>
    45f0:	84 e1       	ldi	r24, 0x14	; 20
    45f2:	91 e0       	ldi	r25, 0x01	; 1
    45f4:	9a 8b       	std	Y+18, r25	; 0x12
    45f6:	89 8b       	std	Y+17, r24	; 0x11
    45f8:	89 89       	ldd	r24, Y+17	; 0x11
    45fa:	9a 89       	ldd	r25, Y+18	; 0x12
    45fc:	01 97       	sbiw	r24, 0x01	; 1
    45fe:	f1 f7       	brne	.-4      	; 0x45fc <__stack+0x23fd>
    4600:	9a 8b       	std	Y+18, r25	; 0x12
    4602:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4604:	8b 89       	ldd	r24, Y+19	; 0x13
    4606:	9c 89       	ldd	r25, Y+20	; 0x14
    4608:	01 97       	sbiw	r24, 0x01	; 1
    460a:	9c 8b       	std	Y+20, r25	; 0x14
    460c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    460e:	8b 89       	ldd	r24, Y+19	; 0x13
    4610:	9c 89       	ldd	r25, Y+20	; 0x14
    4612:	00 97       	sbiw	r24, 0x00	; 0
    4614:	69 f7       	brne	.-38     	; 0x45f0 <__stack+0x23f1>
    4616:	14 c0       	rjmp	.+40     	; 0x4640 <__stack+0x2441>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4618:	6d 89       	ldd	r22, Y+21	; 0x15
    461a:	7e 89       	ldd	r23, Y+22	; 0x16
    461c:	8f 89       	ldd	r24, Y+23	; 0x17
    461e:	98 8d       	ldd	r25, Y+24	; 0x18
    4620:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    4624:	dc 01       	movw	r26, r24
    4626:	cb 01       	movw	r24, r22
    4628:	9c 8b       	std	Y+20, r25	; 0x14
    462a:	8b 8b       	std	Y+19, r24	; 0x13
    462c:	8b 89       	ldd	r24, Y+19	; 0x13
    462e:	9c 89       	ldd	r25, Y+20	; 0x14
    4630:	98 8b       	std	Y+16, r25	; 0x10
    4632:	8f 87       	std	Y+15, r24	; 0x0f
    4634:	8f 85       	ldd	r24, Y+15	; 0x0f
    4636:	98 89       	ldd	r25, Y+16	; 0x10
    4638:	01 97       	sbiw	r24, 0x01	; 1
    463a:	f1 f7       	brne	.-4      	; 0x4638 <__stack+0x2439>
    463c:	98 8b       	std	Y+16, r25	; 0x10
    463e:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(50);
				STOP();
    4640:	0e 94 31 0c 	call	0x1862	; 0x1862 <STOP>


					sharp_center_left=ADC_Conversion(10);
    4644:	8a e0       	ldi	r24, 0x0A	; 10
    4646:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    464a:	80 93 35 03 	sts	0x0335, r24
				value_center_left=Sharp_GP2D12_estimation(sharp_center_left);
    464e:	80 91 35 03 	lds	r24, 0x0335
    4652:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Sharp_GP2D12_estimation>
    4656:	90 93 4a 03 	sts	0x034A, r25
    465a:	80 93 49 03 	sts	0x0349, r24
				lcd_print(1,1,value_center_left,3); 
    465e:	20 91 49 03 	lds	r18, 0x0349
    4662:	30 91 4a 03 	lds	r19, 0x034A
    4666:	81 e0       	ldi	r24, 0x01	; 1
    4668:	61 e0       	ldi	r22, 0x01	; 1
    466a:	a9 01       	movw	r20, r18
    466c:	23 e0       	ldi	r18, 0x03	; 3
    466e:	30 e0       	ldi	r19, 0x00	; 0
    4670:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>

				sharp_center = ADC_Conversion(11);
    4674:	8b e0       	ldi	r24, 0x0B	; 11
    4676:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    467a:	80 93 19 03 	sts	0x0319, r24
				value_center = Sharp_GP2D12_estimation(sharp_center);
    467e:	80 91 19 03 	lds	r24, 0x0319
    4682:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Sharp_GP2D12_estimation>
    4686:	90 93 2a 03 	sts	0x032A, r25
    468a:	80 93 29 03 	sts	0x0329, r24
				lcd_print(1,7,value_center,3);
    468e:	20 91 29 03 	lds	r18, 0x0329
    4692:	30 91 2a 03 	lds	r19, 0x032A
    4696:	81 e0       	ldi	r24, 0x01	; 1
    4698:	67 e0       	ldi	r22, 0x07	; 7
    469a:	a9 01       	movw	r20, r18
    469c:	23 e0       	ldi	r18, 0x03	; 3
    469e:	30 e0       	ldi	r19, 0x00	; 0
    46a0:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
		// TO bring the bot to the same position wherein it started from, before detecting the object
	
		if(flag_turn == 1)   // If Left turn earlier falg == 1 and if right turn earlier flag == 2 else flag ==0
		{
			
			while(!(count == 0))
    46a4:	80 91 3d 03 	lds	r24, 0x033D
    46a8:	90 91 3e 03 	lds	r25, 0x033E
    46ac:	00 97       	sbiw	r24, 0x00	; 0
    46ae:	09 f0       	breq	.+2      	; 0x46b2 <__stack+0x24b3>
    46b0:	48 cf       	rjmp	.-368    	; 0x4542 <__stack+0x2343>
/*				sharp_center_right = ADC_Conversion(12);
				value_center_right = Sharp_GP2D12_estimation(sharp_center_right);
				lcd_print(1,13,value_center_right,3);
*/
			}
			FORWARD();
    46b2:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <FORWARD>
			RIGHT_TURN();
    46b6:	0e 94 10 0c 	call	0x1820	; 0x1820 <RIGHT_TURN>
			ANGLE_ROTATE(80);
    46ba:	80 e5       	ldi	r24, 0x50	; 80
    46bc:	90 e0       	ldi	r25, 0x00	; 0
    46be:	0e 94 75 0c 	call	0x18ea	; 0x18ea <ANGLE_ROTATE>
			flag_turn=0;
    46c2:	10 92 0b 03 	sts	0x030B, r1
    46c6:	10 92 0a 03 	sts	0x030A, r1
    46ca:	cd c0       	rjmp	.+410    	; 0x4866 <__stack+0x2667>

		}
		else if(flag_turn == 2)
    46cc:	80 91 0a 03 	lds	r24, 0x030A
    46d0:	90 91 0b 03 	lds	r25, 0x030B
    46d4:	82 30       	cpi	r24, 0x02	; 2
    46d6:	91 05       	cpc	r25, r1
    46d8:	09 f0       	breq	.+2      	; 0x46dc <__stack+0x24dd>
    46da:	c5 c0       	rjmp	.+394    	; 0x4866 <__stack+0x2667>
    46dc:	b1 c0       	rjmp	.+354    	; 0x4840 <__stack+0x2641>
		{
			
			while(!(count == 0))
			{
				REVERSE();
    46de:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <REVERSE>
				LEFT_REVERSE();
    46e2:	0e 94 05 0c 	call	0x180a	; 0x180a <LEFT_REVERSE>
				count--;
    46e6:	80 91 3d 03 	lds	r24, 0x033D
    46ea:	90 91 3e 03 	lds	r25, 0x033E
    46ee:	01 97       	sbiw	r24, 0x01	; 1
    46f0:	90 93 3e 03 	sts	0x033E, r25
    46f4:	80 93 3d 03 	sts	0x033D, r24
    46f8:	80 e0       	ldi	r24, 0x00	; 0
    46fa:	90 e0       	ldi	r25, 0x00	; 0
    46fc:	a8 e4       	ldi	r26, 0x48	; 72
    46fe:	b2 e4       	ldi	r27, 0x42	; 66
    4700:	8b 87       	std	Y+11, r24	; 0x0b
    4702:	9c 87       	std	Y+12, r25	; 0x0c
    4704:	ad 87       	std	Y+13, r26	; 0x0d
    4706:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4708:	6b 85       	ldd	r22, Y+11	; 0x0b
    470a:	7c 85       	ldd	r23, Y+12	; 0x0c
    470c:	8d 85       	ldd	r24, Y+13	; 0x0d
    470e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4710:	2d ec       	ldi	r18, 0xCD	; 205
    4712:	3c ec       	ldi	r19, 0xCC	; 204
    4714:	4c e2       	ldi	r20, 0x2C	; 44
    4716:	55 e4       	ldi	r21, 0x45	; 69
    4718:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    471c:	dc 01       	movw	r26, r24
    471e:	cb 01       	movw	r24, r22
    4720:	8f 83       	std	Y+7, r24	; 0x07
    4722:	98 87       	std	Y+8, r25	; 0x08
    4724:	a9 87       	std	Y+9, r26	; 0x09
    4726:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4728:	6f 81       	ldd	r22, Y+7	; 0x07
    472a:	78 85       	ldd	r23, Y+8	; 0x08
    472c:	89 85       	ldd	r24, Y+9	; 0x09
    472e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4730:	20 e0       	ldi	r18, 0x00	; 0
    4732:	30 e0       	ldi	r19, 0x00	; 0
    4734:	40 e8       	ldi	r20, 0x80	; 128
    4736:	5f e3       	ldi	r21, 0x3F	; 63
    4738:	0e 94 b4 28 	call	0x5168	; 0x5168 <__ltsf2>
    473c:	88 23       	and	r24, r24
    473e:	2c f4       	brge	.+10     	; 0x474a <__stack+0x254b>
		__ticks = 1;
    4740:	81 e0       	ldi	r24, 0x01	; 1
    4742:	90 e0       	ldi	r25, 0x00	; 0
    4744:	9e 83       	std	Y+6, r25	; 0x06
    4746:	8d 83       	std	Y+5, r24	; 0x05
    4748:	3f c0       	rjmp	.+126    	; 0x47c8 <__stack+0x25c9>
	else if (__tmp > 65535)
    474a:	6f 81       	ldd	r22, Y+7	; 0x07
    474c:	78 85       	ldd	r23, Y+8	; 0x08
    474e:	89 85       	ldd	r24, Y+9	; 0x09
    4750:	9a 85       	ldd	r25, Y+10	; 0x0a
    4752:	20 e0       	ldi	r18, 0x00	; 0
    4754:	3f ef       	ldi	r19, 0xFF	; 255
    4756:	4f e7       	ldi	r20, 0x7F	; 127
    4758:	57 e4       	ldi	r21, 0x47	; 71
    475a:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__gtsf2>
    475e:	18 16       	cp	r1, r24
    4760:	4c f5       	brge	.+82     	; 0x47b4 <__stack+0x25b5>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4762:	6b 85       	ldd	r22, Y+11	; 0x0b
    4764:	7c 85       	ldd	r23, Y+12	; 0x0c
    4766:	8d 85       	ldd	r24, Y+13	; 0x0d
    4768:	9e 85       	ldd	r25, Y+14	; 0x0e
    476a:	20 e0       	ldi	r18, 0x00	; 0
    476c:	30 e0       	ldi	r19, 0x00	; 0
    476e:	40 e2       	ldi	r20, 0x20	; 32
    4770:	51 e4       	ldi	r21, 0x41	; 65
    4772:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <__mulsf3>
    4776:	dc 01       	movw	r26, r24
    4778:	cb 01       	movw	r24, r22
    477a:	bc 01       	movw	r22, r24
    477c:	cd 01       	movw	r24, r26
    477e:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    4782:	dc 01       	movw	r26, r24
    4784:	cb 01       	movw	r24, r22
    4786:	9e 83       	std	Y+6, r25	; 0x06
    4788:	8d 83       	std	Y+5, r24	; 0x05
    478a:	0f c0       	rjmp	.+30     	; 0x47aa <__stack+0x25ab>
    478c:	84 e1       	ldi	r24, 0x14	; 20
    478e:	91 e0       	ldi	r25, 0x01	; 1
    4790:	9c 83       	std	Y+4, r25	; 0x04
    4792:	8b 83       	std	Y+3, r24	; 0x03
    4794:	8b 81       	ldd	r24, Y+3	; 0x03
    4796:	9c 81       	ldd	r25, Y+4	; 0x04
    4798:	01 97       	sbiw	r24, 0x01	; 1
    479a:	f1 f7       	brne	.-4      	; 0x4798 <__stack+0x2599>
    479c:	9c 83       	std	Y+4, r25	; 0x04
    479e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47a0:	8d 81       	ldd	r24, Y+5	; 0x05
    47a2:	9e 81       	ldd	r25, Y+6	; 0x06
    47a4:	01 97       	sbiw	r24, 0x01	; 1
    47a6:	9e 83       	std	Y+6, r25	; 0x06
    47a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47aa:	8d 81       	ldd	r24, Y+5	; 0x05
    47ac:	9e 81       	ldd	r25, Y+6	; 0x06
    47ae:	00 97       	sbiw	r24, 0x00	; 0
    47b0:	69 f7       	brne	.-38     	; 0x478c <__stack+0x258d>
    47b2:	14 c0       	rjmp	.+40     	; 0x47dc <__stack+0x25dd>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47b4:	6f 81       	ldd	r22, Y+7	; 0x07
    47b6:	78 85       	ldd	r23, Y+8	; 0x08
    47b8:	89 85       	ldd	r24, Y+9	; 0x09
    47ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    47bc:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    47c0:	dc 01       	movw	r26, r24
    47c2:	cb 01       	movw	r24, r22
    47c4:	9e 83       	std	Y+6, r25	; 0x06
    47c6:	8d 83       	std	Y+5, r24	; 0x05
    47c8:	8d 81       	ldd	r24, Y+5	; 0x05
    47ca:	9e 81       	ldd	r25, Y+6	; 0x06
    47cc:	9a 83       	std	Y+2, r25	; 0x02
    47ce:	89 83       	std	Y+1, r24	; 0x01
    47d0:	89 81       	ldd	r24, Y+1	; 0x01
    47d2:	9a 81       	ldd	r25, Y+2	; 0x02
    47d4:	01 97       	sbiw	r24, 0x01	; 1
    47d6:	f1 f7       	brne	.-4      	; 0x47d4 <__stack+0x25d5>
    47d8:	9a 83       	std	Y+2, r25	; 0x02
    47da:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(50);
				STOP();
    47dc:	0e 94 31 0c 	call	0x1862	; 0x1862 <STOP>


					sharp_center_left=ADC_Conversion(10);
    47e0:	8a e0       	ldi	r24, 0x0A	; 10
    47e2:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    47e6:	80 93 35 03 	sts	0x0335, r24
				value_center_left=Sharp_GP2D12_estimation(sharp_center_left);
    47ea:	80 91 35 03 	lds	r24, 0x0335
    47ee:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Sharp_GP2D12_estimation>
    47f2:	90 93 4a 03 	sts	0x034A, r25
    47f6:	80 93 49 03 	sts	0x0349, r24
				lcd_print(1,1,value_center_left,3); 
    47fa:	20 91 49 03 	lds	r18, 0x0349
    47fe:	30 91 4a 03 	lds	r19, 0x034A
    4802:	81 e0       	ldi	r24, 0x01	; 1
    4804:	61 e0       	ldi	r22, 0x01	; 1
    4806:	a9 01       	movw	r20, r18
    4808:	23 e0       	ldi	r18, 0x03	; 3
    480a:	30 e0       	ldi	r19, 0x00	; 0
    480c:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>

				sharp_center = ADC_Conversion(11);
    4810:	8b e0       	ldi	r24, 0x0B	; 11
    4812:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    4816:	80 93 19 03 	sts	0x0319, r24
				value_center = Sharp_GP2D12_estimation(sharp_center);
    481a:	80 91 19 03 	lds	r24, 0x0319
    481e:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Sharp_GP2D12_estimation>
    4822:	90 93 2a 03 	sts	0x032A, r25
    4826:	80 93 29 03 	sts	0x0329, r24
				lcd_print(1,7,value_center,3);
    482a:	20 91 29 03 	lds	r18, 0x0329
    482e:	30 91 2a 03 	lds	r19, 0x032A
    4832:	81 e0       	ldi	r24, 0x01	; 1
    4834:	67 e0       	ldi	r22, 0x07	; 7
    4836:	a9 01       	movw	r20, r18
    4838:	23 e0       	ldi	r18, 0x03	; 3
    483a:	30 e0       	ldi	r19, 0x00	; 0
    483c:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>

		}
		else if(flag_turn == 2)
		{
			
			while(!(count == 0))
    4840:	80 91 3d 03 	lds	r24, 0x033D
    4844:	90 91 3e 03 	lds	r25, 0x033E
    4848:	00 97       	sbiw	r24, 0x00	; 0
    484a:	09 f0       	breq	.+2      	; 0x484e <__stack+0x264f>
    484c:	48 cf       	rjmp	.-368    	; 0x46de <__stack+0x24df>
				sharp_center_right = ADC_Conversion(12);
				value_center_right = Sharp_GP2D12_estimation(sharp_center_right);
				lcd_print(1,13,value_center_right,3);
*/
			}
			REVERSE();
    484e:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <REVERSE>
			LEFT_TURN();
    4852:	0e 94 ef 0b 	call	0x17de	; 0x17de <LEFT_TURN>

			ANGLE_ROTATE(80);
    4856:	80 e5       	ldi	r24, 0x50	; 80
    4858:	90 e0       	ldi	r25, 0x00	; 0
    485a:	0e 94 75 0c 	call	0x18ea	; 0x18ea <ANGLE_ROTATE>
			
			flag_turn=0;
    485e:	10 92 0b 03 	sts	0x030B, r1
    4862:	10 92 0a 03 	sts	0x030A, r1
		}
				

		STOP();
    4866:	0e 94 31 0c 	call	0x1862	; 0x1862 <STOP>
		sharp_left = ADC_Conversion(9);
    486a:	89 e0       	ldi	r24, 0x09	; 9
    486c:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    4870:	80 93 3c 03 	sts	0x033C, r24
	value_left = Sharp_GP2D12_estimation(sharp_left);
    4874:	80 91 3c 03 	lds	r24, 0x033C
    4878:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Sharp_GP2D12_estimation>
    487c:	90 93 42 03 	sts	0x0342, r25
    4880:	80 93 41 03 	sts	0x0341, r24
	lcd_print(2,1,value_left,3); 
    4884:	20 91 41 03 	lds	r18, 0x0341
    4888:	30 91 42 03 	lds	r19, 0x0342
    488c:	82 e0       	ldi	r24, 0x02	; 2
    488e:	61 e0       	ldi	r22, 0x01	; 1
    4890:	a9 01       	movw	r20, r18
    4892:	23 e0       	ldi	r18, 0x03	; 3
    4894:	30 e0       	ldi	r19, 0x00	; 0
    4896:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
	
	sharp_right = ADC_Conversion(13);
    489a:	8d e0       	ldi	r24, 0x0D	; 13
    489c:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    48a0:	80 93 3b 03 	sts	0x033B, r24
	value_right = Sharp_GP2D12_estimation(sharp_right);
    48a4:	80 91 3b 03 	lds	r24, 0x033B
    48a8:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Sharp_GP2D12_estimation>
    48ac:	90 93 40 03 	sts	0x0340, r25
    48b0:	80 93 3f 03 	sts	0x033F, r24
	lcd_print(2,13,value_right,3);
    48b4:	20 91 3f 03 	lds	r18, 0x033F
    48b8:	30 91 40 03 	lds	r19, 0x0340
    48bc:	82 e0       	ldi	r24, 0x02	; 2
    48be:	6d e0       	ldi	r22, 0x0D	; 13
    48c0:	a9 01       	movw	r20, r18
    48c2:	23 e0       	ldi	r18, 0x03	; 3
    48c4:	30 e0       	ldi	r19, 0x00	; 0
    48c6:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>


	sharp_center_left=ADC_Conversion(10);
    48ca:	8a e0       	ldi	r24, 0x0A	; 10
    48cc:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    48d0:	80 93 35 03 	sts	0x0335, r24
	value_center_left=Sharp_GP2D12_estimation(sharp_center_left);
    48d4:	80 91 35 03 	lds	r24, 0x0335
    48d8:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Sharp_GP2D12_estimation>
    48dc:	90 93 4a 03 	sts	0x034A, r25
    48e0:	80 93 49 03 	sts	0x0349, r24
	lcd_print(1,1,value_center_left,3); 
    48e4:	20 91 49 03 	lds	r18, 0x0349
    48e8:	30 91 4a 03 	lds	r19, 0x034A
    48ec:	81 e0       	ldi	r24, 0x01	; 1
    48ee:	61 e0       	ldi	r22, 0x01	; 1
    48f0:	a9 01       	movw	r20, r18
    48f2:	23 e0       	ldi	r18, 0x03	; 3
    48f4:	30 e0       	ldi	r19, 0x00	; 0
    48f6:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>

	sharp_center = ADC_Conversion(11);
    48fa:	8b e0       	ldi	r24, 0x0B	; 11
    48fc:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    4900:	80 93 19 03 	sts	0x0319, r24
	value_center = Sharp_GP2D12_estimation(sharp_center);
    4904:	80 91 19 03 	lds	r24, 0x0319
    4908:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Sharp_GP2D12_estimation>
    490c:	90 93 2a 03 	sts	0x032A, r25
    4910:	80 93 29 03 	sts	0x0329, r24
	lcd_print(1,7,value_center,3);
    4914:	20 91 29 03 	lds	r18, 0x0329
    4918:	30 91 2a 03 	lds	r19, 0x032A
    491c:	81 e0       	ldi	r24, 0x01	; 1
    491e:	67 e0       	ldi	r22, 0x07	; 7
    4920:	a9 01       	movw	r20, r18
    4922:	23 e0       	ldi	r18, 0x03	; 3
    4924:	30 e0       	ldi	r19, 0x00	; 0
    4926:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
/*	
	sharp_center_right = ADC_Conversion(12);
	value_center_right = Sharp_GP2D12_estimation(sharp_center_right);
	lcd_print(1,13,value_center_right,3);
*/			
		white_1 = ADC_Conversion(1);
    492a:	81 e0       	ldi	r24, 0x01	; 1
    492c:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    4930:	88 2f       	mov	r24, r24
    4932:	90 e0       	ldi	r25, 0x00	; 0
    4934:	a0 e0       	ldi	r26, 0x00	; 0
    4936:	b0 e0       	ldi	r27, 0x00	; 0
    4938:	bc 01       	movw	r22, r24
    493a:	cd 01       	movw	r24, r26
    493c:	0e 94 96 29 	call	0x532c	; 0x532c <__floatunsisf>
    4940:	dc 01       	movw	r26, r24
    4942:	cb 01       	movw	r24, r22
    4944:	80 93 36 03 	sts	0x0336, r24
    4948:	90 93 37 03 	sts	0x0337, r25
    494c:	a0 93 38 03 	sts	0x0338, r26
    4950:	b0 93 39 03 	sts	0x0339, r27
		//lcd_print(1,1,white_1,4);
		white_2 = ADC_Conversion(2);
    4954:	82 e0       	ldi	r24, 0x02	; 2
    4956:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    495a:	88 2f       	mov	r24, r24
    495c:	90 e0       	ldi	r25, 0x00	; 0
    495e:	a0 e0       	ldi	r26, 0x00	; 0
    4960:	b0 e0       	ldi	r27, 0x00	; 0
    4962:	bc 01       	movw	r22, r24
    4964:	cd 01       	movw	r24, r26
    4966:	0e 94 96 29 	call	0x532c	; 0x532c <__floatunsisf>
    496a:	dc 01       	movw	r26, r24
    496c:	cb 01       	movw	r24, r22
    496e:	80 93 45 03 	sts	0x0345, r24
    4972:	90 93 46 03 	sts	0x0346, r25
    4976:	a0 93 47 03 	sts	0x0347, r26
    497a:	b0 93 48 03 	sts	0x0348, r27
		//lcd_print(1,7,white_2,4);
		white_3 = ADC_Conversion(3);
    497e:	83 e0       	ldi	r24, 0x03	; 3
    4980:	0e 94 c3 0a 	call	0x1586	; 0x1586 <ADC_Conversion>
    4984:	88 2f       	mov	r24, r24
    4986:	90 e0       	ldi	r25, 0x00	; 0
    4988:	a0 e0       	ldi	r26, 0x00	; 0
    498a:	b0 e0       	ldi	r27, 0x00	; 0
    498c:	bc 01       	movw	r22, r24
    498e:	cd 01       	movw	r24, r26
    4990:	0e 94 96 29 	call	0x532c	; 0x532c <__floatunsisf>
    4994:	dc 01       	movw	r26, r24
    4996:	cb 01       	movw	r24, r22
    4998:	80 93 13 03 	sts	0x0313, r24
    499c:	90 93 14 03 	sts	0x0314, r25
    49a0:	a0 93 15 03 	sts	0x0315, r26
    49a4:	b0 93 16 03 	sts	0x0316, r27
		//lcd_print(1,13,white_3,4);


	}
	FORWARD();
    49a8:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <FORWARD>
    49ac:	0c 94 25 11 	jmp	0x224a	; 0x224a <__stack+0x4b>

000049b0 <__fixunssfsi>:
    49b0:	ef 92       	push	r14
    49b2:	ff 92       	push	r15
    49b4:	0f 93       	push	r16
    49b6:	1f 93       	push	r17
    49b8:	7b 01       	movw	r14, r22
    49ba:	8c 01       	movw	r16, r24
    49bc:	20 e0       	ldi	r18, 0x00	; 0
    49be:	30 e0       	ldi	r19, 0x00	; 0
    49c0:	40 e0       	ldi	r20, 0x00	; 0
    49c2:	5f e4       	ldi	r21, 0x4F	; 79
    49c4:	0e 94 84 28 	call	0x5108	; 0x5108 <__gesf2>
    49c8:	88 23       	and	r24, r24
    49ca:	8c f0       	brlt	.+34     	; 0x49ee <__fixunssfsi+0x3e>
    49cc:	c8 01       	movw	r24, r16
    49ce:	b7 01       	movw	r22, r14
    49d0:	20 e0       	ldi	r18, 0x00	; 0
    49d2:	30 e0       	ldi	r19, 0x00	; 0
    49d4:	40 e0       	ldi	r20, 0x00	; 0
    49d6:	5f e4       	ldi	r21, 0x4F	; 79
    49d8:	0e 94 50 26 	call	0x4ca0	; 0x4ca0 <__subsf3>
    49dc:	0e 94 42 29 	call	0x5284	; 0x5284 <__fixsfsi>
    49e0:	9b 01       	movw	r18, r22
    49e2:	ac 01       	movw	r20, r24
    49e4:	20 50       	subi	r18, 0x00	; 0
    49e6:	30 40       	sbci	r19, 0x00	; 0
    49e8:	40 40       	sbci	r20, 0x00	; 0
    49ea:	50 48       	sbci	r21, 0x80	; 128
    49ec:	06 c0       	rjmp	.+12     	; 0x49fa <__fixunssfsi+0x4a>
    49ee:	c8 01       	movw	r24, r16
    49f0:	b7 01       	movw	r22, r14
    49f2:	0e 94 42 29 	call	0x5284	; 0x5284 <__fixsfsi>
    49f6:	9b 01       	movw	r18, r22
    49f8:	ac 01       	movw	r20, r24
    49fa:	b9 01       	movw	r22, r18
    49fc:	ca 01       	movw	r24, r20
    49fe:	1f 91       	pop	r17
    4a00:	0f 91       	pop	r16
    4a02:	ff 90       	pop	r15
    4a04:	ef 90       	pop	r14
    4a06:	08 95       	ret

00004a08 <_fpadd_parts>:
    4a08:	a0 e0       	ldi	r26, 0x00	; 0
    4a0a:	b0 e0       	ldi	r27, 0x00	; 0
    4a0c:	ea e0       	ldi	r30, 0x0A	; 10
    4a0e:	f5 e2       	ldi	r31, 0x25	; 37
    4a10:	0c 94 18 2c 	jmp	0x5830	; 0x5830 <__prologue_saves__>
    4a14:	dc 01       	movw	r26, r24
    4a16:	2b 01       	movw	r4, r22
    4a18:	fa 01       	movw	r30, r20
    4a1a:	9c 91       	ld	r25, X
    4a1c:	92 30       	cpi	r25, 0x02	; 2
    4a1e:	08 f4       	brcc	.+2      	; 0x4a22 <_fpadd_parts+0x1a>
    4a20:	39 c1       	rjmp	.+626    	; 0x4c94 <_fpadd_parts+0x28c>
    4a22:	eb 01       	movw	r28, r22
    4a24:	88 81       	ld	r24, Y
    4a26:	82 30       	cpi	r24, 0x02	; 2
    4a28:	08 f4       	brcc	.+2      	; 0x4a2c <_fpadd_parts+0x24>
    4a2a:	33 c1       	rjmp	.+614    	; 0x4c92 <_fpadd_parts+0x28a>
    4a2c:	94 30       	cpi	r25, 0x04	; 4
    4a2e:	69 f4       	brne	.+26     	; 0x4a4a <_fpadd_parts+0x42>
    4a30:	84 30       	cpi	r24, 0x04	; 4
    4a32:	09 f0       	breq	.+2      	; 0x4a36 <_fpadd_parts+0x2e>
    4a34:	2f c1       	rjmp	.+606    	; 0x4c94 <_fpadd_parts+0x28c>
    4a36:	11 96       	adiw	r26, 0x01	; 1
    4a38:	9c 91       	ld	r25, X
    4a3a:	11 97       	sbiw	r26, 0x01	; 1
    4a3c:	89 81       	ldd	r24, Y+1	; 0x01
    4a3e:	98 17       	cp	r25, r24
    4a40:	09 f4       	brne	.+2      	; 0x4a44 <_fpadd_parts+0x3c>
    4a42:	28 c1       	rjmp	.+592    	; 0x4c94 <_fpadd_parts+0x28c>
    4a44:	a2 e0       	ldi	r26, 0x02	; 2
    4a46:	b2 e0       	ldi	r27, 0x02	; 2
    4a48:	25 c1       	rjmp	.+586    	; 0x4c94 <_fpadd_parts+0x28c>
    4a4a:	84 30       	cpi	r24, 0x04	; 4
    4a4c:	09 f4       	brne	.+2      	; 0x4a50 <_fpadd_parts+0x48>
    4a4e:	21 c1       	rjmp	.+578    	; 0x4c92 <_fpadd_parts+0x28a>
    4a50:	82 30       	cpi	r24, 0x02	; 2
    4a52:	a9 f4       	brne	.+42     	; 0x4a7e <_fpadd_parts+0x76>
    4a54:	92 30       	cpi	r25, 0x02	; 2
    4a56:	09 f0       	breq	.+2      	; 0x4a5a <_fpadd_parts+0x52>
    4a58:	1d c1       	rjmp	.+570    	; 0x4c94 <_fpadd_parts+0x28c>
    4a5a:	9a 01       	movw	r18, r20
    4a5c:	ad 01       	movw	r20, r26
    4a5e:	88 e0       	ldi	r24, 0x08	; 8
    4a60:	ea 01       	movw	r28, r20
    4a62:	09 90       	ld	r0, Y+
    4a64:	ae 01       	movw	r20, r28
    4a66:	e9 01       	movw	r28, r18
    4a68:	09 92       	st	Y+, r0
    4a6a:	9e 01       	movw	r18, r28
    4a6c:	81 50       	subi	r24, 0x01	; 1
    4a6e:	c1 f7       	brne	.-16     	; 0x4a60 <_fpadd_parts+0x58>
    4a70:	e2 01       	movw	r28, r4
    4a72:	89 81       	ldd	r24, Y+1	; 0x01
    4a74:	11 96       	adiw	r26, 0x01	; 1
    4a76:	9c 91       	ld	r25, X
    4a78:	89 23       	and	r24, r25
    4a7a:	81 83       	std	Z+1, r24	; 0x01
    4a7c:	08 c1       	rjmp	.+528    	; 0x4c8e <_fpadd_parts+0x286>
    4a7e:	92 30       	cpi	r25, 0x02	; 2
    4a80:	09 f4       	brne	.+2      	; 0x4a84 <_fpadd_parts+0x7c>
    4a82:	07 c1       	rjmp	.+526    	; 0x4c92 <_fpadd_parts+0x28a>
    4a84:	12 96       	adiw	r26, 0x02	; 2
    4a86:	2d 90       	ld	r2, X+
    4a88:	3c 90       	ld	r3, X
    4a8a:	13 97       	sbiw	r26, 0x03	; 3
    4a8c:	eb 01       	movw	r28, r22
    4a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    4a90:	9b 81       	ldd	r25, Y+3	; 0x03
    4a92:	14 96       	adiw	r26, 0x04	; 4
    4a94:	ad 90       	ld	r10, X+
    4a96:	bd 90       	ld	r11, X+
    4a98:	cd 90       	ld	r12, X+
    4a9a:	dc 90       	ld	r13, X
    4a9c:	17 97       	sbiw	r26, 0x07	; 7
    4a9e:	ec 80       	ldd	r14, Y+4	; 0x04
    4aa0:	fd 80       	ldd	r15, Y+5	; 0x05
    4aa2:	0e 81       	ldd	r16, Y+6	; 0x06
    4aa4:	1f 81       	ldd	r17, Y+7	; 0x07
    4aa6:	91 01       	movw	r18, r2
    4aa8:	28 1b       	sub	r18, r24
    4aaa:	39 0b       	sbc	r19, r25
    4aac:	b9 01       	movw	r22, r18
    4aae:	37 ff       	sbrs	r19, 7
    4ab0:	04 c0       	rjmp	.+8      	; 0x4aba <_fpadd_parts+0xb2>
    4ab2:	66 27       	eor	r22, r22
    4ab4:	77 27       	eor	r23, r23
    4ab6:	62 1b       	sub	r22, r18
    4ab8:	73 0b       	sbc	r23, r19
    4aba:	60 32       	cpi	r22, 0x20	; 32
    4abc:	71 05       	cpc	r23, r1
    4abe:	0c f0       	brlt	.+2      	; 0x4ac2 <_fpadd_parts+0xba>
    4ac0:	61 c0       	rjmp	.+194    	; 0x4b84 <_fpadd_parts+0x17c>
    4ac2:	12 16       	cp	r1, r18
    4ac4:	13 06       	cpc	r1, r19
    4ac6:	6c f5       	brge	.+90     	; 0x4b22 <_fpadd_parts+0x11a>
    4ac8:	37 01       	movw	r6, r14
    4aca:	48 01       	movw	r8, r16
    4acc:	06 2e       	mov	r0, r22
    4ace:	04 c0       	rjmp	.+8      	; 0x4ad8 <_fpadd_parts+0xd0>
    4ad0:	96 94       	lsr	r9
    4ad2:	87 94       	ror	r8
    4ad4:	77 94       	ror	r7
    4ad6:	67 94       	ror	r6
    4ad8:	0a 94       	dec	r0
    4ada:	d2 f7       	brpl	.-12     	; 0x4ad0 <_fpadd_parts+0xc8>
    4adc:	21 e0       	ldi	r18, 0x01	; 1
    4ade:	30 e0       	ldi	r19, 0x00	; 0
    4ae0:	40 e0       	ldi	r20, 0x00	; 0
    4ae2:	50 e0       	ldi	r21, 0x00	; 0
    4ae4:	04 c0       	rjmp	.+8      	; 0x4aee <_fpadd_parts+0xe6>
    4ae6:	22 0f       	add	r18, r18
    4ae8:	33 1f       	adc	r19, r19
    4aea:	44 1f       	adc	r20, r20
    4aec:	55 1f       	adc	r21, r21
    4aee:	6a 95       	dec	r22
    4af0:	d2 f7       	brpl	.-12     	; 0x4ae6 <_fpadd_parts+0xde>
    4af2:	21 50       	subi	r18, 0x01	; 1
    4af4:	30 40       	sbci	r19, 0x00	; 0
    4af6:	40 40       	sbci	r20, 0x00	; 0
    4af8:	50 40       	sbci	r21, 0x00	; 0
    4afa:	2e 21       	and	r18, r14
    4afc:	3f 21       	and	r19, r15
    4afe:	40 23       	and	r20, r16
    4b00:	51 23       	and	r21, r17
    4b02:	21 15       	cp	r18, r1
    4b04:	31 05       	cpc	r19, r1
    4b06:	41 05       	cpc	r20, r1
    4b08:	51 05       	cpc	r21, r1
    4b0a:	21 f0       	breq	.+8      	; 0x4b14 <_fpadd_parts+0x10c>
    4b0c:	21 e0       	ldi	r18, 0x01	; 1
    4b0e:	30 e0       	ldi	r19, 0x00	; 0
    4b10:	40 e0       	ldi	r20, 0x00	; 0
    4b12:	50 e0       	ldi	r21, 0x00	; 0
    4b14:	79 01       	movw	r14, r18
    4b16:	8a 01       	movw	r16, r20
    4b18:	e6 28       	or	r14, r6
    4b1a:	f7 28       	or	r15, r7
    4b1c:	08 29       	or	r16, r8
    4b1e:	19 29       	or	r17, r9
    4b20:	3c c0       	rjmp	.+120    	; 0x4b9a <_fpadd_parts+0x192>
    4b22:	23 2b       	or	r18, r19
    4b24:	d1 f1       	breq	.+116    	; 0x4b9a <_fpadd_parts+0x192>
    4b26:	26 0e       	add	r2, r22
    4b28:	37 1e       	adc	r3, r23
    4b2a:	35 01       	movw	r6, r10
    4b2c:	46 01       	movw	r8, r12
    4b2e:	06 2e       	mov	r0, r22
    4b30:	04 c0       	rjmp	.+8      	; 0x4b3a <_fpadd_parts+0x132>
    4b32:	96 94       	lsr	r9
    4b34:	87 94       	ror	r8
    4b36:	77 94       	ror	r7
    4b38:	67 94       	ror	r6
    4b3a:	0a 94       	dec	r0
    4b3c:	d2 f7       	brpl	.-12     	; 0x4b32 <_fpadd_parts+0x12a>
    4b3e:	21 e0       	ldi	r18, 0x01	; 1
    4b40:	30 e0       	ldi	r19, 0x00	; 0
    4b42:	40 e0       	ldi	r20, 0x00	; 0
    4b44:	50 e0       	ldi	r21, 0x00	; 0
    4b46:	04 c0       	rjmp	.+8      	; 0x4b50 <_fpadd_parts+0x148>
    4b48:	22 0f       	add	r18, r18
    4b4a:	33 1f       	adc	r19, r19
    4b4c:	44 1f       	adc	r20, r20
    4b4e:	55 1f       	adc	r21, r21
    4b50:	6a 95       	dec	r22
    4b52:	d2 f7       	brpl	.-12     	; 0x4b48 <_fpadd_parts+0x140>
    4b54:	21 50       	subi	r18, 0x01	; 1
    4b56:	30 40       	sbci	r19, 0x00	; 0
    4b58:	40 40       	sbci	r20, 0x00	; 0
    4b5a:	50 40       	sbci	r21, 0x00	; 0
    4b5c:	2a 21       	and	r18, r10
    4b5e:	3b 21       	and	r19, r11
    4b60:	4c 21       	and	r20, r12
    4b62:	5d 21       	and	r21, r13
    4b64:	21 15       	cp	r18, r1
    4b66:	31 05       	cpc	r19, r1
    4b68:	41 05       	cpc	r20, r1
    4b6a:	51 05       	cpc	r21, r1
    4b6c:	21 f0       	breq	.+8      	; 0x4b76 <_fpadd_parts+0x16e>
    4b6e:	21 e0       	ldi	r18, 0x01	; 1
    4b70:	30 e0       	ldi	r19, 0x00	; 0
    4b72:	40 e0       	ldi	r20, 0x00	; 0
    4b74:	50 e0       	ldi	r21, 0x00	; 0
    4b76:	59 01       	movw	r10, r18
    4b78:	6a 01       	movw	r12, r20
    4b7a:	a6 28       	or	r10, r6
    4b7c:	b7 28       	or	r11, r7
    4b7e:	c8 28       	or	r12, r8
    4b80:	d9 28       	or	r13, r9
    4b82:	0b c0       	rjmp	.+22     	; 0x4b9a <_fpadd_parts+0x192>
    4b84:	82 15       	cp	r24, r2
    4b86:	93 05       	cpc	r25, r3
    4b88:	2c f0       	brlt	.+10     	; 0x4b94 <_fpadd_parts+0x18c>
    4b8a:	1c 01       	movw	r2, r24
    4b8c:	aa 24       	eor	r10, r10
    4b8e:	bb 24       	eor	r11, r11
    4b90:	65 01       	movw	r12, r10
    4b92:	03 c0       	rjmp	.+6      	; 0x4b9a <_fpadd_parts+0x192>
    4b94:	ee 24       	eor	r14, r14
    4b96:	ff 24       	eor	r15, r15
    4b98:	87 01       	movw	r16, r14
    4b9a:	11 96       	adiw	r26, 0x01	; 1
    4b9c:	9c 91       	ld	r25, X
    4b9e:	d2 01       	movw	r26, r4
    4ba0:	11 96       	adiw	r26, 0x01	; 1
    4ba2:	8c 91       	ld	r24, X
    4ba4:	98 17       	cp	r25, r24
    4ba6:	09 f4       	brne	.+2      	; 0x4baa <_fpadd_parts+0x1a2>
    4ba8:	45 c0       	rjmp	.+138    	; 0x4c34 <_fpadd_parts+0x22c>
    4baa:	99 23       	and	r25, r25
    4bac:	39 f0       	breq	.+14     	; 0x4bbc <_fpadd_parts+0x1b4>
    4bae:	a8 01       	movw	r20, r16
    4bb0:	97 01       	movw	r18, r14
    4bb2:	2a 19       	sub	r18, r10
    4bb4:	3b 09       	sbc	r19, r11
    4bb6:	4c 09       	sbc	r20, r12
    4bb8:	5d 09       	sbc	r21, r13
    4bba:	06 c0       	rjmp	.+12     	; 0x4bc8 <_fpadd_parts+0x1c0>
    4bbc:	a6 01       	movw	r20, r12
    4bbe:	95 01       	movw	r18, r10
    4bc0:	2e 19       	sub	r18, r14
    4bc2:	3f 09       	sbc	r19, r15
    4bc4:	40 0b       	sbc	r20, r16
    4bc6:	51 0b       	sbc	r21, r17
    4bc8:	57 fd       	sbrc	r21, 7
    4bca:	08 c0       	rjmp	.+16     	; 0x4bdc <_fpadd_parts+0x1d4>
    4bcc:	11 82       	std	Z+1, r1	; 0x01
    4bce:	33 82       	std	Z+3, r3	; 0x03
    4bd0:	22 82       	std	Z+2, r2	; 0x02
    4bd2:	24 83       	std	Z+4, r18	; 0x04
    4bd4:	35 83       	std	Z+5, r19	; 0x05
    4bd6:	46 83       	std	Z+6, r20	; 0x06
    4bd8:	57 83       	std	Z+7, r21	; 0x07
    4bda:	1d c0       	rjmp	.+58     	; 0x4c16 <_fpadd_parts+0x20e>
    4bdc:	81 e0       	ldi	r24, 0x01	; 1
    4bde:	81 83       	std	Z+1, r24	; 0x01
    4be0:	33 82       	std	Z+3, r3	; 0x03
    4be2:	22 82       	std	Z+2, r2	; 0x02
    4be4:	88 27       	eor	r24, r24
    4be6:	99 27       	eor	r25, r25
    4be8:	dc 01       	movw	r26, r24
    4bea:	82 1b       	sub	r24, r18
    4bec:	93 0b       	sbc	r25, r19
    4bee:	a4 0b       	sbc	r26, r20
    4bf0:	b5 0b       	sbc	r27, r21
    4bf2:	84 83       	std	Z+4, r24	; 0x04
    4bf4:	95 83       	std	Z+5, r25	; 0x05
    4bf6:	a6 83       	std	Z+6, r26	; 0x06
    4bf8:	b7 83       	std	Z+7, r27	; 0x07
    4bfa:	0d c0       	rjmp	.+26     	; 0x4c16 <_fpadd_parts+0x20e>
    4bfc:	22 0f       	add	r18, r18
    4bfe:	33 1f       	adc	r19, r19
    4c00:	44 1f       	adc	r20, r20
    4c02:	55 1f       	adc	r21, r21
    4c04:	24 83       	std	Z+4, r18	; 0x04
    4c06:	35 83       	std	Z+5, r19	; 0x05
    4c08:	46 83       	std	Z+6, r20	; 0x06
    4c0a:	57 83       	std	Z+7, r21	; 0x07
    4c0c:	82 81       	ldd	r24, Z+2	; 0x02
    4c0e:	93 81       	ldd	r25, Z+3	; 0x03
    4c10:	01 97       	sbiw	r24, 0x01	; 1
    4c12:	93 83       	std	Z+3, r25	; 0x03
    4c14:	82 83       	std	Z+2, r24	; 0x02
    4c16:	24 81       	ldd	r18, Z+4	; 0x04
    4c18:	35 81       	ldd	r19, Z+5	; 0x05
    4c1a:	46 81       	ldd	r20, Z+6	; 0x06
    4c1c:	57 81       	ldd	r21, Z+7	; 0x07
    4c1e:	da 01       	movw	r26, r20
    4c20:	c9 01       	movw	r24, r18
    4c22:	01 97       	sbiw	r24, 0x01	; 1
    4c24:	a1 09       	sbc	r26, r1
    4c26:	b1 09       	sbc	r27, r1
    4c28:	8f 5f       	subi	r24, 0xFF	; 255
    4c2a:	9f 4f       	sbci	r25, 0xFF	; 255
    4c2c:	af 4f       	sbci	r26, 0xFF	; 255
    4c2e:	bf 43       	sbci	r27, 0x3F	; 63
    4c30:	28 f3       	brcs	.-54     	; 0x4bfc <_fpadd_parts+0x1f4>
    4c32:	0b c0       	rjmp	.+22     	; 0x4c4a <_fpadd_parts+0x242>
    4c34:	91 83       	std	Z+1, r25	; 0x01
    4c36:	33 82       	std	Z+3, r3	; 0x03
    4c38:	22 82       	std	Z+2, r2	; 0x02
    4c3a:	ea 0c       	add	r14, r10
    4c3c:	fb 1c       	adc	r15, r11
    4c3e:	0c 1d       	adc	r16, r12
    4c40:	1d 1d       	adc	r17, r13
    4c42:	e4 82       	std	Z+4, r14	; 0x04
    4c44:	f5 82       	std	Z+5, r15	; 0x05
    4c46:	06 83       	std	Z+6, r16	; 0x06
    4c48:	17 83       	std	Z+7, r17	; 0x07
    4c4a:	83 e0       	ldi	r24, 0x03	; 3
    4c4c:	80 83       	st	Z, r24
    4c4e:	24 81       	ldd	r18, Z+4	; 0x04
    4c50:	35 81       	ldd	r19, Z+5	; 0x05
    4c52:	46 81       	ldd	r20, Z+6	; 0x06
    4c54:	57 81       	ldd	r21, Z+7	; 0x07
    4c56:	57 ff       	sbrs	r21, 7
    4c58:	1a c0       	rjmp	.+52     	; 0x4c8e <_fpadd_parts+0x286>
    4c5a:	c9 01       	movw	r24, r18
    4c5c:	aa 27       	eor	r26, r26
    4c5e:	97 fd       	sbrc	r25, 7
    4c60:	a0 95       	com	r26
    4c62:	ba 2f       	mov	r27, r26
    4c64:	81 70       	andi	r24, 0x01	; 1
    4c66:	90 70       	andi	r25, 0x00	; 0
    4c68:	a0 70       	andi	r26, 0x00	; 0
    4c6a:	b0 70       	andi	r27, 0x00	; 0
    4c6c:	56 95       	lsr	r21
    4c6e:	47 95       	ror	r20
    4c70:	37 95       	ror	r19
    4c72:	27 95       	ror	r18
    4c74:	82 2b       	or	r24, r18
    4c76:	93 2b       	or	r25, r19
    4c78:	a4 2b       	or	r26, r20
    4c7a:	b5 2b       	or	r27, r21
    4c7c:	84 83       	std	Z+4, r24	; 0x04
    4c7e:	95 83       	std	Z+5, r25	; 0x05
    4c80:	a6 83       	std	Z+6, r26	; 0x06
    4c82:	b7 83       	std	Z+7, r27	; 0x07
    4c84:	82 81       	ldd	r24, Z+2	; 0x02
    4c86:	93 81       	ldd	r25, Z+3	; 0x03
    4c88:	01 96       	adiw	r24, 0x01	; 1
    4c8a:	93 83       	std	Z+3, r25	; 0x03
    4c8c:	82 83       	std	Z+2, r24	; 0x02
    4c8e:	df 01       	movw	r26, r30
    4c90:	01 c0       	rjmp	.+2      	; 0x4c94 <_fpadd_parts+0x28c>
    4c92:	d2 01       	movw	r26, r4
    4c94:	cd 01       	movw	r24, r26
    4c96:	cd b7       	in	r28, 0x3d	; 61
    4c98:	de b7       	in	r29, 0x3e	; 62
    4c9a:	e2 e1       	ldi	r30, 0x12	; 18
    4c9c:	0c 94 34 2c 	jmp	0x5868	; 0x5868 <__epilogue_restores__>

00004ca0 <__subsf3>:
    4ca0:	a0 e2       	ldi	r26, 0x20	; 32
    4ca2:	b0 e0       	ldi	r27, 0x00	; 0
    4ca4:	e6 e5       	ldi	r30, 0x56	; 86
    4ca6:	f6 e2       	ldi	r31, 0x26	; 38
    4ca8:	0c 94 24 2c 	jmp	0x5848	; 0x5848 <__prologue_saves__+0x18>
    4cac:	69 83       	std	Y+1, r22	; 0x01
    4cae:	7a 83       	std	Y+2, r23	; 0x02
    4cb0:	8b 83       	std	Y+3, r24	; 0x03
    4cb2:	9c 83       	std	Y+4, r25	; 0x04
    4cb4:	2d 83       	std	Y+5, r18	; 0x05
    4cb6:	3e 83       	std	Y+6, r19	; 0x06
    4cb8:	4f 83       	std	Y+7, r20	; 0x07
    4cba:	58 87       	std	Y+8, r21	; 0x08
    4cbc:	e9 e0       	ldi	r30, 0x09	; 9
    4cbe:	ee 2e       	mov	r14, r30
    4cc0:	f1 2c       	mov	r15, r1
    4cc2:	ec 0e       	add	r14, r28
    4cc4:	fd 1e       	adc	r15, r29
    4cc6:	ce 01       	movw	r24, r28
    4cc8:	01 96       	adiw	r24, 0x01	; 1
    4cca:	b7 01       	movw	r22, r14
    4ccc:	0e 94 33 2b 	call	0x5666	; 0x5666 <__unpack_f>
    4cd0:	8e 01       	movw	r16, r28
    4cd2:	0f 5e       	subi	r16, 0xEF	; 239
    4cd4:	1f 4f       	sbci	r17, 0xFF	; 255
    4cd6:	ce 01       	movw	r24, r28
    4cd8:	05 96       	adiw	r24, 0x05	; 5
    4cda:	b8 01       	movw	r22, r16
    4cdc:	0e 94 33 2b 	call	0x5666	; 0x5666 <__unpack_f>
    4ce0:	8a 89       	ldd	r24, Y+18	; 0x12
    4ce2:	91 e0       	ldi	r25, 0x01	; 1
    4ce4:	89 27       	eor	r24, r25
    4ce6:	8a 8b       	std	Y+18, r24	; 0x12
    4ce8:	c7 01       	movw	r24, r14
    4cea:	b8 01       	movw	r22, r16
    4cec:	ae 01       	movw	r20, r28
    4cee:	47 5e       	subi	r20, 0xE7	; 231
    4cf0:	5f 4f       	sbci	r21, 0xFF	; 255
    4cf2:	0e 94 04 25 	call	0x4a08	; 0x4a08 <_fpadd_parts>
    4cf6:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <__pack_f>
    4cfa:	a0 96       	adiw	r28, 0x20	; 32
    4cfc:	e6 e0       	ldi	r30, 0x06	; 6
    4cfe:	0c 94 40 2c 	jmp	0x5880	; 0x5880 <__epilogue_restores__+0x18>

00004d02 <__addsf3>:
    4d02:	a0 e2       	ldi	r26, 0x20	; 32
    4d04:	b0 e0       	ldi	r27, 0x00	; 0
    4d06:	e7 e8       	ldi	r30, 0x87	; 135
    4d08:	f6 e2       	ldi	r31, 0x26	; 38
    4d0a:	0c 94 24 2c 	jmp	0x5848	; 0x5848 <__prologue_saves__+0x18>
    4d0e:	69 83       	std	Y+1, r22	; 0x01
    4d10:	7a 83       	std	Y+2, r23	; 0x02
    4d12:	8b 83       	std	Y+3, r24	; 0x03
    4d14:	9c 83       	std	Y+4, r25	; 0x04
    4d16:	2d 83       	std	Y+5, r18	; 0x05
    4d18:	3e 83       	std	Y+6, r19	; 0x06
    4d1a:	4f 83       	std	Y+7, r20	; 0x07
    4d1c:	58 87       	std	Y+8, r21	; 0x08
    4d1e:	f9 e0       	ldi	r31, 0x09	; 9
    4d20:	ef 2e       	mov	r14, r31
    4d22:	f1 2c       	mov	r15, r1
    4d24:	ec 0e       	add	r14, r28
    4d26:	fd 1e       	adc	r15, r29
    4d28:	ce 01       	movw	r24, r28
    4d2a:	01 96       	adiw	r24, 0x01	; 1
    4d2c:	b7 01       	movw	r22, r14
    4d2e:	0e 94 33 2b 	call	0x5666	; 0x5666 <__unpack_f>
    4d32:	8e 01       	movw	r16, r28
    4d34:	0f 5e       	subi	r16, 0xEF	; 239
    4d36:	1f 4f       	sbci	r17, 0xFF	; 255
    4d38:	ce 01       	movw	r24, r28
    4d3a:	05 96       	adiw	r24, 0x05	; 5
    4d3c:	b8 01       	movw	r22, r16
    4d3e:	0e 94 33 2b 	call	0x5666	; 0x5666 <__unpack_f>
    4d42:	c7 01       	movw	r24, r14
    4d44:	b8 01       	movw	r22, r16
    4d46:	ae 01       	movw	r20, r28
    4d48:	47 5e       	subi	r20, 0xE7	; 231
    4d4a:	5f 4f       	sbci	r21, 0xFF	; 255
    4d4c:	0e 94 04 25 	call	0x4a08	; 0x4a08 <_fpadd_parts>
    4d50:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <__pack_f>
    4d54:	a0 96       	adiw	r28, 0x20	; 32
    4d56:	e6 e0       	ldi	r30, 0x06	; 6
    4d58:	0c 94 40 2c 	jmp	0x5880	; 0x5880 <__epilogue_restores__+0x18>

00004d5c <__mulsf3>:
    4d5c:	a0 e2       	ldi	r26, 0x20	; 32
    4d5e:	b0 e0       	ldi	r27, 0x00	; 0
    4d60:	e4 eb       	ldi	r30, 0xB4	; 180
    4d62:	f6 e2       	ldi	r31, 0x26	; 38
    4d64:	0c 94 18 2c 	jmp	0x5830	; 0x5830 <__prologue_saves__>
    4d68:	69 83       	std	Y+1, r22	; 0x01
    4d6a:	7a 83       	std	Y+2, r23	; 0x02
    4d6c:	8b 83       	std	Y+3, r24	; 0x03
    4d6e:	9c 83       	std	Y+4, r25	; 0x04
    4d70:	2d 83       	std	Y+5, r18	; 0x05
    4d72:	3e 83       	std	Y+6, r19	; 0x06
    4d74:	4f 83       	std	Y+7, r20	; 0x07
    4d76:	58 87       	std	Y+8, r21	; 0x08
    4d78:	ce 01       	movw	r24, r28
    4d7a:	01 96       	adiw	r24, 0x01	; 1
    4d7c:	be 01       	movw	r22, r28
    4d7e:	67 5f       	subi	r22, 0xF7	; 247
    4d80:	7f 4f       	sbci	r23, 0xFF	; 255
    4d82:	0e 94 33 2b 	call	0x5666	; 0x5666 <__unpack_f>
    4d86:	ce 01       	movw	r24, r28
    4d88:	05 96       	adiw	r24, 0x05	; 5
    4d8a:	be 01       	movw	r22, r28
    4d8c:	6f 5e       	subi	r22, 0xEF	; 239
    4d8e:	7f 4f       	sbci	r23, 0xFF	; 255
    4d90:	0e 94 33 2b 	call	0x5666	; 0x5666 <__unpack_f>
    4d94:	99 85       	ldd	r25, Y+9	; 0x09
    4d96:	92 30       	cpi	r25, 0x02	; 2
    4d98:	88 f0       	brcs	.+34     	; 0x4dbc <__mulsf3+0x60>
    4d9a:	89 89       	ldd	r24, Y+17	; 0x11
    4d9c:	82 30       	cpi	r24, 0x02	; 2
    4d9e:	c8 f0       	brcs	.+50     	; 0x4dd2 <__mulsf3+0x76>
    4da0:	94 30       	cpi	r25, 0x04	; 4
    4da2:	19 f4       	brne	.+6      	; 0x4daa <__mulsf3+0x4e>
    4da4:	82 30       	cpi	r24, 0x02	; 2
    4da6:	51 f4       	brne	.+20     	; 0x4dbc <__mulsf3+0x60>
    4da8:	04 c0       	rjmp	.+8      	; 0x4db2 <__mulsf3+0x56>
    4daa:	84 30       	cpi	r24, 0x04	; 4
    4dac:	29 f4       	brne	.+10     	; 0x4db8 <__mulsf3+0x5c>
    4dae:	92 30       	cpi	r25, 0x02	; 2
    4db0:	81 f4       	brne	.+32     	; 0x4dd2 <__mulsf3+0x76>
    4db2:	82 e0       	ldi	r24, 0x02	; 2
    4db4:	92 e0       	ldi	r25, 0x02	; 2
    4db6:	c6 c0       	rjmp	.+396    	; 0x4f44 <__mulsf3+0x1e8>
    4db8:	92 30       	cpi	r25, 0x02	; 2
    4dba:	49 f4       	brne	.+18     	; 0x4dce <__mulsf3+0x72>
    4dbc:	20 e0       	ldi	r18, 0x00	; 0
    4dbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4dc0:	8a 89       	ldd	r24, Y+18	; 0x12
    4dc2:	98 13       	cpse	r25, r24
    4dc4:	21 e0       	ldi	r18, 0x01	; 1
    4dc6:	2a 87       	std	Y+10, r18	; 0x0a
    4dc8:	ce 01       	movw	r24, r28
    4dca:	09 96       	adiw	r24, 0x09	; 9
    4dcc:	bb c0       	rjmp	.+374    	; 0x4f44 <__mulsf3+0x1e8>
    4dce:	82 30       	cpi	r24, 0x02	; 2
    4dd0:	49 f4       	brne	.+18     	; 0x4de4 <__mulsf3+0x88>
    4dd2:	20 e0       	ldi	r18, 0x00	; 0
    4dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4dd6:	8a 89       	ldd	r24, Y+18	; 0x12
    4dd8:	98 13       	cpse	r25, r24
    4dda:	21 e0       	ldi	r18, 0x01	; 1
    4ddc:	2a 8b       	std	Y+18, r18	; 0x12
    4dde:	ce 01       	movw	r24, r28
    4de0:	41 96       	adiw	r24, 0x11	; 17
    4de2:	b0 c0       	rjmp	.+352    	; 0x4f44 <__mulsf3+0x1e8>
    4de4:	2d 84       	ldd	r2, Y+13	; 0x0d
    4de6:	3e 84       	ldd	r3, Y+14	; 0x0e
    4de8:	4f 84       	ldd	r4, Y+15	; 0x0f
    4dea:	58 88       	ldd	r5, Y+16	; 0x10
    4dec:	6d 88       	ldd	r6, Y+21	; 0x15
    4dee:	7e 88       	ldd	r7, Y+22	; 0x16
    4df0:	8f 88       	ldd	r8, Y+23	; 0x17
    4df2:	98 8c       	ldd	r9, Y+24	; 0x18
    4df4:	ee 24       	eor	r14, r14
    4df6:	ff 24       	eor	r15, r15
    4df8:	87 01       	movw	r16, r14
    4dfa:	aa 24       	eor	r10, r10
    4dfc:	bb 24       	eor	r11, r11
    4dfe:	65 01       	movw	r12, r10
    4e00:	40 e0       	ldi	r20, 0x00	; 0
    4e02:	50 e0       	ldi	r21, 0x00	; 0
    4e04:	60 e0       	ldi	r22, 0x00	; 0
    4e06:	70 e0       	ldi	r23, 0x00	; 0
    4e08:	e0 e0       	ldi	r30, 0x00	; 0
    4e0a:	f0 e0       	ldi	r31, 0x00	; 0
    4e0c:	c1 01       	movw	r24, r2
    4e0e:	81 70       	andi	r24, 0x01	; 1
    4e10:	90 70       	andi	r25, 0x00	; 0
    4e12:	89 2b       	or	r24, r25
    4e14:	e9 f0       	breq	.+58     	; 0x4e50 <__mulsf3+0xf4>
    4e16:	e6 0c       	add	r14, r6
    4e18:	f7 1c       	adc	r15, r7
    4e1a:	08 1d       	adc	r16, r8
    4e1c:	19 1d       	adc	r17, r9
    4e1e:	9a 01       	movw	r18, r20
    4e20:	ab 01       	movw	r20, r22
    4e22:	2a 0d       	add	r18, r10
    4e24:	3b 1d       	adc	r19, r11
    4e26:	4c 1d       	adc	r20, r12
    4e28:	5d 1d       	adc	r21, r13
    4e2a:	80 e0       	ldi	r24, 0x00	; 0
    4e2c:	90 e0       	ldi	r25, 0x00	; 0
    4e2e:	a0 e0       	ldi	r26, 0x00	; 0
    4e30:	b0 e0       	ldi	r27, 0x00	; 0
    4e32:	e6 14       	cp	r14, r6
    4e34:	f7 04       	cpc	r15, r7
    4e36:	08 05       	cpc	r16, r8
    4e38:	19 05       	cpc	r17, r9
    4e3a:	20 f4       	brcc	.+8      	; 0x4e44 <__mulsf3+0xe8>
    4e3c:	81 e0       	ldi	r24, 0x01	; 1
    4e3e:	90 e0       	ldi	r25, 0x00	; 0
    4e40:	a0 e0       	ldi	r26, 0x00	; 0
    4e42:	b0 e0       	ldi	r27, 0x00	; 0
    4e44:	ba 01       	movw	r22, r20
    4e46:	a9 01       	movw	r20, r18
    4e48:	48 0f       	add	r20, r24
    4e4a:	59 1f       	adc	r21, r25
    4e4c:	6a 1f       	adc	r22, r26
    4e4e:	7b 1f       	adc	r23, r27
    4e50:	aa 0c       	add	r10, r10
    4e52:	bb 1c       	adc	r11, r11
    4e54:	cc 1c       	adc	r12, r12
    4e56:	dd 1c       	adc	r13, r13
    4e58:	97 fe       	sbrs	r9, 7
    4e5a:	08 c0       	rjmp	.+16     	; 0x4e6c <__mulsf3+0x110>
    4e5c:	81 e0       	ldi	r24, 0x01	; 1
    4e5e:	90 e0       	ldi	r25, 0x00	; 0
    4e60:	a0 e0       	ldi	r26, 0x00	; 0
    4e62:	b0 e0       	ldi	r27, 0x00	; 0
    4e64:	a8 2a       	or	r10, r24
    4e66:	b9 2a       	or	r11, r25
    4e68:	ca 2a       	or	r12, r26
    4e6a:	db 2a       	or	r13, r27
    4e6c:	31 96       	adiw	r30, 0x01	; 1
    4e6e:	e0 32       	cpi	r30, 0x20	; 32
    4e70:	f1 05       	cpc	r31, r1
    4e72:	49 f0       	breq	.+18     	; 0x4e86 <__mulsf3+0x12a>
    4e74:	66 0c       	add	r6, r6
    4e76:	77 1c       	adc	r7, r7
    4e78:	88 1c       	adc	r8, r8
    4e7a:	99 1c       	adc	r9, r9
    4e7c:	56 94       	lsr	r5
    4e7e:	47 94       	ror	r4
    4e80:	37 94       	ror	r3
    4e82:	27 94       	ror	r2
    4e84:	c3 cf       	rjmp	.-122    	; 0x4e0c <__mulsf3+0xb0>
    4e86:	fa 85       	ldd	r31, Y+10	; 0x0a
    4e88:	ea 89       	ldd	r30, Y+18	; 0x12
    4e8a:	2b 89       	ldd	r18, Y+19	; 0x13
    4e8c:	3c 89       	ldd	r19, Y+20	; 0x14
    4e8e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e90:	9c 85       	ldd	r25, Y+12	; 0x0c
    4e92:	28 0f       	add	r18, r24
    4e94:	39 1f       	adc	r19, r25
    4e96:	2e 5f       	subi	r18, 0xFE	; 254
    4e98:	3f 4f       	sbci	r19, 0xFF	; 255
    4e9a:	17 c0       	rjmp	.+46     	; 0x4eca <__mulsf3+0x16e>
    4e9c:	ca 01       	movw	r24, r20
    4e9e:	81 70       	andi	r24, 0x01	; 1
    4ea0:	90 70       	andi	r25, 0x00	; 0
    4ea2:	89 2b       	or	r24, r25
    4ea4:	61 f0       	breq	.+24     	; 0x4ebe <__mulsf3+0x162>
    4ea6:	16 95       	lsr	r17
    4ea8:	07 95       	ror	r16
    4eaa:	f7 94       	ror	r15
    4eac:	e7 94       	ror	r14
    4eae:	80 e0       	ldi	r24, 0x00	; 0
    4eb0:	90 e0       	ldi	r25, 0x00	; 0
    4eb2:	a0 e0       	ldi	r26, 0x00	; 0
    4eb4:	b0 e8       	ldi	r27, 0x80	; 128
    4eb6:	e8 2a       	or	r14, r24
    4eb8:	f9 2a       	or	r15, r25
    4eba:	0a 2b       	or	r16, r26
    4ebc:	1b 2b       	or	r17, r27
    4ebe:	76 95       	lsr	r23
    4ec0:	67 95       	ror	r22
    4ec2:	57 95       	ror	r21
    4ec4:	47 95       	ror	r20
    4ec6:	2f 5f       	subi	r18, 0xFF	; 255
    4ec8:	3f 4f       	sbci	r19, 0xFF	; 255
    4eca:	77 fd       	sbrc	r23, 7
    4ecc:	e7 cf       	rjmp	.-50     	; 0x4e9c <__mulsf3+0x140>
    4ece:	0c c0       	rjmp	.+24     	; 0x4ee8 <__mulsf3+0x18c>
    4ed0:	44 0f       	add	r20, r20
    4ed2:	55 1f       	adc	r21, r21
    4ed4:	66 1f       	adc	r22, r22
    4ed6:	77 1f       	adc	r23, r23
    4ed8:	17 fd       	sbrc	r17, 7
    4eda:	41 60       	ori	r20, 0x01	; 1
    4edc:	ee 0c       	add	r14, r14
    4ede:	ff 1c       	adc	r15, r15
    4ee0:	00 1f       	adc	r16, r16
    4ee2:	11 1f       	adc	r17, r17
    4ee4:	21 50       	subi	r18, 0x01	; 1
    4ee6:	30 40       	sbci	r19, 0x00	; 0
    4ee8:	40 30       	cpi	r20, 0x00	; 0
    4eea:	90 e0       	ldi	r25, 0x00	; 0
    4eec:	59 07       	cpc	r21, r25
    4eee:	90 e0       	ldi	r25, 0x00	; 0
    4ef0:	69 07       	cpc	r22, r25
    4ef2:	90 e4       	ldi	r25, 0x40	; 64
    4ef4:	79 07       	cpc	r23, r25
    4ef6:	60 f3       	brcs	.-40     	; 0x4ed0 <__mulsf3+0x174>
    4ef8:	2b 8f       	std	Y+27, r18	; 0x1b
    4efa:	3c 8f       	std	Y+28, r19	; 0x1c
    4efc:	db 01       	movw	r26, r22
    4efe:	ca 01       	movw	r24, r20
    4f00:	8f 77       	andi	r24, 0x7F	; 127
    4f02:	90 70       	andi	r25, 0x00	; 0
    4f04:	a0 70       	andi	r26, 0x00	; 0
    4f06:	b0 70       	andi	r27, 0x00	; 0
    4f08:	80 34       	cpi	r24, 0x40	; 64
    4f0a:	91 05       	cpc	r25, r1
    4f0c:	a1 05       	cpc	r26, r1
    4f0e:	b1 05       	cpc	r27, r1
    4f10:	61 f4       	brne	.+24     	; 0x4f2a <__mulsf3+0x1ce>
    4f12:	47 fd       	sbrc	r20, 7
    4f14:	0a c0       	rjmp	.+20     	; 0x4f2a <__mulsf3+0x1ce>
    4f16:	e1 14       	cp	r14, r1
    4f18:	f1 04       	cpc	r15, r1
    4f1a:	01 05       	cpc	r16, r1
    4f1c:	11 05       	cpc	r17, r1
    4f1e:	29 f0       	breq	.+10     	; 0x4f2a <__mulsf3+0x1ce>
    4f20:	40 5c       	subi	r20, 0xC0	; 192
    4f22:	5f 4f       	sbci	r21, 0xFF	; 255
    4f24:	6f 4f       	sbci	r22, 0xFF	; 255
    4f26:	7f 4f       	sbci	r23, 0xFF	; 255
    4f28:	40 78       	andi	r20, 0x80	; 128
    4f2a:	1a 8e       	std	Y+26, r1	; 0x1a
    4f2c:	fe 17       	cp	r31, r30
    4f2e:	11 f0       	breq	.+4      	; 0x4f34 <__mulsf3+0x1d8>
    4f30:	81 e0       	ldi	r24, 0x01	; 1
    4f32:	8a 8f       	std	Y+26, r24	; 0x1a
    4f34:	4d 8f       	std	Y+29, r20	; 0x1d
    4f36:	5e 8f       	std	Y+30, r21	; 0x1e
    4f38:	6f 8f       	std	Y+31, r22	; 0x1f
    4f3a:	78 a3       	std	Y+32, r23	; 0x20
    4f3c:	83 e0       	ldi	r24, 0x03	; 3
    4f3e:	89 8f       	std	Y+25, r24	; 0x19
    4f40:	ce 01       	movw	r24, r28
    4f42:	49 96       	adiw	r24, 0x19	; 25
    4f44:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <__pack_f>
    4f48:	a0 96       	adiw	r28, 0x20	; 32
    4f4a:	e2 e1       	ldi	r30, 0x12	; 18
    4f4c:	0c 94 34 2c 	jmp	0x5868	; 0x5868 <__epilogue_restores__>

00004f50 <__divsf3>:
    4f50:	a8 e1       	ldi	r26, 0x18	; 24
    4f52:	b0 e0       	ldi	r27, 0x00	; 0
    4f54:	ee ea       	ldi	r30, 0xAE	; 174
    4f56:	f7 e2       	ldi	r31, 0x27	; 39
    4f58:	0c 94 20 2c 	jmp	0x5840	; 0x5840 <__prologue_saves__+0x10>
    4f5c:	69 83       	std	Y+1, r22	; 0x01
    4f5e:	7a 83       	std	Y+2, r23	; 0x02
    4f60:	8b 83       	std	Y+3, r24	; 0x03
    4f62:	9c 83       	std	Y+4, r25	; 0x04
    4f64:	2d 83       	std	Y+5, r18	; 0x05
    4f66:	3e 83       	std	Y+6, r19	; 0x06
    4f68:	4f 83       	std	Y+7, r20	; 0x07
    4f6a:	58 87       	std	Y+8, r21	; 0x08
    4f6c:	b9 e0       	ldi	r27, 0x09	; 9
    4f6e:	eb 2e       	mov	r14, r27
    4f70:	f1 2c       	mov	r15, r1
    4f72:	ec 0e       	add	r14, r28
    4f74:	fd 1e       	adc	r15, r29
    4f76:	ce 01       	movw	r24, r28
    4f78:	01 96       	adiw	r24, 0x01	; 1
    4f7a:	b7 01       	movw	r22, r14
    4f7c:	0e 94 33 2b 	call	0x5666	; 0x5666 <__unpack_f>
    4f80:	8e 01       	movw	r16, r28
    4f82:	0f 5e       	subi	r16, 0xEF	; 239
    4f84:	1f 4f       	sbci	r17, 0xFF	; 255
    4f86:	ce 01       	movw	r24, r28
    4f88:	05 96       	adiw	r24, 0x05	; 5
    4f8a:	b8 01       	movw	r22, r16
    4f8c:	0e 94 33 2b 	call	0x5666	; 0x5666 <__unpack_f>
    4f90:	29 85       	ldd	r18, Y+9	; 0x09
    4f92:	22 30       	cpi	r18, 0x02	; 2
    4f94:	08 f4       	brcc	.+2      	; 0x4f98 <__divsf3+0x48>
    4f96:	7e c0       	rjmp	.+252    	; 0x5094 <__divsf3+0x144>
    4f98:	39 89       	ldd	r19, Y+17	; 0x11
    4f9a:	32 30       	cpi	r19, 0x02	; 2
    4f9c:	10 f4       	brcc	.+4      	; 0x4fa2 <__divsf3+0x52>
    4f9e:	b8 01       	movw	r22, r16
    4fa0:	7c c0       	rjmp	.+248    	; 0x509a <__divsf3+0x14a>
    4fa2:	8a 85       	ldd	r24, Y+10	; 0x0a
    4fa4:	9a 89       	ldd	r25, Y+18	; 0x12
    4fa6:	89 27       	eor	r24, r25
    4fa8:	8a 87       	std	Y+10, r24	; 0x0a
    4faa:	24 30       	cpi	r18, 0x04	; 4
    4fac:	11 f0       	breq	.+4      	; 0x4fb2 <__divsf3+0x62>
    4fae:	22 30       	cpi	r18, 0x02	; 2
    4fb0:	31 f4       	brne	.+12     	; 0x4fbe <__divsf3+0x6e>
    4fb2:	23 17       	cp	r18, r19
    4fb4:	09 f0       	breq	.+2      	; 0x4fb8 <__divsf3+0x68>
    4fb6:	6e c0       	rjmp	.+220    	; 0x5094 <__divsf3+0x144>
    4fb8:	62 e0       	ldi	r22, 0x02	; 2
    4fba:	72 e0       	ldi	r23, 0x02	; 2
    4fbc:	6e c0       	rjmp	.+220    	; 0x509a <__divsf3+0x14a>
    4fbe:	34 30       	cpi	r19, 0x04	; 4
    4fc0:	39 f4       	brne	.+14     	; 0x4fd0 <__divsf3+0x80>
    4fc2:	1d 86       	std	Y+13, r1	; 0x0d
    4fc4:	1e 86       	std	Y+14, r1	; 0x0e
    4fc6:	1f 86       	std	Y+15, r1	; 0x0f
    4fc8:	18 8a       	std	Y+16, r1	; 0x10
    4fca:	1c 86       	std	Y+12, r1	; 0x0c
    4fcc:	1b 86       	std	Y+11, r1	; 0x0b
    4fce:	04 c0       	rjmp	.+8      	; 0x4fd8 <__divsf3+0x88>
    4fd0:	32 30       	cpi	r19, 0x02	; 2
    4fd2:	21 f4       	brne	.+8      	; 0x4fdc <__divsf3+0x8c>
    4fd4:	84 e0       	ldi	r24, 0x04	; 4
    4fd6:	89 87       	std	Y+9, r24	; 0x09
    4fd8:	b7 01       	movw	r22, r14
    4fda:	5f c0       	rjmp	.+190    	; 0x509a <__divsf3+0x14a>
    4fdc:	2b 85       	ldd	r18, Y+11	; 0x0b
    4fde:	3c 85       	ldd	r19, Y+12	; 0x0c
    4fe0:	8b 89       	ldd	r24, Y+19	; 0x13
    4fe2:	9c 89       	ldd	r25, Y+20	; 0x14
    4fe4:	28 1b       	sub	r18, r24
    4fe6:	39 0b       	sbc	r19, r25
    4fe8:	3c 87       	std	Y+12, r19	; 0x0c
    4fea:	2b 87       	std	Y+11, r18	; 0x0b
    4fec:	ed 84       	ldd	r14, Y+13	; 0x0d
    4fee:	fe 84       	ldd	r15, Y+14	; 0x0e
    4ff0:	0f 85       	ldd	r16, Y+15	; 0x0f
    4ff2:	18 89       	ldd	r17, Y+16	; 0x10
    4ff4:	ad 88       	ldd	r10, Y+21	; 0x15
    4ff6:	be 88       	ldd	r11, Y+22	; 0x16
    4ff8:	cf 88       	ldd	r12, Y+23	; 0x17
    4ffa:	d8 8c       	ldd	r13, Y+24	; 0x18
    4ffc:	ea 14       	cp	r14, r10
    4ffe:	fb 04       	cpc	r15, r11
    5000:	0c 05       	cpc	r16, r12
    5002:	1d 05       	cpc	r17, r13
    5004:	40 f4       	brcc	.+16     	; 0x5016 <__divsf3+0xc6>
    5006:	ee 0c       	add	r14, r14
    5008:	ff 1c       	adc	r15, r15
    500a:	00 1f       	adc	r16, r16
    500c:	11 1f       	adc	r17, r17
    500e:	21 50       	subi	r18, 0x01	; 1
    5010:	30 40       	sbci	r19, 0x00	; 0
    5012:	3c 87       	std	Y+12, r19	; 0x0c
    5014:	2b 87       	std	Y+11, r18	; 0x0b
    5016:	20 e0       	ldi	r18, 0x00	; 0
    5018:	30 e0       	ldi	r19, 0x00	; 0
    501a:	40 e0       	ldi	r20, 0x00	; 0
    501c:	50 e0       	ldi	r21, 0x00	; 0
    501e:	80 e0       	ldi	r24, 0x00	; 0
    5020:	90 e0       	ldi	r25, 0x00	; 0
    5022:	a0 e0       	ldi	r26, 0x00	; 0
    5024:	b0 e4       	ldi	r27, 0x40	; 64
    5026:	60 e0       	ldi	r22, 0x00	; 0
    5028:	70 e0       	ldi	r23, 0x00	; 0
    502a:	ea 14       	cp	r14, r10
    502c:	fb 04       	cpc	r15, r11
    502e:	0c 05       	cpc	r16, r12
    5030:	1d 05       	cpc	r17, r13
    5032:	40 f0       	brcs	.+16     	; 0x5044 <__divsf3+0xf4>
    5034:	28 2b       	or	r18, r24
    5036:	39 2b       	or	r19, r25
    5038:	4a 2b       	or	r20, r26
    503a:	5b 2b       	or	r21, r27
    503c:	ea 18       	sub	r14, r10
    503e:	fb 08       	sbc	r15, r11
    5040:	0c 09       	sbc	r16, r12
    5042:	1d 09       	sbc	r17, r13
    5044:	b6 95       	lsr	r27
    5046:	a7 95       	ror	r26
    5048:	97 95       	ror	r25
    504a:	87 95       	ror	r24
    504c:	ee 0c       	add	r14, r14
    504e:	ff 1c       	adc	r15, r15
    5050:	00 1f       	adc	r16, r16
    5052:	11 1f       	adc	r17, r17
    5054:	6f 5f       	subi	r22, 0xFF	; 255
    5056:	7f 4f       	sbci	r23, 0xFF	; 255
    5058:	6f 31       	cpi	r22, 0x1F	; 31
    505a:	71 05       	cpc	r23, r1
    505c:	31 f7       	brne	.-52     	; 0x502a <__divsf3+0xda>
    505e:	da 01       	movw	r26, r20
    5060:	c9 01       	movw	r24, r18
    5062:	8f 77       	andi	r24, 0x7F	; 127
    5064:	90 70       	andi	r25, 0x00	; 0
    5066:	a0 70       	andi	r26, 0x00	; 0
    5068:	b0 70       	andi	r27, 0x00	; 0
    506a:	80 34       	cpi	r24, 0x40	; 64
    506c:	91 05       	cpc	r25, r1
    506e:	a1 05       	cpc	r26, r1
    5070:	b1 05       	cpc	r27, r1
    5072:	61 f4       	brne	.+24     	; 0x508c <__divsf3+0x13c>
    5074:	27 fd       	sbrc	r18, 7
    5076:	0a c0       	rjmp	.+20     	; 0x508c <__divsf3+0x13c>
    5078:	e1 14       	cp	r14, r1
    507a:	f1 04       	cpc	r15, r1
    507c:	01 05       	cpc	r16, r1
    507e:	11 05       	cpc	r17, r1
    5080:	29 f0       	breq	.+10     	; 0x508c <__divsf3+0x13c>
    5082:	20 5c       	subi	r18, 0xC0	; 192
    5084:	3f 4f       	sbci	r19, 0xFF	; 255
    5086:	4f 4f       	sbci	r20, 0xFF	; 255
    5088:	5f 4f       	sbci	r21, 0xFF	; 255
    508a:	20 78       	andi	r18, 0x80	; 128
    508c:	2d 87       	std	Y+13, r18	; 0x0d
    508e:	3e 87       	std	Y+14, r19	; 0x0e
    5090:	4f 87       	std	Y+15, r20	; 0x0f
    5092:	58 8b       	std	Y+16, r21	; 0x10
    5094:	be 01       	movw	r22, r28
    5096:	67 5f       	subi	r22, 0xF7	; 247
    5098:	7f 4f       	sbci	r23, 0xFF	; 255
    509a:	cb 01       	movw	r24, r22
    509c:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <__pack_f>
    50a0:	68 96       	adiw	r28, 0x18	; 24
    50a2:	ea e0       	ldi	r30, 0x0A	; 10
    50a4:	0c 94 3c 2c 	jmp	0x5878	; 0x5878 <__epilogue_restores__+0x10>

000050a8 <__gtsf2>:
    50a8:	a8 e1       	ldi	r26, 0x18	; 24
    50aa:	b0 e0       	ldi	r27, 0x00	; 0
    50ac:	ea e5       	ldi	r30, 0x5A	; 90
    50ae:	f8 e2       	ldi	r31, 0x28	; 40
    50b0:	0c 94 24 2c 	jmp	0x5848	; 0x5848 <__prologue_saves__+0x18>
    50b4:	69 83       	std	Y+1, r22	; 0x01
    50b6:	7a 83       	std	Y+2, r23	; 0x02
    50b8:	8b 83       	std	Y+3, r24	; 0x03
    50ba:	9c 83       	std	Y+4, r25	; 0x04
    50bc:	2d 83       	std	Y+5, r18	; 0x05
    50be:	3e 83       	std	Y+6, r19	; 0x06
    50c0:	4f 83       	std	Y+7, r20	; 0x07
    50c2:	58 87       	std	Y+8, r21	; 0x08
    50c4:	89 e0       	ldi	r24, 0x09	; 9
    50c6:	e8 2e       	mov	r14, r24
    50c8:	f1 2c       	mov	r15, r1
    50ca:	ec 0e       	add	r14, r28
    50cc:	fd 1e       	adc	r15, r29
    50ce:	ce 01       	movw	r24, r28
    50d0:	01 96       	adiw	r24, 0x01	; 1
    50d2:	b7 01       	movw	r22, r14
    50d4:	0e 94 33 2b 	call	0x5666	; 0x5666 <__unpack_f>
    50d8:	8e 01       	movw	r16, r28
    50da:	0f 5e       	subi	r16, 0xEF	; 239
    50dc:	1f 4f       	sbci	r17, 0xFF	; 255
    50de:	ce 01       	movw	r24, r28
    50e0:	05 96       	adiw	r24, 0x05	; 5
    50e2:	b8 01       	movw	r22, r16
    50e4:	0e 94 33 2b 	call	0x5666	; 0x5666 <__unpack_f>
    50e8:	89 85       	ldd	r24, Y+9	; 0x09
    50ea:	82 30       	cpi	r24, 0x02	; 2
    50ec:	40 f0       	brcs	.+16     	; 0x50fe <__gtsf2+0x56>
    50ee:	89 89       	ldd	r24, Y+17	; 0x11
    50f0:	82 30       	cpi	r24, 0x02	; 2
    50f2:	28 f0       	brcs	.+10     	; 0x50fe <__gtsf2+0x56>
    50f4:	c7 01       	movw	r24, r14
    50f6:	b8 01       	movw	r22, r16
    50f8:	0e 94 ab 2b 	call	0x5756	; 0x5756 <__fpcmp_parts_f>
    50fc:	01 c0       	rjmp	.+2      	; 0x5100 <__gtsf2+0x58>
    50fe:	8f ef       	ldi	r24, 0xFF	; 255
    5100:	68 96       	adiw	r28, 0x18	; 24
    5102:	e6 e0       	ldi	r30, 0x06	; 6
    5104:	0c 94 40 2c 	jmp	0x5880	; 0x5880 <__epilogue_restores__+0x18>

00005108 <__gesf2>:
    5108:	a8 e1       	ldi	r26, 0x18	; 24
    510a:	b0 e0       	ldi	r27, 0x00	; 0
    510c:	ea e8       	ldi	r30, 0x8A	; 138
    510e:	f8 e2       	ldi	r31, 0x28	; 40
    5110:	0c 94 24 2c 	jmp	0x5848	; 0x5848 <__prologue_saves__+0x18>
    5114:	69 83       	std	Y+1, r22	; 0x01
    5116:	7a 83       	std	Y+2, r23	; 0x02
    5118:	8b 83       	std	Y+3, r24	; 0x03
    511a:	9c 83       	std	Y+4, r25	; 0x04
    511c:	2d 83       	std	Y+5, r18	; 0x05
    511e:	3e 83       	std	Y+6, r19	; 0x06
    5120:	4f 83       	std	Y+7, r20	; 0x07
    5122:	58 87       	std	Y+8, r21	; 0x08
    5124:	89 e0       	ldi	r24, 0x09	; 9
    5126:	e8 2e       	mov	r14, r24
    5128:	f1 2c       	mov	r15, r1
    512a:	ec 0e       	add	r14, r28
    512c:	fd 1e       	adc	r15, r29
    512e:	ce 01       	movw	r24, r28
    5130:	01 96       	adiw	r24, 0x01	; 1
    5132:	b7 01       	movw	r22, r14
    5134:	0e 94 33 2b 	call	0x5666	; 0x5666 <__unpack_f>
    5138:	8e 01       	movw	r16, r28
    513a:	0f 5e       	subi	r16, 0xEF	; 239
    513c:	1f 4f       	sbci	r17, 0xFF	; 255
    513e:	ce 01       	movw	r24, r28
    5140:	05 96       	adiw	r24, 0x05	; 5
    5142:	b8 01       	movw	r22, r16
    5144:	0e 94 33 2b 	call	0x5666	; 0x5666 <__unpack_f>
    5148:	89 85       	ldd	r24, Y+9	; 0x09
    514a:	82 30       	cpi	r24, 0x02	; 2
    514c:	40 f0       	brcs	.+16     	; 0x515e <__gesf2+0x56>
    514e:	89 89       	ldd	r24, Y+17	; 0x11
    5150:	82 30       	cpi	r24, 0x02	; 2
    5152:	28 f0       	brcs	.+10     	; 0x515e <__gesf2+0x56>
    5154:	c7 01       	movw	r24, r14
    5156:	b8 01       	movw	r22, r16
    5158:	0e 94 ab 2b 	call	0x5756	; 0x5756 <__fpcmp_parts_f>
    515c:	01 c0       	rjmp	.+2      	; 0x5160 <__gesf2+0x58>
    515e:	8f ef       	ldi	r24, 0xFF	; 255
    5160:	68 96       	adiw	r28, 0x18	; 24
    5162:	e6 e0       	ldi	r30, 0x06	; 6
    5164:	0c 94 40 2c 	jmp	0x5880	; 0x5880 <__epilogue_restores__+0x18>

00005168 <__ltsf2>:
    5168:	a8 e1       	ldi	r26, 0x18	; 24
    516a:	b0 e0       	ldi	r27, 0x00	; 0
    516c:	ea eb       	ldi	r30, 0xBA	; 186
    516e:	f8 e2       	ldi	r31, 0x28	; 40
    5170:	0c 94 24 2c 	jmp	0x5848	; 0x5848 <__prologue_saves__+0x18>
    5174:	69 83       	std	Y+1, r22	; 0x01
    5176:	7a 83       	std	Y+2, r23	; 0x02
    5178:	8b 83       	std	Y+3, r24	; 0x03
    517a:	9c 83       	std	Y+4, r25	; 0x04
    517c:	2d 83       	std	Y+5, r18	; 0x05
    517e:	3e 83       	std	Y+6, r19	; 0x06
    5180:	4f 83       	std	Y+7, r20	; 0x07
    5182:	58 87       	std	Y+8, r21	; 0x08
    5184:	89 e0       	ldi	r24, 0x09	; 9
    5186:	e8 2e       	mov	r14, r24
    5188:	f1 2c       	mov	r15, r1
    518a:	ec 0e       	add	r14, r28
    518c:	fd 1e       	adc	r15, r29
    518e:	ce 01       	movw	r24, r28
    5190:	01 96       	adiw	r24, 0x01	; 1
    5192:	b7 01       	movw	r22, r14
    5194:	0e 94 33 2b 	call	0x5666	; 0x5666 <__unpack_f>
    5198:	8e 01       	movw	r16, r28
    519a:	0f 5e       	subi	r16, 0xEF	; 239
    519c:	1f 4f       	sbci	r17, 0xFF	; 255
    519e:	ce 01       	movw	r24, r28
    51a0:	05 96       	adiw	r24, 0x05	; 5
    51a2:	b8 01       	movw	r22, r16
    51a4:	0e 94 33 2b 	call	0x5666	; 0x5666 <__unpack_f>
    51a8:	89 85       	ldd	r24, Y+9	; 0x09
    51aa:	82 30       	cpi	r24, 0x02	; 2
    51ac:	40 f0       	brcs	.+16     	; 0x51be <__ltsf2+0x56>
    51ae:	89 89       	ldd	r24, Y+17	; 0x11
    51b0:	82 30       	cpi	r24, 0x02	; 2
    51b2:	28 f0       	brcs	.+10     	; 0x51be <__ltsf2+0x56>
    51b4:	c7 01       	movw	r24, r14
    51b6:	b8 01       	movw	r22, r16
    51b8:	0e 94 ab 2b 	call	0x5756	; 0x5756 <__fpcmp_parts_f>
    51bc:	01 c0       	rjmp	.+2      	; 0x51c0 <__ltsf2+0x58>
    51be:	81 e0       	ldi	r24, 0x01	; 1
    51c0:	68 96       	adiw	r28, 0x18	; 24
    51c2:	e6 e0       	ldi	r30, 0x06	; 6
    51c4:	0c 94 40 2c 	jmp	0x5880	; 0x5880 <__epilogue_restores__+0x18>

000051c8 <__floatsisf>:
    51c8:	a8 e0       	ldi	r26, 0x08	; 8
    51ca:	b0 e0       	ldi	r27, 0x00	; 0
    51cc:	ea ee       	ldi	r30, 0xEA	; 234
    51ce:	f8 e2       	ldi	r31, 0x28	; 40
    51d0:	0c 94 21 2c 	jmp	0x5842	; 0x5842 <__prologue_saves__+0x12>
    51d4:	9b 01       	movw	r18, r22
    51d6:	ac 01       	movw	r20, r24
    51d8:	83 e0       	ldi	r24, 0x03	; 3
    51da:	89 83       	std	Y+1, r24	; 0x01
    51dc:	da 01       	movw	r26, r20
    51de:	c9 01       	movw	r24, r18
    51e0:	88 27       	eor	r24, r24
    51e2:	b7 fd       	sbrc	r27, 7
    51e4:	83 95       	inc	r24
    51e6:	99 27       	eor	r25, r25
    51e8:	aa 27       	eor	r26, r26
    51ea:	bb 27       	eor	r27, r27
    51ec:	b8 2e       	mov	r11, r24
    51ee:	21 15       	cp	r18, r1
    51f0:	31 05       	cpc	r19, r1
    51f2:	41 05       	cpc	r20, r1
    51f4:	51 05       	cpc	r21, r1
    51f6:	19 f4       	brne	.+6      	; 0x51fe <__floatsisf+0x36>
    51f8:	82 e0       	ldi	r24, 0x02	; 2
    51fa:	89 83       	std	Y+1, r24	; 0x01
    51fc:	3a c0       	rjmp	.+116    	; 0x5272 <__floatsisf+0xaa>
    51fe:	88 23       	and	r24, r24
    5200:	a9 f0       	breq	.+42     	; 0x522c <__floatsisf+0x64>
    5202:	20 30       	cpi	r18, 0x00	; 0
    5204:	80 e0       	ldi	r24, 0x00	; 0
    5206:	38 07       	cpc	r19, r24
    5208:	80 e0       	ldi	r24, 0x00	; 0
    520a:	48 07       	cpc	r20, r24
    520c:	80 e8       	ldi	r24, 0x80	; 128
    520e:	58 07       	cpc	r21, r24
    5210:	29 f4       	brne	.+10     	; 0x521c <__floatsisf+0x54>
    5212:	60 e0       	ldi	r22, 0x00	; 0
    5214:	70 e0       	ldi	r23, 0x00	; 0
    5216:	80 e0       	ldi	r24, 0x00	; 0
    5218:	9f ec       	ldi	r25, 0xCF	; 207
    521a:	30 c0       	rjmp	.+96     	; 0x527c <__floatsisf+0xb4>
    521c:	ee 24       	eor	r14, r14
    521e:	ff 24       	eor	r15, r15
    5220:	87 01       	movw	r16, r14
    5222:	e2 1a       	sub	r14, r18
    5224:	f3 0a       	sbc	r15, r19
    5226:	04 0b       	sbc	r16, r20
    5228:	15 0b       	sbc	r17, r21
    522a:	02 c0       	rjmp	.+4      	; 0x5230 <__floatsisf+0x68>
    522c:	79 01       	movw	r14, r18
    522e:	8a 01       	movw	r16, r20
    5230:	8e e1       	ldi	r24, 0x1E	; 30
    5232:	c8 2e       	mov	r12, r24
    5234:	d1 2c       	mov	r13, r1
    5236:	dc 82       	std	Y+4, r13	; 0x04
    5238:	cb 82       	std	Y+3, r12	; 0x03
    523a:	ed 82       	std	Y+5, r14	; 0x05
    523c:	fe 82       	std	Y+6, r15	; 0x06
    523e:	0f 83       	std	Y+7, r16	; 0x07
    5240:	18 87       	std	Y+8, r17	; 0x08
    5242:	c8 01       	movw	r24, r16
    5244:	b7 01       	movw	r22, r14
    5246:	0e 94 0f 2a 	call	0x541e	; 0x541e <__clzsi2>
    524a:	01 97       	sbiw	r24, 0x01	; 1
    524c:	18 16       	cp	r1, r24
    524e:	19 06       	cpc	r1, r25
    5250:	84 f4       	brge	.+32     	; 0x5272 <__floatsisf+0xaa>
    5252:	08 2e       	mov	r0, r24
    5254:	04 c0       	rjmp	.+8      	; 0x525e <__floatsisf+0x96>
    5256:	ee 0c       	add	r14, r14
    5258:	ff 1c       	adc	r15, r15
    525a:	00 1f       	adc	r16, r16
    525c:	11 1f       	adc	r17, r17
    525e:	0a 94       	dec	r0
    5260:	d2 f7       	brpl	.-12     	; 0x5256 <__floatsisf+0x8e>
    5262:	ed 82       	std	Y+5, r14	; 0x05
    5264:	fe 82       	std	Y+6, r15	; 0x06
    5266:	0f 83       	std	Y+7, r16	; 0x07
    5268:	18 87       	std	Y+8, r17	; 0x08
    526a:	c8 1a       	sub	r12, r24
    526c:	d9 0a       	sbc	r13, r25
    526e:	dc 82       	std	Y+4, r13	; 0x04
    5270:	cb 82       	std	Y+3, r12	; 0x03
    5272:	ba 82       	std	Y+2, r11	; 0x02
    5274:	ce 01       	movw	r24, r28
    5276:	01 96       	adiw	r24, 0x01	; 1
    5278:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <__pack_f>
    527c:	28 96       	adiw	r28, 0x08	; 8
    527e:	e9 e0       	ldi	r30, 0x09	; 9
    5280:	0c 94 3d 2c 	jmp	0x587a	; 0x587a <__epilogue_restores__+0x12>

00005284 <__fixsfsi>:
    5284:	ac e0       	ldi	r26, 0x0C	; 12
    5286:	b0 e0       	ldi	r27, 0x00	; 0
    5288:	e8 e4       	ldi	r30, 0x48	; 72
    528a:	f9 e2       	ldi	r31, 0x29	; 41
    528c:	0c 94 28 2c 	jmp	0x5850	; 0x5850 <__prologue_saves__+0x20>
    5290:	69 83       	std	Y+1, r22	; 0x01
    5292:	7a 83       	std	Y+2, r23	; 0x02
    5294:	8b 83       	std	Y+3, r24	; 0x03
    5296:	9c 83       	std	Y+4, r25	; 0x04
    5298:	ce 01       	movw	r24, r28
    529a:	01 96       	adiw	r24, 0x01	; 1
    529c:	be 01       	movw	r22, r28
    529e:	6b 5f       	subi	r22, 0xFB	; 251
    52a0:	7f 4f       	sbci	r23, 0xFF	; 255
    52a2:	0e 94 33 2b 	call	0x5666	; 0x5666 <__unpack_f>
    52a6:	8d 81       	ldd	r24, Y+5	; 0x05
    52a8:	82 30       	cpi	r24, 0x02	; 2
    52aa:	61 f1       	breq	.+88     	; 0x5304 <__fixsfsi+0x80>
    52ac:	82 30       	cpi	r24, 0x02	; 2
    52ae:	50 f1       	brcs	.+84     	; 0x5304 <__fixsfsi+0x80>
    52b0:	84 30       	cpi	r24, 0x04	; 4
    52b2:	21 f4       	brne	.+8      	; 0x52bc <__fixsfsi+0x38>
    52b4:	8e 81       	ldd	r24, Y+6	; 0x06
    52b6:	88 23       	and	r24, r24
    52b8:	51 f1       	breq	.+84     	; 0x530e <__fixsfsi+0x8a>
    52ba:	2e c0       	rjmp	.+92     	; 0x5318 <__fixsfsi+0x94>
    52bc:	2f 81       	ldd	r18, Y+7	; 0x07
    52be:	38 85       	ldd	r19, Y+8	; 0x08
    52c0:	37 fd       	sbrc	r19, 7
    52c2:	20 c0       	rjmp	.+64     	; 0x5304 <__fixsfsi+0x80>
    52c4:	6e 81       	ldd	r22, Y+6	; 0x06
    52c6:	2f 31       	cpi	r18, 0x1F	; 31
    52c8:	31 05       	cpc	r19, r1
    52ca:	1c f0       	brlt	.+6      	; 0x52d2 <__fixsfsi+0x4e>
    52cc:	66 23       	and	r22, r22
    52ce:	f9 f0       	breq	.+62     	; 0x530e <__fixsfsi+0x8a>
    52d0:	23 c0       	rjmp	.+70     	; 0x5318 <__fixsfsi+0x94>
    52d2:	8e e1       	ldi	r24, 0x1E	; 30
    52d4:	90 e0       	ldi	r25, 0x00	; 0
    52d6:	82 1b       	sub	r24, r18
    52d8:	93 0b       	sbc	r25, r19
    52da:	29 85       	ldd	r18, Y+9	; 0x09
    52dc:	3a 85       	ldd	r19, Y+10	; 0x0a
    52de:	4b 85       	ldd	r20, Y+11	; 0x0b
    52e0:	5c 85       	ldd	r21, Y+12	; 0x0c
    52e2:	04 c0       	rjmp	.+8      	; 0x52ec <__fixsfsi+0x68>
    52e4:	56 95       	lsr	r21
    52e6:	47 95       	ror	r20
    52e8:	37 95       	ror	r19
    52ea:	27 95       	ror	r18
    52ec:	8a 95       	dec	r24
    52ee:	d2 f7       	brpl	.-12     	; 0x52e4 <__fixsfsi+0x60>
    52f0:	66 23       	and	r22, r22
    52f2:	b1 f0       	breq	.+44     	; 0x5320 <__fixsfsi+0x9c>
    52f4:	50 95       	com	r21
    52f6:	40 95       	com	r20
    52f8:	30 95       	com	r19
    52fa:	21 95       	neg	r18
    52fc:	3f 4f       	sbci	r19, 0xFF	; 255
    52fe:	4f 4f       	sbci	r20, 0xFF	; 255
    5300:	5f 4f       	sbci	r21, 0xFF	; 255
    5302:	0e c0       	rjmp	.+28     	; 0x5320 <__fixsfsi+0x9c>
    5304:	20 e0       	ldi	r18, 0x00	; 0
    5306:	30 e0       	ldi	r19, 0x00	; 0
    5308:	40 e0       	ldi	r20, 0x00	; 0
    530a:	50 e0       	ldi	r21, 0x00	; 0
    530c:	09 c0       	rjmp	.+18     	; 0x5320 <__fixsfsi+0x9c>
    530e:	2f ef       	ldi	r18, 0xFF	; 255
    5310:	3f ef       	ldi	r19, 0xFF	; 255
    5312:	4f ef       	ldi	r20, 0xFF	; 255
    5314:	5f e7       	ldi	r21, 0x7F	; 127
    5316:	04 c0       	rjmp	.+8      	; 0x5320 <__fixsfsi+0x9c>
    5318:	20 e0       	ldi	r18, 0x00	; 0
    531a:	30 e0       	ldi	r19, 0x00	; 0
    531c:	40 e0       	ldi	r20, 0x00	; 0
    531e:	50 e8       	ldi	r21, 0x80	; 128
    5320:	b9 01       	movw	r22, r18
    5322:	ca 01       	movw	r24, r20
    5324:	2c 96       	adiw	r28, 0x0c	; 12
    5326:	e2 e0       	ldi	r30, 0x02	; 2
    5328:	0c 94 44 2c 	jmp	0x5888	; 0x5888 <__epilogue_restores__+0x20>

0000532c <__floatunsisf>:
    532c:	a8 e0       	ldi	r26, 0x08	; 8
    532e:	b0 e0       	ldi	r27, 0x00	; 0
    5330:	ec e9       	ldi	r30, 0x9C	; 156
    5332:	f9 e2       	ldi	r31, 0x29	; 41
    5334:	0c 94 20 2c 	jmp	0x5840	; 0x5840 <__prologue_saves__+0x10>
    5338:	7b 01       	movw	r14, r22
    533a:	8c 01       	movw	r16, r24
    533c:	61 15       	cp	r22, r1
    533e:	71 05       	cpc	r23, r1
    5340:	81 05       	cpc	r24, r1
    5342:	91 05       	cpc	r25, r1
    5344:	19 f4       	brne	.+6      	; 0x534c <__floatunsisf+0x20>
    5346:	82 e0       	ldi	r24, 0x02	; 2
    5348:	89 83       	std	Y+1, r24	; 0x01
    534a:	60 c0       	rjmp	.+192    	; 0x540c <__floatunsisf+0xe0>
    534c:	83 e0       	ldi	r24, 0x03	; 3
    534e:	89 83       	std	Y+1, r24	; 0x01
    5350:	8e e1       	ldi	r24, 0x1E	; 30
    5352:	c8 2e       	mov	r12, r24
    5354:	d1 2c       	mov	r13, r1
    5356:	dc 82       	std	Y+4, r13	; 0x04
    5358:	cb 82       	std	Y+3, r12	; 0x03
    535a:	ed 82       	std	Y+5, r14	; 0x05
    535c:	fe 82       	std	Y+6, r15	; 0x06
    535e:	0f 83       	std	Y+7, r16	; 0x07
    5360:	18 87       	std	Y+8, r17	; 0x08
    5362:	c8 01       	movw	r24, r16
    5364:	b7 01       	movw	r22, r14
    5366:	0e 94 0f 2a 	call	0x541e	; 0x541e <__clzsi2>
    536a:	fc 01       	movw	r30, r24
    536c:	31 97       	sbiw	r30, 0x01	; 1
    536e:	f7 ff       	sbrs	r31, 7
    5370:	3b c0       	rjmp	.+118    	; 0x53e8 <__floatunsisf+0xbc>
    5372:	22 27       	eor	r18, r18
    5374:	33 27       	eor	r19, r19
    5376:	2e 1b       	sub	r18, r30
    5378:	3f 0b       	sbc	r19, r31
    537a:	57 01       	movw	r10, r14
    537c:	68 01       	movw	r12, r16
    537e:	02 2e       	mov	r0, r18
    5380:	04 c0       	rjmp	.+8      	; 0x538a <__floatunsisf+0x5e>
    5382:	d6 94       	lsr	r13
    5384:	c7 94       	ror	r12
    5386:	b7 94       	ror	r11
    5388:	a7 94       	ror	r10
    538a:	0a 94       	dec	r0
    538c:	d2 f7       	brpl	.-12     	; 0x5382 <__floatunsisf+0x56>
    538e:	40 e0       	ldi	r20, 0x00	; 0
    5390:	50 e0       	ldi	r21, 0x00	; 0
    5392:	60 e0       	ldi	r22, 0x00	; 0
    5394:	70 e0       	ldi	r23, 0x00	; 0
    5396:	81 e0       	ldi	r24, 0x01	; 1
    5398:	90 e0       	ldi	r25, 0x00	; 0
    539a:	a0 e0       	ldi	r26, 0x00	; 0
    539c:	b0 e0       	ldi	r27, 0x00	; 0
    539e:	04 c0       	rjmp	.+8      	; 0x53a8 <__floatunsisf+0x7c>
    53a0:	88 0f       	add	r24, r24
    53a2:	99 1f       	adc	r25, r25
    53a4:	aa 1f       	adc	r26, r26
    53a6:	bb 1f       	adc	r27, r27
    53a8:	2a 95       	dec	r18
    53aa:	d2 f7       	brpl	.-12     	; 0x53a0 <__floatunsisf+0x74>
    53ac:	01 97       	sbiw	r24, 0x01	; 1
    53ae:	a1 09       	sbc	r26, r1
    53b0:	b1 09       	sbc	r27, r1
    53b2:	8e 21       	and	r24, r14
    53b4:	9f 21       	and	r25, r15
    53b6:	a0 23       	and	r26, r16
    53b8:	b1 23       	and	r27, r17
    53ba:	00 97       	sbiw	r24, 0x00	; 0
    53bc:	a1 05       	cpc	r26, r1
    53be:	b1 05       	cpc	r27, r1
    53c0:	21 f0       	breq	.+8      	; 0x53ca <__floatunsisf+0x9e>
    53c2:	41 e0       	ldi	r20, 0x01	; 1
    53c4:	50 e0       	ldi	r21, 0x00	; 0
    53c6:	60 e0       	ldi	r22, 0x00	; 0
    53c8:	70 e0       	ldi	r23, 0x00	; 0
    53ca:	4a 29       	or	r20, r10
    53cc:	5b 29       	or	r21, r11
    53ce:	6c 29       	or	r22, r12
    53d0:	7d 29       	or	r23, r13
    53d2:	4d 83       	std	Y+5, r20	; 0x05
    53d4:	5e 83       	std	Y+6, r21	; 0x06
    53d6:	6f 83       	std	Y+7, r22	; 0x07
    53d8:	78 87       	std	Y+8, r23	; 0x08
    53da:	8e e1       	ldi	r24, 0x1E	; 30
    53dc:	90 e0       	ldi	r25, 0x00	; 0
    53de:	8e 1b       	sub	r24, r30
    53e0:	9f 0b       	sbc	r25, r31
    53e2:	9c 83       	std	Y+4, r25	; 0x04
    53e4:	8b 83       	std	Y+3, r24	; 0x03
    53e6:	12 c0       	rjmp	.+36     	; 0x540c <__floatunsisf+0xe0>
    53e8:	30 97       	sbiw	r30, 0x00	; 0
    53ea:	81 f0       	breq	.+32     	; 0x540c <__floatunsisf+0xe0>
    53ec:	0e 2e       	mov	r0, r30
    53ee:	04 c0       	rjmp	.+8      	; 0x53f8 <__floatunsisf+0xcc>
    53f0:	ee 0c       	add	r14, r14
    53f2:	ff 1c       	adc	r15, r15
    53f4:	00 1f       	adc	r16, r16
    53f6:	11 1f       	adc	r17, r17
    53f8:	0a 94       	dec	r0
    53fa:	d2 f7       	brpl	.-12     	; 0x53f0 <__floatunsisf+0xc4>
    53fc:	ed 82       	std	Y+5, r14	; 0x05
    53fe:	fe 82       	std	Y+6, r15	; 0x06
    5400:	0f 83       	std	Y+7, r16	; 0x07
    5402:	18 87       	std	Y+8, r17	; 0x08
    5404:	ce 1a       	sub	r12, r30
    5406:	df 0a       	sbc	r13, r31
    5408:	dc 82       	std	Y+4, r13	; 0x04
    540a:	cb 82       	std	Y+3, r12	; 0x03
    540c:	1a 82       	std	Y+2, r1	; 0x02
    540e:	ce 01       	movw	r24, r28
    5410:	01 96       	adiw	r24, 0x01	; 1
    5412:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <__pack_f>
    5416:	28 96       	adiw	r28, 0x08	; 8
    5418:	ea e0       	ldi	r30, 0x0A	; 10
    541a:	0c 94 3c 2c 	jmp	0x5878	; 0x5878 <__epilogue_restores__+0x10>

0000541e <__clzsi2>:
    541e:	ef 92       	push	r14
    5420:	ff 92       	push	r15
    5422:	0f 93       	push	r16
    5424:	1f 93       	push	r17
    5426:	7b 01       	movw	r14, r22
    5428:	8c 01       	movw	r16, r24
    542a:	80 e0       	ldi	r24, 0x00	; 0
    542c:	e8 16       	cp	r14, r24
    542e:	80 e0       	ldi	r24, 0x00	; 0
    5430:	f8 06       	cpc	r15, r24
    5432:	81 e0       	ldi	r24, 0x01	; 1
    5434:	08 07       	cpc	r16, r24
    5436:	80 e0       	ldi	r24, 0x00	; 0
    5438:	18 07       	cpc	r17, r24
    543a:	88 f4       	brcc	.+34     	; 0x545e <__clzsi2+0x40>
    543c:	8f ef       	ldi	r24, 0xFF	; 255
    543e:	e8 16       	cp	r14, r24
    5440:	f1 04       	cpc	r15, r1
    5442:	01 05       	cpc	r16, r1
    5444:	11 05       	cpc	r17, r1
    5446:	31 f0       	breq	.+12     	; 0x5454 <__clzsi2+0x36>
    5448:	28 f0       	brcs	.+10     	; 0x5454 <__clzsi2+0x36>
    544a:	88 e0       	ldi	r24, 0x08	; 8
    544c:	90 e0       	ldi	r25, 0x00	; 0
    544e:	a0 e0       	ldi	r26, 0x00	; 0
    5450:	b0 e0       	ldi	r27, 0x00	; 0
    5452:	17 c0       	rjmp	.+46     	; 0x5482 <__clzsi2+0x64>
    5454:	80 e0       	ldi	r24, 0x00	; 0
    5456:	90 e0       	ldi	r25, 0x00	; 0
    5458:	a0 e0       	ldi	r26, 0x00	; 0
    545a:	b0 e0       	ldi	r27, 0x00	; 0
    545c:	12 c0       	rjmp	.+36     	; 0x5482 <__clzsi2+0x64>
    545e:	80 e0       	ldi	r24, 0x00	; 0
    5460:	e8 16       	cp	r14, r24
    5462:	80 e0       	ldi	r24, 0x00	; 0
    5464:	f8 06       	cpc	r15, r24
    5466:	80 e0       	ldi	r24, 0x00	; 0
    5468:	08 07       	cpc	r16, r24
    546a:	81 e0       	ldi	r24, 0x01	; 1
    546c:	18 07       	cpc	r17, r24
    546e:	28 f0       	brcs	.+10     	; 0x547a <__clzsi2+0x5c>
    5470:	88 e1       	ldi	r24, 0x18	; 24
    5472:	90 e0       	ldi	r25, 0x00	; 0
    5474:	a0 e0       	ldi	r26, 0x00	; 0
    5476:	b0 e0       	ldi	r27, 0x00	; 0
    5478:	04 c0       	rjmp	.+8      	; 0x5482 <__clzsi2+0x64>
    547a:	80 e1       	ldi	r24, 0x10	; 16
    547c:	90 e0       	ldi	r25, 0x00	; 0
    547e:	a0 e0       	ldi	r26, 0x00	; 0
    5480:	b0 e0       	ldi	r27, 0x00	; 0
    5482:	20 e2       	ldi	r18, 0x20	; 32
    5484:	30 e0       	ldi	r19, 0x00	; 0
    5486:	40 e0       	ldi	r20, 0x00	; 0
    5488:	50 e0       	ldi	r21, 0x00	; 0
    548a:	28 1b       	sub	r18, r24
    548c:	39 0b       	sbc	r19, r25
    548e:	4a 0b       	sbc	r20, r26
    5490:	5b 0b       	sbc	r21, r27
    5492:	04 c0       	rjmp	.+8      	; 0x549c <__clzsi2+0x7e>
    5494:	16 95       	lsr	r17
    5496:	07 95       	ror	r16
    5498:	f7 94       	ror	r15
    549a:	e7 94       	ror	r14
    549c:	8a 95       	dec	r24
    549e:	d2 f7       	brpl	.-12     	; 0x5494 <__clzsi2+0x76>
    54a0:	f7 01       	movw	r30, r14
    54a2:	e6 5f       	subi	r30, 0xF6	; 246
    54a4:	fd 4f       	sbci	r31, 0xFD	; 253
    54a6:	80 81       	ld	r24, Z
    54a8:	28 1b       	sub	r18, r24
    54aa:	31 09       	sbc	r19, r1
    54ac:	41 09       	sbc	r20, r1
    54ae:	51 09       	sbc	r21, r1
    54b0:	c9 01       	movw	r24, r18
    54b2:	1f 91       	pop	r17
    54b4:	0f 91       	pop	r16
    54b6:	ff 90       	pop	r15
    54b8:	ef 90       	pop	r14
    54ba:	08 95       	ret

000054bc <__pack_f>:
    54bc:	df 92       	push	r13
    54be:	ef 92       	push	r14
    54c0:	ff 92       	push	r15
    54c2:	0f 93       	push	r16
    54c4:	1f 93       	push	r17
    54c6:	fc 01       	movw	r30, r24
    54c8:	e4 80       	ldd	r14, Z+4	; 0x04
    54ca:	f5 80       	ldd	r15, Z+5	; 0x05
    54cc:	06 81       	ldd	r16, Z+6	; 0x06
    54ce:	17 81       	ldd	r17, Z+7	; 0x07
    54d0:	d1 80       	ldd	r13, Z+1	; 0x01
    54d2:	80 81       	ld	r24, Z
    54d4:	82 30       	cpi	r24, 0x02	; 2
    54d6:	48 f4       	brcc	.+18     	; 0x54ea <__pack_f+0x2e>
    54d8:	80 e0       	ldi	r24, 0x00	; 0
    54da:	90 e0       	ldi	r25, 0x00	; 0
    54dc:	a0 e1       	ldi	r26, 0x10	; 16
    54de:	b0 e0       	ldi	r27, 0x00	; 0
    54e0:	e8 2a       	or	r14, r24
    54e2:	f9 2a       	or	r15, r25
    54e4:	0a 2b       	or	r16, r26
    54e6:	1b 2b       	or	r17, r27
    54e8:	a5 c0       	rjmp	.+330    	; 0x5634 <__pack_f+0x178>
    54ea:	84 30       	cpi	r24, 0x04	; 4
    54ec:	09 f4       	brne	.+2      	; 0x54f0 <__pack_f+0x34>
    54ee:	9f c0       	rjmp	.+318    	; 0x562e <__pack_f+0x172>
    54f0:	82 30       	cpi	r24, 0x02	; 2
    54f2:	21 f4       	brne	.+8      	; 0x54fc <__pack_f+0x40>
    54f4:	ee 24       	eor	r14, r14
    54f6:	ff 24       	eor	r15, r15
    54f8:	87 01       	movw	r16, r14
    54fa:	05 c0       	rjmp	.+10     	; 0x5506 <__pack_f+0x4a>
    54fc:	e1 14       	cp	r14, r1
    54fe:	f1 04       	cpc	r15, r1
    5500:	01 05       	cpc	r16, r1
    5502:	11 05       	cpc	r17, r1
    5504:	19 f4       	brne	.+6      	; 0x550c <__pack_f+0x50>
    5506:	e0 e0       	ldi	r30, 0x00	; 0
    5508:	f0 e0       	ldi	r31, 0x00	; 0
    550a:	96 c0       	rjmp	.+300    	; 0x5638 <__pack_f+0x17c>
    550c:	62 81       	ldd	r22, Z+2	; 0x02
    550e:	73 81       	ldd	r23, Z+3	; 0x03
    5510:	9f ef       	ldi	r25, 0xFF	; 255
    5512:	62 38       	cpi	r22, 0x82	; 130
    5514:	79 07       	cpc	r23, r25
    5516:	0c f0       	brlt	.+2      	; 0x551a <__pack_f+0x5e>
    5518:	5b c0       	rjmp	.+182    	; 0x55d0 <__pack_f+0x114>
    551a:	22 e8       	ldi	r18, 0x82	; 130
    551c:	3f ef       	ldi	r19, 0xFF	; 255
    551e:	26 1b       	sub	r18, r22
    5520:	37 0b       	sbc	r19, r23
    5522:	2a 31       	cpi	r18, 0x1A	; 26
    5524:	31 05       	cpc	r19, r1
    5526:	2c f0       	brlt	.+10     	; 0x5532 <__pack_f+0x76>
    5528:	20 e0       	ldi	r18, 0x00	; 0
    552a:	30 e0       	ldi	r19, 0x00	; 0
    552c:	40 e0       	ldi	r20, 0x00	; 0
    552e:	50 e0       	ldi	r21, 0x00	; 0
    5530:	2a c0       	rjmp	.+84     	; 0x5586 <__pack_f+0xca>
    5532:	b8 01       	movw	r22, r16
    5534:	a7 01       	movw	r20, r14
    5536:	02 2e       	mov	r0, r18
    5538:	04 c0       	rjmp	.+8      	; 0x5542 <__pack_f+0x86>
    553a:	76 95       	lsr	r23
    553c:	67 95       	ror	r22
    553e:	57 95       	ror	r21
    5540:	47 95       	ror	r20
    5542:	0a 94       	dec	r0
    5544:	d2 f7       	brpl	.-12     	; 0x553a <__pack_f+0x7e>
    5546:	81 e0       	ldi	r24, 0x01	; 1
    5548:	90 e0       	ldi	r25, 0x00	; 0
    554a:	a0 e0       	ldi	r26, 0x00	; 0
    554c:	b0 e0       	ldi	r27, 0x00	; 0
    554e:	04 c0       	rjmp	.+8      	; 0x5558 <__pack_f+0x9c>
    5550:	88 0f       	add	r24, r24
    5552:	99 1f       	adc	r25, r25
    5554:	aa 1f       	adc	r26, r26
    5556:	bb 1f       	adc	r27, r27
    5558:	2a 95       	dec	r18
    555a:	d2 f7       	brpl	.-12     	; 0x5550 <__pack_f+0x94>
    555c:	01 97       	sbiw	r24, 0x01	; 1
    555e:	a1 09       	sbc	r26, r1
    5560:	b1 09       	sbc	r27, r1
    5562:	8e 21       	and	r24, r14
    5564:	9f 21       	and	r25, r15
    5566:	a0 23       	and	r26, r16
    5568:	b1 23       	and	r27, r17
    556a:	00 97       	sbiw	r24, 0x00	; 0
    556c:	a1 05       	cpc	r26, r1
    556e:	b1 05       	cpc	r27, r1
    5570:	21 f0       	breq	.+8      	; 0x557a <__pack_f+0xbe>
    5572:	81 e0       	ldi	r24, 0x01	; 1
    5574:	90 e0       	ldi	r25, 0x00	; 0
    5576:	a0 e0       	ldi	r26, 0x00	; 0
    5578:	b0 e0       	ldi	r27, 0x00	; 0
    557a:	9a 01       	movw	r18, r20
    557c:	ab 01       	movw	r20, r22
    557e:	28 2b       	or	r18, r24
    5580:	39 2b       	or	r19, r25
    5582:	4a 2b       	or	r20, r26
    5584:	5b 2b       	or	r21, r27
    5586:	da 01       	movw	r26, r20
    5588:	c9 01       	movw	r24, r18
    558a:	8f 77       	andi	r24, 0x7F	; 127
    558c:	90 70       	andi	r25, 0x00	; 0
    558e:	a0 70       	andi	r26, 0x00	; 0
    5590:	b0 70       	andi	r27, 0x00	; 0
    5592:	80 34       	cpi	r24, 0x40	; 64
    5594:	91 05       	cpc	r25, r1
    5596:	a1 05       	cpc	r26, r1
    5598:	b1 05       	cpc	r27, r1
    559a:	39 f4       	brne	.+14     	; 0x55aa <__pack_f+0xee>
    559c:	27 ff       	sbrs	r18, 7
    559e:	09 c0       	rjmp	.+18     	; 0x55b2 <__pack_f+0xf6>
    55a0:	20 5c       	subi	r18, 0xC0	; 192
    55a2:	3f 4f       	sbci	r19, 0xFF	; 255
    55a4:	4f 4f       	sbci	r20, 0xFF	; 255
    55a6:	5f 4f       	sbci	r21, 0xFF	; 255
    55a8:	04 c0       	rjmp	.+8      	; 0x55b2 <__pack_f+0xf6>
    55aa:	21 5c       	subi	r18, 0xC1	; 193
    55ac:	3f 4f       	sbci	r19, 0xFF	; 255
    55ae:	4f 4f       	sbci	r20, 0xFF	; 255
    55b0:	5f 4f       	sbci	r21, 0xFF	; 255
    55b2:	e0 e0       	ldi	r30, 0x00	; 0
    55b4:	f0 e0       	ldi	r31, 0x00	; 0
    55b6:	20 30       	cpi	r18, 0x00	; 0
    55b8:	a0 e0       	ldi	r26, 0x00	; 0
    55ba:	3a 07       	cpc	r19, r26
    55bc:	a0 e0       	ldi	r26, 0x00	; 0
    55be:	4a 07       	cpc	r20, r26
    55c0:	a0 e4       	ldi	r26, 0x40	; 64
    55c2:	5a 07       	cpc	r21, r26
    55c4:	10 f0       	brcs	.+4      	; 0x55ca <__pack_f+0x10e>
    55c6:	e1 e0       	ldi	r30, 0x01	; 1
    55c8:	f0 e0       	ldi	r31, 0x00	; 0
    55ca:	79 01       	movw	r14, r18
    55cc:	8a 01       	movw	r16, r20
    55ce:	27 c0       	rjmp	.+78     	; 0x561e <__pack_f+0x162>
    55d0:	60 38       	cpi	r22, 0x80	; 128
    55d2:	71 05       	cpc	r23, r1
    55d4:	64 f5       	brge	.+88     	; 0x562e <__pack_f+0x172>
    55d6:	fb 01       	movw	r30, r22
    55d8:	e1 58       	subi	r30, 0x81	; 129
    55da:	ff 4f       	sbci	r31, 0xFF	; 255
    55dc:	d8 01       	movw	r26, r16
    55de:	c7 01       	movw	r24, r14
    55e0:	8f 77       	andi	r24, 0x7F	; 127
    55e2:	90 70       	andi	r25, 0x00	; 0
    55e4:	a0 70       	andi	r26, 0x00	; 0
    55e6:	b0 70       	andi	r27, 0x00	; 0
    55e8:	80 34       	cpi	r24, 0x40	; 64
    55ea:	91 05       	cpc	r25, r1
    55ec:	a1 05       	cpc	r26, r1
    55ee:	b1 05       	cpc	r27, r1
    55f0:	39 f4       	brne	.+14     	; 0x5600 <__pack_f+0x144>
    55f2:	e7 fe       	sbrs	r14, 7
    55f4:	0d c0       	rjmp	.+26     	; 0x5610 <__pack_f+0x154>
    55f6:	80 e4       	ldi	r24, 0x40	; 64
    55f8:	90 e0       	ldi	r25, 0x00	; 0
    55fa:	a0 e0       	ldi	r26, 0x00	; 0
    55fc:	b0 e0       	ldi	r27, 0x00	; 0
    55fe:	04 c0       	rjmp	.+8      	; 0x5608 <__pack_f+0x14c>
    5600:	8f e3       	ldi	r24, 0x3F	; 63
    5602:	90 e0       	ldi	r25, 0x00	; 0
    5604:	a0 e0       	ldi	r26, 0x00	; 0
    5606:	b0 e0       	ldi	r27, 0x00	; 0
    5608:	e8 0e       	add	r14, r24
    560a:	f9 1e       	adc	r15, r25
    560c:	0a 1f       	adc	r16, r26
    560e:	1b 1f       	adc	r17, r27
    5610:	17 ff       	sbrs	r17, 7
    5612:	05 c0       	rjmp	.+10     	; 0x561e <__pack_f+0x162>
    5614:	16 95       	lsr	r17
    5616:	07 95       	ror	r16
    5618:	f7 94       	ror	r15
    561a:	e7 94       	ror	r14
    561c:	31 96       	adiw	r30, 0x01	; 1
    561e:	87 e0       	ldi	r24, 0x07	; 7
    5620:	16 95       	lsr	r17
    5622:	07 95       	ror	r16
    5624:	f7 94       	ror	r15
    5626:	e7 94       	ror	r14
    5628:	8a 95       	dec	r24
    562a:	d1 f7       	brne	.-12     	; 0x5620 <__pack_f+0x164>
    562c:	05 c0       	rjmp	.+10     	; 0x5638 <__pack_f+0x17c>
    562e:	ee 24       	eor	r14, r14
    5630:	ff 24       	eor	r15, r15
    5632:	87 01       	movw	r16, r14
    5634:	ef ef       	ldi	r30, 0xFF	; 255
    5636:	f0 e0       	ldi	r31, 0x00	; 0
    5638:	6e 2f       	mov	r22, r30
    563a:	67 95       	ror	r22
    563c:	66 27       	eor	r22, r22
    563e:	67 95       	ror	r22
    5640:	90 2f       	mov	r25, r16
    5642:	9f 77       	andi	r25, 0x7F	; 127
    5644:	d7 94       	ror	r13
    5646:	dd 24       	eor	r13, r13
    5648:	d7 94       	ror	r13
    564a:	8e 2f       	mov	r24, r30
    564c:	86 95       	lsr	r24
    564e:	49 2f       	mov	r20, r25
    5650:	46 2b       	or	r20, r22
    5652:	58 2f       	mov	r21, r24
    5654:	5d 29       	or	r21, r13
    5656:	b7 01       	movw	r22, r14
    5658:	ca 01       	movw	r24, r20
    565a:	1f 91       	pop	r17
    565c:	0f 91       	pop	r16
    565e:	ff 90       	pop	r15
    5660:	ef 90       	pop	r14
    5662:	df 90       	pop	r13
    5664:	08 95       	ret

00005666 <__unpack_f>:
    5666:	fc 01       	movw	r30, r24
    5668:	db 01       	movw	r26, r22
    566a:	40 81       	ld	r20, Z
    566c:	51 81       	ldd	r21, Z+1	; 0x01
    566e:	22 81       	ldd	r18, Z+2	; 0x02
    5670:	62 2f       	mov	r22, r18
    5672:	6f 77       	andi	r22, 0x7F	; 127
    5674:	70 e0       	ldi	r23, 0x00	; 0
    5676:	22 1f       	adc	r18, r18
    5678:	22 27       	eor	r18, r18
    567a:	22 1f       	adc	r18, r18
    567c:	93 81       	ldd	r25, Z+3	; 0x03
    567e:	89 2f       	mov	r24, r25
    5680:	88 0f       	add	r24, r24
    5682:	82 2b       	or	r24, r18
    5684:	28 2f       	mov	r18, r24
    5686:	30 e0       	ldi	r19, 0x00	; 0
    5688:	99 1f       	adc	r25, r25
    568a:	99 27       	eor	r25, r25
    568c:	99 1f       	adc	r25, r25
    568e:	11 96       	adiw	r26, 0x01	; 1
    5690:	9c 93       	st	X, r25
    5692:	11 97       	sbiw	r26, 0x01	; 1
    5694:	21 15       	cp	r18, r1
    5696:	31 05       	cpc	r19, r1
    5698:	a9 f5       	brne	.+106    	; 0x5704 <__unpack_f+0x9e>
    569a:	41 15       	cp	r20, r1
    569c:	51 05       	cpc	r21, r1
    569e:	61 05       	cpc	r22, r1
    56a0:	71 05       	cpc	r23, r1
    56a2:	11 f4       	brne	.+4      	; 0x56a8 <__unpack_f+0x42>
    56a4:	82 e0       	ldi	r24, 0x02	; 2
    56a6:	37 c0       	rjmp	.+110    	; 0x5716 <__unpack_f+0xb0>
    56a8:	82 e8       	ldi	r24, 0x82	; 130
    56aa:	9f ef       	ldi	r25, 0xFF	; 255
    56ac:	13 96       	adiw	r26, 0x03	; 3
    56ae:	9c 93       	st	X, r25
    56b0:	8e 93       	st	-X, r24
    56b2:	12 97       	sbiw	r26, 0x02	; 2
    56b4:	9a 01       	movw	r18, r20
    56b6:	ab 01       	movw	r20, r22
    56b8:	67 e0       	ldi	r22, 0x07	; 7
    56ba:	22 0f       	add	r18, r18
    56bc:	33 1f       	adc	r19, r19
    56be:	44 1f       	adc	r20, r20
    56c0:	55 1f       	adc	r21, r21
    56c2:	6a 95       	dec	r22
    56c4:	d1 f7       	brne	.-12     	; 0x56ba <__unpack_f+0x54>
    56c6:	83 e0       	ldi	r24, 0x03	; 3
    56c8:	8c 93       	st	X, r24
    56ca:	0d c0       	rjmp	.+26     	; 0x56e6 <__unpack_f+0x80>
    56cc:	22 0f       	add	r18, r18
    56ce:	33 1f       	adc	r19, r19
    56d0:	44 1f       	adc	r20, r20
    56d2:	55 1f       	adc	r21, r21
    56d4:	12 96       	adiw	r26, 0x02	; 2
    56d6:	8d 91       	ld	r24, X+
    56d8:	9c 91       	ld	r25, X
    56da:	13 97       	sbiw	r26, 0x03	; 3
    56dc:	01 97       	sbiw	r24, 0x01	; 1
    56de:	13 96       	adiw	r26, 0x03	; 3
    56e0:	9c 93       	st	X, r25
    56e2:	8e 93       	st	-X, r24
    56e4:	12 97       	sbiw	r26, 0x02	; 2
    56e6:	20 30       	cpi	r18, 0x00	; 0
    56e8:	80 e0       	ldi	r24, 0x00	; 0
    56ea:	38 07       	cpc	r19, r24
    56ec:	80 e0       	ldi	r24, 0x00	; 0
    56ee:	48 07       	cpc	r20, r24
    56f0:	80 e4       	ldi	r24, 0x40	; 64
    56f2:	58 07       	cpc	r21, r24
    56f4:	58 f3       	brcs	.-42     	; 0x56cc <__unpack_f+0x66>
    56f6:	14 96       	adiw	r26, 0x04	; 4
    56f8:	2d 93       	st	X+, r18
    56fa:	3d 93       	st	X+, r19
    56fc:	4d 93       	st	X+, r20
    56fe:	5c 93       	st	X, r21
    5700:	17 97       	sbiw	r26, 0x07	; 7
    5702:	08 95       	ret
    5704:	2f 3f       	cpi	r18, 0xFF	; 255
    5706:	31 05       	cpc	r19, r1
    5708:	79 f4       	brne	.+30     	; 0x5728 <__unpack_f+0xc2>
    570a:	41 15       	cp	r20, r1
    570c:	51 05       	cpc	r21, r1
    570e:	61 05       	cpc	r22, r1
    5710:	71 05       	cpc	r23, r1
    5712:	19 f4       	brne	.+6      	; 0x571a <__unpack_f+0xb4>
    5714:	84 e0       	ldi	r24, 0x04	; 4
    5716:	8c 93       	st	X, r24
    5718:	08 95       	ret
    571a:	64 ff       	sbrs	r22, 4
    571c:	03 c0       	rjmp	.+6      	; 0x5724 <__unpack_f+0xbe>
    571e:	81 e0       	ldi	r24, 0x01	; 1
    5720:	8c 93       	st	X, r24
    5722:	12 c0       	rjmp	.+36     	; 0x5748 <__unpack_f+0xe2>
    5724:	1c 92       	st	X, r1
    5726:	10 c0       	rjmp	.+32     	; 0x5748 <__unpack_f+0xe2>
    5728:	2f 57       	subi	r18, 0x7F	; 127
    572a:	30 40       	sbci	r19, 0x00	; 0
    572c:	13 96       	adiw	r26, 0x03	; 3
    572e:	3c 93       	st	X, r19
    5730:	2e 93       	st	-X, r18
    5732:	12 97       	sbiw	r26, 0x02	; 2
    5734:	83 e0       	ldi	r24, 0x03	; 3
    5736:	8c 93       	st	X, r24
    5738:	87 e0       	ldi	r24, 0x07	; 7
    573a:	44 0f       	add	r20, r20
    573c:	55 1f       	adc	r21, r21
    573e:	66 1f       	adc	r22, r22
    5740:	77 1f       	adc	r23, r23
    5742:	8a 95       	dec	r24
    5744:	d1 f7       	brne	.-12     	; 0x573a <__unpack_f+0xd4>
    5746:	70 64       	ori	r23, 0x40	; 64
    5748:	14 96       	adiw	r26, 0x04	; 4
    574a:	4d 93       	st	X+, r20
    574c:	5d 93       	st	X+, r21
    574e:	6d 93       	st	X+, r22
    5750:	7c 93       	st	X, r23
    5752:	17 97       	sbiw	r26, 0x07	; 7
    5754:	08 95       	ret

00005756 <__fpcmp_parts_f>:
    5756:	1f 93       	push	r17
    5758:	dc 01       	movw	r26, r24
    575a:	fb 01       	movw	r30, r22
    575c:	9c 91       	ld	r25, X
    575e:	92 30       	cpi	r25, 0x02	; 2
    5760:	08 f4       	brcc	.+2      	; 0x5764 <__fpcmp_parts_f+0xe>
    5762:	47 c0       	rjmp	.+142    	; 0x57f2 <__fpcmp_parts_f+0x9c>
    5764:	80 81       	ld	r24, Z
    5766:	82 30       	cpi	r24, 0x02	; 2
    5768:	08 f4       	brcc	.+2      	; 0x576c <__fpcmp_parts_f+0x16>
    576a:	43 c0       	rjmp	.+134    	; 0x57f2 <__fpcmp_parts_f+0x9c>
    576c:	94 30       	cpi	r25, 0x04	; 4
    576e:	51 f4       	brne	.+20     	; 0x5784 <__fpcmp_parts_f+0x2e>
    5770:	11 96       	adiw	r26, 0x01	; 1
    5772:	1c 91       	ld	r17, X
    5774:	84 30       	cpi	r24, 0x04	; 4
    5776:	99 f5       	brne	.+102    	; 0x57de <__fpcmp_parts_f+0x88>
    5778:	81 81       	ldd	r24, Z+1	; 0x01
    577a:	68 2f       	mov	r22, r24
    577c:	70 e0       	ldi	r23, 0x00	; 0
    577e:	61 1b       	sub	r22, r17
    5780:	71 09       	sbc	r23, r1
    5782:	3f c0       	rjmp	.+126    	; 0x5802 <__fpcmp_parts_f+0xac>
    5784:	84 30       	cpi	r24, 0x04	; 4
    5786:	21 f0       	breq	.+8      	; 0x5790 <__fpcmp_parts_f+0x3a>
    5788:	92 30       	cpi	r25, 0x02	; 2
    578a:	31 f4       	brne	.+12     	; 0x5798 <__fpcmp_parts_f+0x42>
    578c:	82 30       	cpi	r24, 0x02	; 2
    578e:	b9 f1       	breq	.+110    	; 0x57fe <__fpcmp_parts_f+0xa8>
    5790:	81 81       	ldd	r24, Z+1	; 0x01
    5792:	88 23       	and	r24, r24
    5794:	89 f1       	breq	.+98     	; 0x57f8 <__fpcmp_parts_f+0xa2>
    5796:	2d c0       	rjmp	.+90     	; 0x57f2 <__fpcmp_parts_f+0x9c>
    5798:	11 96       	adiw	r26, 0x01	; 1
    579a:	1c 91       	ld	r17, X
    579c:	11 97       	sbiw	r26, 0x01	; 1
    579e:	82 30       	cpi	r24, 0x02	; 2
    57a0:	f1 f0       	breq	.+60     	; 0x57de <__fpcmp_parts_f+0x88>
    57a2:	81 81       	ldd	r24, Z+1	; 0x01
    57a4:	18 17       	cp	r17, r24
    57a6:	d9 f4       	brne	.+54     	; 0x57de <__fpcmp_parts_f+0x88>
    57a8:	12 96       	adiw	r26, 0x02	; 2
    57aa:	2d 91       	ld	r18, X+
    57ac:	3c 91       	ld	r19, X
    57ae:	13 97       	sbiw	r26, 0x03	; 3
    57b0:	82 81       	ldd	r24, Z+2	; 0x02
    57b2:	93 81       	ldd	r25, Z+3	; 0x03
    57b4:	82 17       	cp	r24, r18
    57b6:	93 07       	cpc	r25, r19
    57b8:	94 f0       	brlt	.+36     	; 0x57de <__fpcmp_parts_f+0x88>
    57ba:	28 17       	cp	r18, r24
    57bc:	39 07       	cpc	r19, r25
    57be:	bc f0       	brlt	.+46     	; 0x57ee <__fpcmp_parts_f+0x98>
    57c0:	14 96       	adiw	r26, 0x04	; 4
    57c2:	8d 91       	ld	r24, X+
    57c4:	9d 91       	ld	r25, X+
    57c6:	0d 90       	ld	r0, X+
    57c8:	bc 91       	ld	r27, X
    57ca:	a0 2d       	mov	r26, r0
    57cc:	24 81       	ldd	r18, Z+4	; 0x04
    57ce:	35 81       	ldd	r19, Z+5	; 0x05
    57d0:	46 81       	ldd	r20, Z+6	; 0x06
    57d2:	57 81       	ldd	r21, Z+7	; 0x07
    57d4:	28 17       	cp	r18, r24
    57d6:	39 07       	cpc	r19, r25
    57d8:	4a 07       	cpc	r20, r26
    57da:	5b 07       	cpc	r21, r27
    57dc:	18 f4       	brcc	.+6      	; 0x57e4 <__fpcmp_parts_f+0x8e>
    57de:	11 23       	and	r17, r17
    57e0:	41 f0       	breq	.+16     	; 0x57f2 <__fpcmp_parts_f+0x9c>
    57e2:	0a c0       	rjmp	.+20     	; 0x57f8 <__fpcmp_parts_f+0xa2>
    57e4:	82 17       	cp	r24, r18
    57e6:	93 07       	cpc	r25, r19
    57e8:	a4 07       	cpc	r26, r20
    57ea:	b5 07       	cpc	r27, r21
    57ec:	40 f4       	brcc	.+16     	; 0x57fe <__fpcmp_parts_f+0xa8>
    57ee:	11 23       	and	r17, r17
    57f0:	19 f0       	breq	.+6      	; 0x57f8 <__fpcmp_parts_f+0xa2>
    57f2:	61 e0       	ldi	r22, 0x01	; 1
    57f4:	70 e0       	ldi	r23, 0x00	; 0
    57f6:	05 c0       	rjmp	.+10     	; 0x5802 <__fpcmp_parts_f+0xac>
    57f8:	6f ef       	ldi	r22, 0xFF	; 255
    57fa:	7f ef       	ldi	r23, 0xFF	; 255
    57fc:	02 c0       	rjmp	.+4      	; 0x5802 <__fpcmp_parts_f+0xac>
    57fe:	60 e0       	ldi	r22, 0x00	; 0
    5800:	70 e0       	ldi	r23, 0x00	; 0
    5802:	cb 01       	movw	r24, r22
    5804:	1f 91       	pop	r17
    5806:	08 95       	ret

00005808 <__udivmodhi4>:
    5808:	aa 1b       	sub	r26, r26
    580a:	bb 1b       	sub	r27, r27
    580c:	51 e1       	ldi	r21, 0x11	; 17
    580e:	07 c0       	rjmp	.+14     	; 0x581e <__udivmodhi4_ep>

00005810 <__udivmodhi4_loop>:
    5810:	aa 1f       	adc	r26, r26
    5812:	bb 1f       	adc	r27, r27
    5814:	a6 17       	cp	r26, r22
    5816:	b7 07       	cpc	r27, r23
    5818:	10 f0       	brcs	.+4      	; 0x581e <__udivmodhi4_ep>
    581a:	a6 1b       	sub	r26, r22
    581c:	b7 0b       	sbc	r27, r23

0000581e <__udivmodhi4_ep>:
    581e:	88 1f       	adc	r24, r24
    5820:	99 1f       	adc	r25, r25
    5822:	5a 95       	dec	r21
    5824:	a9 f7       	brne	.-22     	; 0x5810 <__udivmodhi4_loop>
    5826:	80 95       	com	r24
    5828:	90 95       	com	r25
    582a:	bc 01       	movw	r22, r24
    582c:	cd 01       	movw	r24, r26
    582e:	08 95       	ret

00005830 <__prologue_saves__>:
    5830:	2f 92       	push	r2
    5832:	3f 92       	push	r3
    5834:	4f 92       	push	r4
    5836:	5f 92       	push	r5
    5838:	6f 92       	push	r6
    583a:	7f 92       	push	r7
    583c:	8f 92       	push	r8
    583e:	9f 92       	push	r9
    5840:	af 92       	push	r10
    5842:	bf 92       	push	r11
    5844:	cf 92       	push	r12
    5846:	df 92       	push	r13
    5848:	ef 92       	push	r14
    584a:	ff 92       	push	r15
    584c:	0f 93       	push	r16
    584e:	1f 93       	push	r17
    5850:	cf 93       	push	r28
    5852:	df 93       	push	r29
    5854:	cd b7       	in	r28, 0x3d	; 61
    5856:	de b7       	in	r29, 0x3e	; 62
    5858:	ca 1b       	sub	r28, r26
    585a:	db 0b       	sbc	r29, r27
    585c:	0f b6       	in	r0, 0x3f	; 63
    585e:	f8 94       	cli
    5860:	de bf       	out	0x3e, r29	; 62
    5862:	0f be       	out	0x3f, r0	; 63
    5864:	cd bf       	out	0x3d, r28	; 61
    5866:	19 94       	eijmp

00005868 <__epilogue_restores__>:
    5868:	2a 88       	ldd	r2, Y+18	; 0x12
    586a:	39 88       	ldd	r3, Y+17	; 0x11
    586c:	48 88       	ldd	r4, Y+16	; 0x10
    586e:	5f 84       	ldd	r5, Y+15	; 0x0f
    5870:	6e 84       	ldd	r6, Y+14	; 0x0e
    5872:	7d 84       	ldd	r7, Y+13	; 0x0d
    5874:	8c 84       	ldd	r8, Y+12	; 0x0c
    5876:	9b 84       	ldd	r9, Y+11	; 0x0b
    5878:	aa 84       	ldd	r10, Y+10	; 0x0a
    587a:	b9 84       	ldd	r11, Y+9	; 0x09
    587c:	c8 84       	ldd	r12, Y+8	; 0x08
    587e:	df 80       	ldd	r13, Y+7	; 0x07
    5880:	ee 80       	ldd	r14, Y+6	; 0x06
    5882:	fd 80       	ldd	r15, Y+5	; 0x05
    5884:	0c 81       	ldd	r16, Y+4	; 0x04
    5886:	1b 81       	ldd	r17, Y+3	; 0x03
    5888:	aa 81       	ldd	r26, Y+2	; 0x02
    588a:	b9 81       	ldd	r27, Y+1	; 0x01
    588c:	ce 0f       	add	r28, r30
    588e:	d1 1d       	adc	r29, r1
    5890:	0f b6       	in	r0, 0x3f	; 63
    5892:	f8 94       	cli
    5894:	de bf       	out	0x3e, r29	; 62
    5896:	0f be       	out	0x3f, r0	; 63
    5898:	cd bf       	out	0x3d, r28	; 61
    589a:	ed 01       	movw	r28, r26
    589c:	08 95       	ret

0000589e <pow>:
    589e:	fa 01       	movw	r30, r20
    58a0:	ee 0f       	add	r30, r30
    58a2:	ff 1f       	adc	r31, r31
    58a4:	30 96       	adiw	r30, 0x00	; 0
    58a6:	21 05       	cpc	r18, r1
    58a8:	31 05       	cpc	r19, r1
    58aa:	99 f1       	breq	.+102    	; 0x5912 <pow+0x74>
    58ac:	61 15       	cp	r22, r1
    58ae:	71 05       	cpc	r23, r1
    58b0:	61 f4       	brne	.+24     	; 0x58ca <pow+0x2c>
    58b2:	80 38       	cpi	r24, 0x80	; 128
    58b4:	bf e3       	ldi	r27, 0x3F	; 63
    58b6:	9b 07       	cpc	r25, r27
    58b8:	49 f1       	breq	.+82     	; 0x590c <pow+0x6e>
    58ba:	68 94       	set
    58bc:	90 38       	cpi	r25, 0x80	; 128
    58be:	81 05       	cpc	r24, r1
    58c0:	61 f0       	breq	.+24     	; 0x58da <pow+0x3c>
    58c2:	80 38       	cpi	r24, 0x80	; 128
    58c4:	bf ef       	ldi	r27, 0xFF	; 255
    58c6:	9b 07       	cpc	r25, r27
    58c8:	41 f0       	breq	.+16     	; 0x58da <pow+0x3c>
    58ca:	99 23       	and	r25, r25
    58cc:	42 f5       	brpl	.+80     	; 0x591e <pow+0x80>
    58ce:	ff 3f       	cpi	r31, 0xFF	; 255
    58d0:	e1 05       	cpc	r30, r1
    58d2:	31 05       	cpc	r19, r1
    58d4:	21 05       	cpc	r18, r1
    58d6:	11 f1       	breq	.+68     	; 0x591c <pow+0x7e>
    58d8:	e8 94       	clt
    58da:	08 94       	sec
    58dc:	e7 95       	ror	r30
    58de:	d9 01       	movw	r26, r18
    58e0:	aa 23       	and	r26, r26
    58e2:	29 f4       	brne	.+10     	; 0x58ee <pow+0x50>
    58e4:	ab 2f       	mov	r26, r27
    58e6:	be 2f       	mov	r27, r30
    58e8:	f8 5f       	subi	r31, 0xF8	; 248
    58ea:	d0 f3       	brcs	.-12     	; 0x58e0 <pow+0x42>
    58ec:	10 c0       	rjmp	.+32     	; 0x590e <pow+0x70>
    58ee:	ff 5f       	subi	r31, 0xFF	; 255
    58f0:	70 f4       	brcc	.+28     	; 0x590e <pow+0x70>
    58f2:	a6 95       	lsr	r26
    58f4:	e0 f7       	brcc	.-8      	; 0x58ee <pow+0x50>
    58f6:	f7 39       	cpi	r31, 0x97	; 151
    58f8:	50 f0       	brcs	.+20     	; 0x590e <pow+0x70>
    58fa:	19 f0       	breq	.+6      	; 0x5902 <pow+0x64>
    58fc:	ff 3a       	cpi	r31, 0xAF	; 175
    58fe:	38 f4       	brcc	.+14     	; 0x590e <pow+0x70>
    5900:	9f 77       	andi	r25, 0x7F	; 127
    5902:	9f 93       	push	r25
    5904:	0c d0       	rcall	.+24     	; 0x591e <pow+0x80>
    5906:	0f 90       	pop	r0
    5908:	07 fc       	sbrc	r0, 7
    590a:	90 58       	subi	r25, 0x80	; 128
    590c:	08 95       	ret
    590e:	3e f0       	brts	.+14     	; 0x591e <pow+0x80>
    5910:	49 c0       	rjmp	.+146    	; 0x59a4 <__fp_nan>
    5912:	60 e0       	ldi	r22, 0x00	; 0
    5914:	70 e0       	ldi	r23, 0x00	; 0
    5916:	80 e8       	ldi	r24, 0x80	; 128
    5918:	9f e3       	ldi	r25, 0x3F	; 63
    591a:	08 95       	ret
    591c:	4f e7       	ldi	r20, 0x7F	; 127
    591e:	9f 77       	andi	r25, 0x7F	; 127
    5920:	5f 93       	push	r21
    5922:	4f 93       	push	r20
    5924:	3f 93       	push	r19
    5926:	2f 93       	push	r18
    5928:	d0 d0       	rcall	.+416    	; 0x5aca <log>
    592a:	2f 91       	pop	r18
    592c:	3f 91       	pop	r19
    592e:	4f 91       	pop	r20
    5930:	5f 91       	pop	r21
    5932:	14 da       	rcall	.-3032   	; 0x4d5c <__mulsf3>
    5934:	05 c0       	rjmp	.+10     	; 0x5940 <exp>
    5936:	19 f4       	brne	.+6      	; 0x593e <pow+0xa0>
    5938:	0e f0       	brts	.+2      	; 0x593c <pow+0x9e>
    593a:	2e c0       	rjmp	.+92     	; 0x5998 <__fp_inf>
    593c:	7d c0       	rjmp	.+250    	; 0x5a38 <__fp_zero>
    593e:	32 c0       	rjmp	.+100    	; 0x59a4 <__fp_nan>

00005940 <exp>:
    5940:	61 d0       	rcall	.+194    	; 0x5a04 <__fp_splitA>
    5942:	c8 f3       	brcs	.-14     	; 0x5936 <pow+0x98>
    5944:	96 38       	cpi	r25, 0x86	; 134
    5946:	c0 f7       	brcc	.-16     	; 0x5938 <pow+0x9a>
    5948:	07 f8       	bld	r0, 7
    594a:	0f 92       	push	r0
    594c:	e8 94       	clt
    594e:	2b e3       	ldi	r18, 0x3B	; 59
    5950:	3a ea       	ldi	r19, 0xAA	; 170
    5952:	48 eb       	ldi	r20, 0xB8	; 184
    5954:	5f e7       	ldi	r21, 0x7F	; 127
    5956:	38 d1       	rcall	.+624    	; 0x5bc8 <__mulsf3_pse>
    5958:	0f 92       	push	r0
    595a:	0f 92       	push	r0
    595c:	0f 92       	push	r0
    595e:	4d b7       	in	r20, 0x3d	; 61
    5960:	5e b7       	in	r21, 0x3e	; 62
    5962:	0f 92       	push	r0
    5964:	f2 d0       	rcall	.+484    	; 0x5b4a <modf>
    5966:	e4 ee       	ldi	r30, 0xE4	; 228
    5968:	f0 e0       	ldi	r31, 0x00	; 0
    596a:	1f d0       	rcall	.+62     	; 0x59aa <__fp_powser>
    596c:	4f 91       	pop	r20
    596e:	5f 91       	pop	r21
    5970:	ef 91       	pop	r30
    5972:	ff 91       	pop	r31
    5974:	e5 95       	asr	r30
    5976:	ee 1f       	adc	r30, r30
    5978:	ff 1f       	adc	r31, r31
    597a:	49 f0       	breq	.+18     	; 0x598e <exp+0x4e>
    597c:	fe 57       	subi	r31, 0x7E	; 126
    597e:	e0 68       	ori	r30, 0x80	; 128
    5980:	44 27       	eor	r20, r20
    5982:	ee 0f       	add	r30, r30
    5984:	44 1f       	adc	r20, r20
    5986:	fa 95       	dec	r31
    5988:	e1 f7       	brne	.-8      	; 0x5982 <exp+0x42>
    598a:	41 95       	neg	r20
    598c:	55 0b       	sbc	r21, r21
    598e:	64 d0       	rcall	.+200    	; 0x5a58 <ldexp>
    5990:	0f 90       	pop	r0
    5992:	07 fe       	sbrs	r0, 7
    5994:	58 c0       	rjmp	.+176    	; 0x5a46 <inverse>
    5996:	08 95       	ret

00005998 <__fp_inf>:
    5998:	97 f9       	bld	r25, 7
    599a:	9f 67       	ori	r25, 0x7F	; 127
    599c:	80 e8       	ldi	r24, 0x80	; 128
    599e:	70 e0       	ldi	r23, 0x00	; 0
    59a0:	60 e0       	ldi	r22, 0x00	; 0
    59a2:	08 95       	ret

000059a4 <__fp_nan>:
    59a4:	9f ef       	ldi	r25, 0xFF	; 255
    59a6:	80 ec       	ldi	r24, 0xC0	; 192
    59a8:	08 95       	ret

000059aa <__fp_powser>:
    59aa:	df 93       	push	r29
    59ac:	cf 93       	push	r28
    59ae:	1f 93       	push	r17
    59b0:	0f 93       	push	r16
    59b2:	ff 92       	push	r15
    59b4:	ef 92       	push	r14
    59b6:	df 92       	push	r13
    59b8:	7b 01       	movw	r14, r22
    59ba:	8c 01       	movw	r16, r24
    59bc:	68 94       	set
    59be:	05 c0       	rjmp	.+10     	; 0x59ca <__fp_powser+0x20>
    59c0:	da 2e       	mov	r13, r26
    59c2:	ef 01       	movw	r28, r30
    59c4:	ff d0       	rcall	.+510    	; 0x5bc4 <__mulsf3x>
    59c6:	fe 01       	movw	r30, r28
    59c8:	e8 94       	clt
    59ca:	a5 91       	lpm	r26, Z+
    59cc:	25 91       	lpm	r18, Z+
    59ce:	35 91       	lpm	r19, Z+
    59d0:	45 91       	lpm	r20, Z+
    59d2:	55 91       	lpm	r21, Z+
    59d4:	ae f3       	brts	.-22     	; 0x59c0 <__fp_powser+0x16>
    59d6:	ef 01       	movw	r28, r30
    59d8:	59 d1       	rcall	.+690    	; 0x5c8c <__addsf3x>
    59da:	fe 01       	movw	r30, r28
    59dc:	97 01       	movw	r18, r14
    59de:	a8 01       	movw	r20, r16
    59e0:	da 94       	dec	r13
    59e2:	79 f7       	brne	.-34     	; 0x59c2 <__fp_powser+0x18>
    59e4:	df 90       	pop	r13
    59e6:	ef 90       	pop	r14
    59e8:	ff 90       	pop	r15
    59ea:	0f 91       	pop	r16
    59ec:	1f 91       	pop	r17
    59ee:	cf 91       	pop	r28
    59f0:	df 91       	pop	r29
    59f2:	08 95       	ret

000059f4 <__fp_split3>:
    59f4:	57 fd       	sbrc	r21, 7
    59f6:	90 58       	subi	r25, 0x80	; 128
    59f8:	44 0f       	add	r20, r20
    59fa:	55 1f       	adc	r21, r21
    59fc:	59 f0       	breq	.+22     	; 0x5a14 <__fp_splitA+0x10>
    59fe:	5f 3f       	cpi	r21, 0xFF	; 255
    5a00:	71 f0       	breq	.+28     	; 0x5a1e <__fp_splitA+0x1a>
    5a02:	47 95       	ror	r20

00005a04 <__fp_splitA>:
    5a04:	88 0f       	add	r24, r24
    5a06:	97 fb       	bst	r25, 7
    5a08:	99 1f       	adc	r25, r25
    5a0a:	61 f0       	breq	.+24     	; 0x5a24 <__fp_splitA+0x20>
    5a0c:	9f 3f       	cpi	r25, 0xFF	; 255
    5a0e:	79 f0       	breq	.+30     	; 0x5a2e <__fp_splitA+0x2a>
    5a10:	87 95       	ror	r24
    5a12:	08 95       	ret
    5a14:	12 16       	cp	r1, r18
    5a16:	13 06       	cpc	r1, r19
    5a18:	14 06       	cpc	r1, r20
    5a1a:	55 1f       	adc	r21, r21
    5a1c:	f2 cf       	rjmp	.-28     	; 0x5a02 <__fp_split3+0xe>
    5a1e:	46 95       	lsr	r20
    5a20:	f1 df       	rcall	.-30     	; 0x5a04 <__fp_splitA>
    5a22:	08 c0       	rjmp	.+16     	; 0x5a34 <__fp_splitA+0x30>
    5a24:	16 16       	cp	r1, r22
    5a26:	17 06       	cpc	r1, r23
    5a28:	18 06       	cpc	r1, r24
    5a2a:	99 1f       	adc	r25, r25
    5a2c:	f1 cf       	rjmp	.-30     	; 0x5a10 <__fp_splitA+0xc>
    5a2e:	86 95       	lsr	r24
    5a30:	71 05       	cpc	r23, r1
    5a32:	61 05       	cpc	r22, r1
    5a34:	08 94       	sec
    5a36:	08 95       	ret

00005a38 <__fp_zero>:
    5a38:	e8 94       	clt

00005a3a <__fp_szero>:
    5a3a:	bb 27       	eor	r27, r27
    5a3c:	66 27       	eor	r22, r22
    5a3e:	77 27       	eor	r23, r23
    5a40:	cb 01       	movw	r24, r22
    5a42:	97 f9       	bld	r25, 7
    5a44:	08 95       	ret

00005a46 <inverse>:
    5a46:	9b 01       	movw	r18, r22
    5a48:	ac 01       	movw	r20, r24
    5a4a:	60 e0       	ldi	r22, 0x00	; 0
    5a4c:	70 e0       	ldi	r23, 0x00	; 0
    5a4e:	80 e8       	ldi	r24, 0x80	; 128
    5a50:	9f e3       	ldi	r25, 0x3F	; 63
    5a52:	7e ca       	rjmp	.-2820   	; 0x4f50 <__divsf3>
    5a54:	a1 cf       	rjmp	.-190    	; 0x5998 <__fp_inf>
    5a56:	6d c1       	rjmp	.+730    	; 0x5d32 <__fp_mpack>

00005a58 <ldexp>:
    5a58:	d5 df       	rcall	.-86     	; 0x5a04 <__fp_splitA>
    5a5a:	e8 f3       	brcs	.-6      	; 0x5a56 <inverse+0x10>
    5a5c:	99 23       	and	r25, r25
    5a5e:	d9 f3       	breq	.-10     	; 0x5a56 <inverse+0x10>
    5a60:	94 0f       	add	r25, r20
    5a62:	51 1d       	adc	r21, r1
    5a64:	bb f3       	brvs	.-18     	; 0x5a54 <inverse+0xe>
    5a66:	91 50       	subi	r25, 0x01	; 1
    5a68:	50 40       	sbci	r21, 0x00	; 0
    5a6a:	94 f0       	brlt	.+36     	; 0x5a90 <ldexp+0x38>
    5a6c:	59 f0       	breq	.+22     	; 0x5a84 <ldexp+0x2c>
    5a6e:	88 23       	and	r24, r24
    5a70:	32 f0       	brmi	.+12     	; 0x5a7e <ldexp+0x26>
    5a72:	66 0f       	add	r22, r22
    5a74:	77 1f       	adc	r23, r23
    5a76:	88 1f       	adc	r24, r24
    5a78:	91 50       	subi	r25, 0x01	; 1
    5a7a:	50 40       	sbci	r21, 0x00	; 0
    5a7c:	c1 f7       	brne	.-16     	; 0x5a6e <ldexp+0x16>
    5a7e:	9e 3f       	cpi	r25, 0xFE	; 254
    5a80:	51 05       	cpc	r21, r1
    5a82:	44 f7       	brge	.-48     	; 0x5a54 <inverse+0xe>
    5a84:	88 0f       	add	r24, r24
    5a86:	91 1d       	adc	r25, r1
    5a88:	96 95       	lsr	r25
    5a8a:	87 95       	ror	r24
    5a8c:	97 f9       	bld	r25, 7
    5a8e:	08 95       	ret
    5a90:	5f 3f       	cpi	r21, 0xFF	; 255
    5a92:	ac f0       	brlt	.+42     	; 0x5abe <ldexp+0x66>
    5a94:	98 3e       	cpi	r25, 0xE8	; 232
    5a96:	9c f0       	brlt	.+38     	; 0x5abe <ldexp+0x66>
    5a98:	bb 27       	eor	r27, r27
    5a9a:	86 95       	lsr	r24
    5a9c:	77 95       	ror	r23
    5a9e:	67 95       	ror	r22
    5aa0:	b7 95       	ror	r27
    5aa2:	08 f4       	brcc	.+2      	; 0x5aa6 <ldexp+0x4e>
    5aa4:	b1 60       	ori	r27, 0x01	; 1
    5aa6:	93 95       	inc	r25
    5aa8:	c1 f7       	brne	.-16     	; 0x5a9a <ldexp+0x42>
    5aaa:	bb 0f       	add	r27, r27
    5aac:	58 f7       	brcc	.-42     	; 0x5a84 <ldexp+0x2c>
    5aae:	11 f4       	brne	.+4      	; 0x5ab4 <ldexp+0x5c>
    5ab0:	60 ff       	sbrs	r22, 0
    5ab2:	e8 cf       	rjmp	.-48     	; 0x5a84 <ldexp+0x2c>
    5ab4:	6f 5f       	subi	r22, 0xFF	; 255
    5ab6:	7f 4f       	sbci	r23, 0xFF	; 255
    5ab8:	8f 4f       	sbci	r24, 0xFF	; 255
    5aba:	9f 4f       	sbci	r25, 0xFF	; 255
    5abc:	e3 cf       	rjmp	.-58     	; 0x5a84 <ldexp+0x2c>
    5abe:	bd cf       	rjmp	.-134    	; 0x5a3a <__fp_szero>
    5ac0:	0e f0       	brts	.+2      	; 0x5ac4 <ldexp+0x6c>
    5ac2:	37 c1       	rjmp	.+622    	; 0x5d32 <__fp_mpack>
    5ac4:	6f cf       	rjmp	.-290    	; 0x59a4 <__fp_nan>
    5ac6:	68 94       	set
    5ac8:	67 cf       	rjmp	.-306    	; 0x5998 <__fp_inf>

00005aca <log>:
    5aca:	9c df       	rcall	.-200    	; 0x5a04 <__fp_splitA>
    5acc:	c8 f3       	brcs	.-14     	; 0x5ac0 <ldexp+0x68>
    5ace:	99 23       	and	r25, r25
    5ad0:	d1 f3       	breq	.-12     	; 0x5ac6 <ldexp+0x6e>
    5ad2:	c6 f3       	brts	.-16     	; 0x5ac4 <ldexp+0x6c>
    5ad4:	df 93       	push	r29
    5ad6:	cf 93       	push	r28
    5ad8:	1f 93       	push	r17
    5ada:	0f 93       	push	r16
    5adc:	ff 92       	push	r15
    5ade:	c9 2f       	mov	r28, r25
    5ae0:	dd 27       	eor	r29, r29
    5ae2:	88 23       	and	r24, r24
    5ae4:	2a f0       	brmi	.+10     	; 0x5af0 <log+0x26>
    5ae6:	21 97       	sbiw	r28, 0x01	; 1
    5ae8:	66 0f       	add	r22, r22
    5aea:	77 1f       	adc	r23, r23
    5aec:	88 1f       	adc	r24, r24
    5aee:	da f7       	brpl	.-10     	; 0x5ae6 <log+0x1c>
    5af0:	20 e0       	ldi	r18, 0x00	; 0
    5af2:	30 e0       	ldi	r19, 0x00	; 0
    5af4:	40 e8       	ldi	r20, 0x80	; 128
    5af6:	5f eb       	ldi	r21, 0xBF	; 191
    5af8:	9f e3       	ldi	r25, 0x3F	; 63
    5afa:	88 39       	cpi	r24, 0x98	; 152
    5afc:	20 f0       	brcs	.+8      	; 0x5b06 <log+0x3c>
    5afe:	80 3e       	cpi	r24, 0xE0	; 224
    5b00:	30 f0       	brcs	.+12     	; 0x5b0e <log+0x44>
    5b02:	21 96       	adiw	r28, 0x01	; 1
    5b04:	8f 77       	andi	r24, 0x7F	; 127
    5b06:	fd d8       	rcall	.-3590   	; 0x4d02 <__addsf3>
    5b08:	ec e0       	ldi	r30, 0x0C	; 12
    5b0a:	f1 e0       	ldi	r31, 0x01	; 1
    5b0c:	03 c0       	rjmp	.+6      	; 0x5b14 <log+0x4a>
    5b0e:	f9 d8       	rcall	.-3598   	; 0x4d02 <__addsf3>
    5b10:	e9 e3       	ldi	r30, 0x39	; 57
    5b12:	f1 e0       	ldi	r31, 0x01	; 1
    5b14:	4a df       	rcall	.-364    	; 0x59aa <__fp_powser>
    5b16:	8b 01       	movw	r16, r22
    5b18:	be 01       	movw	r22, r28
    5b1a:	ec 01       	movw	r28, r24
    5b1c:	fb 2e       	mov	r15, r27
    5b1e:	6f 57       	subi	r22, 0x7F	; 127
    5b20:	71 09       	sbc	r23, r1
    5b22:	75 95       	asr	r23
    5b24:	77 1f       	adc	r23, r23
    5b26:	88 0b       	sbc	r24, r24
    5b28:	99 0b       	sbc	r25, r25
    5b2a:	4e db       	rcall	.-2404   	; 0x51c8 <__floatsisf>
    5b2c:	28 e1       	ldi	r18, 0x18	; 24
    5b2e:	32 e7       	ldi	r19, 0x72	; 114
    5b30:	41 e3       	ldi	r20, 0x31	; 49
    5b32:	5f e3       	ldi	r21, 0x3F	; 63
    5b34:	47 d0       	rcall	.+142    	; 0x5bc4 <__mulsf3x>
    5b36:	af 2d       	mov	r26, r15
    5b38:	98 01       	movw	r18, r16
    5b3a:	ae 01       	movw	r20, r28
    5b3c:	ff 90       	pop	r15
    5b3e:	0f 91       	pop	r16
    5b40:	1f 91       	pop	r17
    5b42:	cf 91       	pop	r28
    5b44:	df 91       	pop	r29
    5b46:	a2 d0       	rcall	.+324    	; 0x5c8c <__addsf3x>
    5b48:	10 c1       	rjmp	.+544    	; 0x5d6a <__fp_round>

00005b4a <modf>:
    5b4a:	fa 01       	movw	r30, r20
    5b4c:	dc 01       	movw	r26, r24
    5b4e:	aa 0f       	add	r26, r26
    5b50:	bb 1f       	adc	r27, r27
    5b52:	9b 01       	movw	r18, r22
    5b54:	ac 01       	movw	r20, r24
    5b56:	bf 57       	subi	r27, 0x7F	; 127
    5b58:	28 f4       	brcc	.+10     	; 0x5b64 <modf+0x1a>
    5b5a:	22 27       	eor	r18, r18
    5b5c:	33 27       	eor	r19, r19
    5b5e:	44 27       	eor	r20, r20
    5b60:	50 78       	andi	r21, 0x80	; 128
    5b62:	1f c0       	rjmp	.+62     	; 0x5ba2 <modf+0x58>
    5b64:	b7 51       	subi	r27, 0x17	; 23
    5b66:	88 f4       	brcc	.+34     	; 0x5b8a <modf+0x40>
    5b68:	ab 2f       	mov	r26, r27
    5b6a:	00 24       	eor	r0, r0
    5b6c:	46 95       	lsr	r20
    5b6e:	37 95       	ror	r19
    5b70:	27 95       	ror	r18
    5b72:	01 1c       	adc	r0, r1
    5b74:	a3 95       	inc	r26
    5b76:	d2 f3       	brmi	.-12     	; 0x5b6c <modf+0x22>
    5b78:	00 20       	and	r0, r0
    5b7a:	69 f0       	breq	.+26     	; 0x5b96 <modf+0x4c>
    5b7c:	22 0f       	add	r18, r18
    5b7e:	33 1f       	adc	r19, r19
    5b80:	44 1f       	adc	r20, r20
    5b82:	b3 95       	inc	r27
    5b84:	da f3       	brmi	.-10     	; 0x5b7c <modf+0x32>
    5b86:	0d d0       	rcall	.+26     	; 0x5ba2 <modf+0x58>
    5b88:	8b c8       	rjmp	.-3818   	; 0x4ca0 <__subsf3>
    5b8a:	61 30       	cpi	r22, 0x01	; 1
    5b8c:	71 05       	cpc	r23, r1
    5b8e:	a0 e8       	ldi	r26, 0x80	; 128
    5b90:	8a 07       	cpc	r24, r26
    5b92:	b9 46       	sbci	r27, 0x69	; 105
    5b94:	30 f4       	brcc	.+12     	; 0x5ba2 <modf+0x58>
    5b96:	9b 01       	movw	r18, r22
    5b98:	ac 01       	movw	r20, r24
    5b9a:	66 27       	eor	r22, r22
    5b9c:	77 27       	eor	r23, r23
    5b9e:	88 27       	eor	r24, r24
    5ba0:	90 78       	andi	r25, 0x80	; 128
    5ba2:	30 96       	adiw	r30, 0x00	; 0
    5ba4:	21 f0       	breq	.+8      	; 0x5bae <modf+0x64>
    5ba6:	20 83       	st	Z, r18
    5ba8:	31 83       	std	Z+1, r19	; 0x01
    5baa:	42 83       	std	Z+2, r20	; 0x02
    5bac:	53 83       	std	Z+3, r21	; 0x03
    5bae:	08 95       	ret
    5bb0:	ce d0       	rcall	.+412    	; 0x5d4e <__fp_pscA>
    5bb2:	28 f0       	brcs	.+10     	; 0x5bbe <modf+0x74>
    5bb4:	d3 d0       	rcall	.+422    	; 0x5d5c <__fp_pscB>
    5bb6:	18 f0       	brcs	.+6      	; 0x5bbe <modf+0x74>
    5bb8:	95 23       	and	r25, r21
    5bba:	09 f0       	breq	.+2      	; 0x5bbe <modf+0x74>
    5bbc:	ed ce       	rjmp	.-550    	; 0x5998 <__fp_inf>
    5bbe:	f2 ce       	rjmp	.-540    	; 0x59a4 <__fp_nan>
    5bc0:	11 24       	eor	r1, r1
    5bc2:	3b cf       	rjmp	.-394    	; 0x5a3a <__fp_szero>

00005bc4 <__mulsf3x>:
    5bc4:	17 df       	rcall	.-466    	; 0x59f4 <__fp_split3>
    5bc6:	a0 f3       	brcs	.-24     	; 0x5bb0 <modf+0x66>

00005bc8 <__mulsf3_pse>:
    5bc8:	95 9f       	mul	r25, r21
    5bca:	d1 f3       	breq	.-12     	; 0x5bc0 <modf+0x76>
    5bcc:	95 0f       	add	r25, r21
    5bce:	50 e0       	ldi	r21, 0x00	; 0
    5bd0:	55 1f       	adc	r21, r21
    5bd2:	62 9f       	mul	r22, r18
    5bd4:	f0 01       	movw	r30, r0
    5bd6:	72 9f       	mul	r23, r18
    5bd8:	bb 27       	eor	r27, r27
    5bda:	f0 0d       	add	r31, r0
    5bdc:	b1 1d       	adc	r27, r1
    5bde:	63 9f       	mul	r22, r19
    5be0:	aa 27       	eor	r26, r26
    5be2:	f0 0d       	add	r31, r0
    5be4:	b1 1d       	adc	r27, r1
    5be6:	aa 1f       	adc	r26, r26
    5be8:	64 9f       	mul	r22, r20
    5bea:	66 27       	eor	r22, r22
    5bec:	b0 0d       	add	r27, r0
    5bee:	a1 1d       	adc	r26, r1
    5bf0:	66 1f       	adc	r22, r22
    5bf2:	82 9f       	mul	r24, r18
    5bf4:	22 27       	eor	r18, r18
    5bf6:	b0 0d       	add	r27, r0
    5bf8:	a1 1d       	adc	r26, r1
    5bfa:	62 1f       	adc	r22, r18
    5bfc:	73 9f       	mul	r23, r19
    5bfe:	b0 0d       	add	r27, r0
    5c00:	a1 1d       	adc	r26, r1
    5c02:	62 1f       	adc	r22, r18
    5c04:	83 9f       	mul	r24, r19
    5c06:	a0 0d       	add	r26, r0
    5c08:	61 1d       	adc	r22, r1
    5c0a:	22 1f       	adc	r18, r18
    5c0c:	74 9f       	mul	r23, r20
    5c0e:	33 27       	eor	r19, r19
    5c10:	a0 0d       	add	r26, r0
    5c12:	61 1d       	adc	r22, r1
    5c14:	23 1f       	adc	r18, r19
    5c16:	84 9f       	mul	r24, r20
    5c18:	60 0d       	add	r22, r0
    5c1a:	21 1d       	adc	r18, r1
    5c1c:	82 2f       	mov	r24, r18
    5c1e:	76 2f       	mov	r23, r22
    5c20:	6a 2f       	mov	r22, r26
    5c22:	11 24       	eor	r1, r1
    5c24:	9f 57       	subi	r25, 0x7F	; 127
    5c26:	50 40       	sbci	r21, 0x00	; 0
    5c28:	8a f0       	brmi	.+34     	; 0x5c4c <__mulsf3_pse+0x84>
    5c2a:	e1 f0       	breq	.+56     	; 0x5c64 <__mulsf3_pse+0x9c>
    5c2c:	88 23       	and	r24, r24
    5c2e:	4a f0       	brmi	.+18     	; 0x5c42 <__mulsf3_pse+0x7a>
    5c30:	ee 0f       	add	r30, r30
    5c32:	ff 1f       	adc	r31, r31
    5c34:	bb 1f       	adc	r27, r27
    5c36:	66 1f       	adc	r22, r22
    5c38:	77 1f       	adc	r23, r23
    5c3a:	88 1f       	adc	r24, r24
    5c3c:	91 50       	subi	r25, 0x01	; 1
    5c3e:	50 40       	sbci	r21, 0x00	; 0
    5c40:	a9 f7       	brne	.-22     	; 0x5c2c <__mulsf3_pse+0x64>
    5c42:	9e 3f       	cpi	r25, 0xFE	; 254
    5c44:	51 05       	cpc	r21, r1
    5c46:	70 f0       	brcs	.+28     	; 0x5c64 <__mulsf3_pse+0x9c>
    5c48:	a7 ce       	rjmp	.-690    	; 0x5998 <__fp_inf>
    5c4a:	f7 ce       	rjmp	.-530    	; 0x5a3a <__fp_szero>
    5c4c:	5f 3f       	cpi	r21, 0xFF	; 255
    5c4e:	ec f3       	brlt	.-6      	; 0x5c4a <__mulsf3_pse+0x82>
    5c50:	98 3e       	cpi	r25, 0xE8	; 232
    5c52:	dc f3       	brlt	.-10     	; 0x5c4a <__mulsf3_pse+0x82>
    5c54:	86 95       	lsr	r24
    5c56:	77 95       	ror	r23
    5c58:	67 95       	ror	r22
    5c5a:	b7 95       	ror	r27
    5c5c:	f7 95       	ror	r31
    5c5e:	e7 95       	ror	r30
    5c60:	9f 5f       	subi	r25, 0xFF	; 255
    5c62:	c1 f7       	brne	.-16     	; 0x5c54 <__mulsf3_pse+0x8c>
    5c64:	fe 2b       	or	r31, r30
    5c66:	88 0f       	add	r24, r24
    5c68:	91 1d       	adc	r25, r1
    5c6a:	96 95       	lsr	r25
    5c6c:	87 95       	ror	r24
    5c6e:	97 f9       	bld	r25, 7
    5c70:	08 95       	ret
    5c72:	6d d0       	rcall	.+218    	; 0x5d4e <__fp_pscA>
    5c74:	30 f0       	brcs	.+12     	; 0x5c82 <__mulsf3_pse+0xba>
    5c76:	72 d0       	rcall	.+228    	; 0x5d5c <__fp_pscB>
    5c78:	20 f0       	brcs	.+8      	; 0x5c82 <__mulsf3_pse+0xba>
    5c7a:	31 f4       	brne	.+12     	; 0x5c88 <__mulsf3_pse+0xc0>
    5c7c:	9f 3f       	cpi	r25, 0xFF	; 255
    5c7e:	11 f4       	brne	.+4      	; 0x5c84 <__mulsf3_pse+0xbc>
    5c80:	1e f4       	brtc	.+6      	; 0x5c88 <__mulsf3_pse+0xc0>
    5c82:	90 ce       	rjmp	.-736    	; 0x59a4 <__fp_nan>
    5c84:	0e f4       	brtc	.+2      	; 0x5c88 <__mulsf3_pse+0xc0>
    5c86:	e0 95       	com	r30
    5c88:	e7 fb       	bst	r30, 7
    5c8a:	86 ce       	rjmp	.-756    	; 0x5998 <__fp_inf>

00005c8c <__addsf3x>:
    5c8c:	e9 2f       	mov	r30, r25
    5c8e:	b2 de       	rcall	.-668    	; 0x59f4 <__fp_split3>
    5c90:	80 f3       	brcs	.-32     	; 0x5c72 <__mulsf3_pse+0xaa>
    5c92:	ba 17       	cp	r27, r26
    5c94:	62 07       	cpc	r22, r18
    5c96:	73 07       	cpc	r23, r19
    5c98:	84 07       	cpc	r24, r20
    5c9a:	95 07       	cpc	r25, r21
    5c9c:	18 f0       	brcs	.+6      	; 0x5ca4 <__addsf3x+0x18>
    5c9e:	71 f4       	brne	.+28     	; 0x5cbc <__addsf3x+0x30>
    5ca0:	9e f5       	brtc	.+102    	; 0x5d08 <__addsf3x+0x7c>
    5ca2:	ca ce       	rjmp	.-620    	; 0x5a38 <__fp_zero>
    5ca4:	0e f4       	brtc	.+2      	; 0x5ca8 <__addsf3x+0x1c>
    5ca6:	e0 95       	com	r30
    5ca8:	0b 2e       	mov	r0, r27
    5caa:	ba 2f       	mov	r27, r26
    5cac:	a0 2d       	mov	r26, r0
    5cae:	0b 01       	movw	r0, r22
    5cb0:	b9 01       	movw	r22, r18
    5cb2:	90 01       	movw	r18, r0
    5cb4:	0c 01       	movw	r0, r24
    5cb6:	ca 01       	movw	r24, r20
    5cb8:	a0 01       	movw	r20, r0
    5cba:	11 24       	eor	r1, r1
    5cbc:	ff 27       	eor	r31, r31
    5cbe:	59 1b       	sub	r21, r25
    5cc0:	99 f0       	breq	.+38     	; 0x5ce8 <__addsf3x+0x5c>
    5cc2:	59 3f       	cpi	r21, 0xF9	; 249
    5cc4:	50 f4       	brcc	.+20     	; 0x5cda <__addsf3x+0x4e>
    5cc6:	50 3e       	cpi	r21, 0xE0	; 224
    5cc8:	68 f1       	brcs	.+90     	; 0x5d24 <__addsf3x+0x98>
    5cca:	1a 16       	cp	r1, r26
    5ccc:	f0 40       	sbci	r31, 0x00	; 0
    5cce:	a2 2f       	mov	r26, r18
    5cd0:	23 2f       	mov	r18, r19
    5cd2:	34 2f       	mov	r19, r20
    5cd4:	44 27       	eor	r20, r20
    5cd6:	58 5f       	subi	r21, 0xF8	; 248
    5cd8:	f3 cf       	rjmp	.-26     	; 0x5cc0 <__addsf3x+0x34>
    5cda:	46 95       	lsr	r20
    5cdc:	37 95       	ror	r19
    5cde:	27 95       	ror	r18
    5ce0:	a7 95       	ror	r26
    5ce2:	f0 40       	sbci	r31, 0x00	; 0
    5ce4:	53 95       	inc	r21
    5ce6:	c9 f7       	brne	.-14     	; 0x5cda <__addsf3x+0x4e>
    5ce8:	7e f4       	brtc	.+30     	; 0x5d08 <__addsf3x+0x7c>
    5cea:	1f 16       	cp	r1, r31
    5cec:	ba 0b       	sbc	r27, r26
    5cee:	62 0b       	sbc	r22, r18
    5cf0:	73 0b       	sbc	r23, r19
    5cf2:	84 0b       	sbc	r24, r20
    5cf4:	ba f0       	brmi	.+46     	; 0x5d24 <__addsf3x+0x98>
    5cf6:	91 50       	subi	r25, 0x01	; 1
    5cf8:	a1 f0       	breq	.+40     	; 0x5d22 <__addsf3x+0x96>
    5cfa:	ff 0f       	add	r31, r31
    5cfc:	bb 1f       	adc	r27, r27
    5cfe:	66 1f       	adc	r22, r22
    5d00:	77 1f       	adc	r23, r23
    5d02:	88 1f       	adc	r24, r24
    5d04:	c2 f7       	brpl	.-16     	; 0x5cf6 <__addsf3x+0x6a>
    5d06:	0e c0       	rjmp	.+28     	; 0x5d24 <__addsf3x+0x98>
    5d08:	ba 0f       	add	r27, r26
    5d0a:	62 1f       	adc	r22, r18
    5d0c:	73 1f       	adc	r23, r19
    5d0e:	84 1f       	adc	r24, r20
    5d10:	48 f4       	brcc	.+18     	; 0x5d24 <__addsf3x+0x98>
    5d12:	87 95       	ror	r24
    5d14:	77 95       	ror	r23
    5d16:	67 95       	ror	r22
    5d18:	b7 95       	ror	r27
    5d1a:	f7 95       	ror	r31
    5d1c:	9e 3f       	cpi	r25, 0xFE	; 254
    5d1e:	08 f0       	brcs	.+2      	; 0x5d22 <__addsf3x+0x96>
    5d20:	b3 cf       	rjmp	.-154    	; 0x5c88 <__mulsf3_pse+0xc0>
    5d22:	93 95       	inc	r25
    5d24:	88 0f       	add	r24, r24
    5d26:	08 f0       	brcs	.+2      	; 0x5d2a <__addsf3x+0x9e>
    5d28:	99 27       	eor	r25, r25
    5d2a:	ee 0f       	add	r30, r30
    5d2c:	97 95       	ror	r25
    5d2e:	87 95       	ror	r24
    5d30:	08 95       	ret

00005d32 <__fp_mpack>:
    5d32:	9f 3f       	cpi	r25, 0xFF	; 255
    5d34:	31 f0       	breq	.+12     	; 0x5d42 <__fp_mpack_finite+0xc>

00005d36 <__fp_mpack_finite>:
    5d36:	91 50       	subi	r25, 0x01	; 1
    5d38:	20 f4       	brcc	.+8      	; 0x5d42 <__fp_mpack_finite+0xc>
    5d3a:	87 95       	ror	r24
    5d3c:	77 95       	ror	r23
    5d3e:	67 95       	ror	r22
    5d40:	b7 95       	ror	r27
    5d42:	88 0f       	add	r24, r24
    5d44:	91 1d       	adc	r25, r1
    5d46:	96 95       	lsr	r25
    5d48:	87 95       	ror	r24
    5d4a:	97 f9       	bld	r25, 7
    5d4c:	08 95       	ret

00005d4e <__fp_pscA>:
    5d4e:	00 24       	eor	r0, r0
    5d50:	0a 94       	dec	r0
    5d52:	16 16       	cp	r1, r22
    5d54:	17 06       	cpc	r1, r23
    5d56:	18 06       	cpc	r1, r24
    5d58:	09 06       	cpc	r0, r25
    5d5a:	08 95       	ret

00005d5c <__fp_pscB>:
    5d5c:	00 24       	eor	r0, r0
    5d5e:	0a 94       	dec	r0
    5d60:	12 16       	cp	r1, r18
    5d62:	13 06       	cpc	r1, r19
    5d64:	14 06       	cpc	r1, r20
    5d66:	05 06       	cpc	r0, r21
    5d68:	08 95       	ret

00005d6a <__fp_round>:
    5d6a:	09 2e       	mov	r0, r25
    5d6c:	03 94       	inc	r0
    5d6e:	00 0c       	add	r0, r0
    5d70:	11 f4       	brne	.+4      	; 0x5d76 <__fp_round+0xc>
    5d72:	88 23       	and	r24, r24
    5d74:	52 f0       	brmi	.+20     	; 0x5d8a <__fp_round+0x20>
    5d76:	bb 0f       	add	r27, r27
    5d78:	40 f4       	brcc	.+16     	; 0x5d8a <__fp_round+0x20>
    5d7a:	bf 2b       	or	r27, r31
    5d7c:	11 f4       	brne	.+4      	; 0x5d82 <__fp_round+0x18>
    5d7e:	60 ff       	sbrs	r22, 0
    5d80:	04 c0       	rjmp	.+8      	; 0x5d8a <__fp_round+0x20>
    5d82:	6f 5f       	subi	r22, 0xFF	; 255
    5d84:	7f 4f       	sbci	r23, 0xFF	; 255
    5d86:	8f 4f       	sbci	r24, 0xFF	; 255
    5d88:	9f 4f       	sbci	r25, 0xFF	; 255
    5d8a:	08 95       	ret

00005d8c <_exit>:
    5d8c:	f8 94       	cli

00005d8e <__stop_program>:
    5d8e:	ff cf       	rjmp	.-2      	; 0x5d8e <__stop_program>
